Script started on 2024-09-03 23:26:18-07:00
]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.camera.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-det.pth --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv[jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ source activate bevfusion
]777;notify;Command completed;source activate bevfusion]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ source activate bevfusiontorchpack dist-run -np 1 python tools/train.py connfigs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.cameraa.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-deet.pth --run-dir train_result_infra_short_full
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/core/bbox/box_np_ops.py:781: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.
  def points_in_convex_polygon_jit(points, polygon, clockwise=True):
2024-09-03 23:26:43,655 - mmdet3d - INFO - Config:
seed = 0
deterministic = False
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
load_from = 'pretrained/lidar-only-det.pth'
resume_from = None
cudnn_benchmark = False
fp16 = dict(loss_scale=dict(growth_interval=2000))
max_epochs = 10
runner = dict(type='CustomEpochBasedRunner', max_epochs=10)
dataset_type = 'NuScenesDataset'
dataset_root = '/scratch/jmeng18/V2X-SIM/'
gt_paste_stop_epoch = -1
reduce_beams = 32
load_dim = 5
use_dim = 5
load_augmented = None
point_cloud_range = [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
voxel_size = [0.075, 0.075, 0.2]
image_size = [256, 704]
augment2d = dict(
    resize=[[0.38, 0.55], [0.48, 0.48]],
    rotate=[-5.4, 5.4],
    gridmask=dict(prob=0.0, fixed_prob=True))
augment3d = dict(
    scale=[0.9, 1.1], rotate=[-0.78539816, 0.78539816], translate=0.5)
object_classes = ['car']
map_classes = [
    'drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area'
]
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=0,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ObjectPaste',
        stop_epoch=-1,
        db_sampler=dict(
            dataset_root='/scratch/jmeng18/V2X-SIM/',
            info_path='/scratch/jmeng18/V2X-SIM/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1], filter_by_min_points=dict(car=5)),
            classes=['car'],
            sample_groups=dict(car=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32))),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.38, 0.55],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[-5.4, 5.4],
        rand_flip=True,
        is_train=True),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[0.9, 1.1],
        rot_lim=[-0.78539816, 0.78539816],
        trans_lim=0.5,
        is_train=True),
    dict(type='RandomFlip3D'),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(type='ObjectNameFilter', classes=['car']),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='GridMask',
        use_h=True,
        use_w=True,
        max_epoch=10,
        rotate=1,
        offset=False,
        ratio=0.5,
        mode=1,
        prob=0.0,
        fixed_prob=True),
    dict(type='PointShuffle'),
    dict(type='DefaultFormatBundle3D', classes=['car']),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.48, 0.48],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[0.0, 0.0],
        rand_flip=False,
        is_train=False),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[1.0, 1.0],
        rot_lim=[0.0, 0.0],
        trans_lim=0.0,
        is_train=False),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(type='DefaultFormatBundle3D', classes=['car']),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='CBGSDataset',
        dataset=dict(
            type='NuScenesDataset',
            dataset_root='/scratch/jmeng18/V2X-SIM/',
            ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_train.pkl',
            pipeline=[
                dict(type='LoadMultiViewImageFromFiles', to_float32=True),
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    load_augmented=None),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=0,
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    load_augmented=None),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True,
                    with_attr_label=False),
                dict(
                    type='ObjectPaste',
                    stop_epoch=-1,
                    db_sampler=dict(
                        dataset_root='/scratch/jmeng18/V2X-SIM/',
                        info_path=
                        '/scratch/jmeng18/V2X-SIM/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(car=5)),
                        classes=['car'],
                        sample_groups=dict(car=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=5,
                            reduce_beams=32))),
                dict(
                    type='ImageAug3D',
                    final_dim=[256, 704],
                    resize_lim=[0.38, 0.55],
                    bot_pct_lim=[0.0, 0.0],
                    rot_lim=[-5.4, 5.4],
                    rand_flip=True,
                    is_train=True),
                dict(
                    type='GlobalRotScaleTrans',
                    resize_lim=[0.9, 1.1],
                    rot_lim=[-0.78539816, 0.78539816],
                    trans_lim=0.5,
                    is_train=True),
                dict(type='RandomFlip3D'),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(type='ObjectNameFilter', classes=['car']),
                dict(
                    type='ImageNormalize',
                    mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225]),
                dict(
                    type='GridMask',
                    use_h=True,
                    use_w=True,
                    max_epoch=10,
                    rotate=1,
                    offset=False,
                    ratio=0.5,
                    mode=1,
                    prob=0.0,
                    fixed_prob=True),
                dict(type='PointShuffle'),
                dict(type='DefaultFormatBundle3D', classes=['car']),
                dict(
                    type='Collect3D',
                    keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                    meta_keys=[
                        'camera_intrinsics', 'camera2ego', 'lidar2ego',
                        'lidar2camera', 'lidar2image', 'camera2lidar',
                        'img_aug_matrix', 'lidar_aug_matrix'
                    ]),
                dict(type='GTDepth', keyframe_only=True)
            ],
            object_classes=['car'],
            map_classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area'
            ],
            modality=dict(
                use_lidar=True,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False),
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        dataset_root='/scratch/jmeng18/V2X-SIM/',
        ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='DefaultFormatBundle3D', classes=['car']),
            dict(
                type='Collect3D',
                keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=['car'],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        dataset_root='/scratch/jmeng18/V2X-SIM/',
        ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='DefaultFormatBundle3D', classes=['car']),
            dict(
                type='Collect3D',
                keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=['car'],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            load_augmented=None),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            pad_empty_sweeps=True,
            remove_close=True,
            load_augmented=None),
        dict(
            type='LoadAnnotations3D',
            with_bbox_3d=True,
            with_label_3d=True,
            with_attr_label=False),
        dict(
            type='ImageAug3D',
            final_dim=[256, 704],
            resize_lim=[0.48, 0.48],
            bot_pct_lim=[0.0, 0.0],
            rot_lim=[0.0, 0.0],
            rand_flip=False,
            is_train=False),
        dict(
            type='GlobalRotScaleTrans',
            resize_lim=[1.0, 1.0],
            rot_lim=[0.0, 0.0],
            trans_lim=0.0,
            is_train=False),
        dict(
            type='PointsRangeFilter',
            point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
        dict(
            type='ImageNormalize',
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]),
        dict(type='DefaultFormatBundle3D', classes=['car']),
        dict(
            type='Collect3D',
            keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
            meta_keys=[
                'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
                'lidar2image', 'camera2lidar', 'img_aug_matrix',
                'lidar_aug_matrix'
            ]),
        dict(type='GTDepth', keyframe_only=True)
    ])
radar_sweeps = 6
radar_max_points = 2500
radar_use_dims = [
    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 55, 56
]
radar_compensate_velocity = True
radar_filtering = 'none'
radar_voxel_size = [0.8, 0.8, 8]
radar_jitter = 0
radar_normalize = False
model = dict(
    type='BEVFusion',
    encoders=dict(
        camera=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='SwinTransformer',
                embed_dims=96,
                depths=[2, 2, 6, 2],
                num_heads=[3, 6, 12, 24],
                window_size=7,
                mlp_ratio=4,
                qkv_bias=True,
                qk_scale=None,
                drop_rate=0.0,
                attn_drop_rate=0.0,
                drop_path_rate=0.2,
                patch_norm=True,
                out_indices=[1, 2, 3],
                with_cp=False,
                convert_weights=True,
                init_cfg=dict(
                    type='Pretrained',
                    checkpoint='pretrained/swint-nuimages-pretrained.pth'))),
        lidar=dict(
            voxelize=dict(
                max_num_points=10,
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                voxel_size=[0.075, 0.075, 0.2],
                max_voxels=[120000, 160000]),
            backbone=dict(
                type='SparseEncoder',
                in_channels=5,
                sparse_shape=[1440, 1440, 41],
                output_channels=128,
                order=['conv', 'norm', 'act'],
                encoder_channels=[[16, 16, 32], [32, 32, 64], [64, 64, 128],
                                  [128, 128]],
                encoder_paddings=[[0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]],
                                  [0, 0]],
                block_type='basicblock')),
        infra=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='SwinTransformer',
                embed_dims=96,
                depths=[2, 2, 6, 2],
                num_heads=[3, 6, 12, 24],
                window_size=7,
                mlp_ratio=4,
                qkv_bias=True,
                qk_scale=None,
                drop_rate=0.0,
                attn_drop_rate=0.0,
                drop_path_rate=0.2,
                patch_norm=True,
                out_indices=[1, 2, 3],
                with_cp=False,
                convert_weights=True,
                init_cfg=dict(
                    type='Pretrained',
                    checkpoint=
                    'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'
                )))),
    fuser=dict(type='ConvFuser', in_channels=[80, 256, 80], out_channels=256),
    heads=dict(
        map=None,
        object=dict(
            type='TransFusionHead',
            num_proposals=200,
            auxiliary=True,
            in_channels=512,
            hidden_channel=128,
            num_classes=1,
            num_decoder_layers=1,
            num_heads=8,
            nms_kernel_size=3,
            ffn_channel=256,
            dropout=0.1,
            bn_momentum=0.1,
            activation='relu',
            train_cfg=dict(
                dataset='nuScenes',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                grid_size=[1440, 1440, 41],
                voxel_size=[0.075, 0.075, 0.2],
                out_size_factor=8,
                gaussian_overlap=0.1,
                min_radius=2,
                pos_weight=-1,
                code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                assigner=dict(
                    type='HungarianAssigner3D',
                    iou_calculator=dict(
                        type='BboxOverlaps3D', coordinate='lidar'),
                    cls_cost=dict(
                        type='FocalLossCost',
                        gamma=2.0,
                        alpha=0.25,
                        weight=0.15),
                    reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                    iou_cost=dict(type='IoU3DCost', weight=0.25))),
            test_cfg=dict(
                dataset='nuScenes',
                grid_size=[1440, 1440, 41],
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                pc_range=[-54.0, -54.0],
                nms_type=None),
            common_heads=dict(
                center=[2, 2],
                height=[1, 2],
                dim=[3, 2],
                rot=[2, 2],
                vel=[2, 2]),
            bbox_coder=dict(
                type='TransFusionBBoxCoder',
                pc_range=[-54.0, -54.0],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                score_threshold=0.0,
                out_size_factor=8,
                voxel_size=[0.075, 0.075]),
            loss_cls=dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                reduction='mean',
                loss_weight=1.0),
            loss_heatmap=dict(
                type='GaussianFocalLoss', reduction='mean', loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', reduction='mean',
                           loss_weight=0.25))),
    decoder=dict(
        backbone=dict(
            type='SECOND',
            in_channels=256,
            out_channels=[128, 256],
            layer_nums=[5, 5],
            layer_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            conv_cfg=dict(type='Conv2d', bias=False)),
        neck=dict(
            type='SECONDFPN',
            in_channels=[128, 256],
            out_channels=[256, 256],
            upsample_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            upsample_cfg=dict(type='deconv', bias=False),
            use_conv_for_no_stride=True)))
optimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.33333333,
    min_lr_ratio=1e-07)
momentum_config = dict(policy='cyclic')
run_dir = 'train_result_infra_short_full'

2024-09-03 23:26:43,656 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2024-09-03 23:26:50,666 - mmdet3d - INFO - load 349483 car database infos
2024-09-03 23:26:50,666 - mmdet3d - INFO - load 157002 bicycle database infos
2024-09-03 23:26:50,666 - mmdet3d - INFO - load 40210 motorcycle database infos
2024-09-03 23:26:50,666 - mmdet3d - INFO - load 16943 vehicle.emergency.police database infos
2024-09-03 23:26:51,526 - mmdet3d - INFO - After filter database:
2024-09-03 23:26:51,540 - mmdet3d - INFO - load 170227 car database infos
2024-09-03 23:26:51,542 - mmdet3d - INFO - load 157002 bicycle database infos
2024-09-03 23:26:51,543 - mmdet3d - INFO - load 40210 motorcycle database infos
2024-09-03 23:26:51,544 - mmdet3d - INFO - load 16943 vehicle.emergency.police database infos
/home/jmeng18/.conda/envs/bevfusion/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1639180588308/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
2024-09-03 23:26:52,177 - mmdet - INFO - load checkpoint from local path: pretrained/swint-nuimages-pretrained.pth
2024-09-03 23:26:52,264 - mmdet - INFO - load checkpoint from local path: pretrained/swint-nuimages-pretrained.pth
2024-09-03 23:26:52,331 - mmdet3d - INFO - Model:
BEVFusion(
  (encoders): ModuleDict(
    (camera): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'pretrained/swint-nuimages-pretrained.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
    (lidar): ModuleDict(
      (voxelize): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
      (backbone): SparseEncoder(
        (conv_input): SparseSequential(
          (0): SubMConv3d()
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (encoder_layers): SparseSequential(
          (encoder_layer1): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer2): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer3): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer4): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
        (conv_out): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    (infra): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
  )
  (fuser): ConvFuser(
    (0): Conv2d(416, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (decoder): ModuleDict(
    (backbone): SECOND(
      (blocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    (neck): SECONDFPN(
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  )
  (heads): ModuleDict(
    (object): TransFusionHead(
      (loss_cls): FocalLoss()
      (loss_bbox): L1Loss()
      (loss_iou): VarifocalLoss()
      (loss_heatmap): GaussianFocalLoss()
      (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (heatmap_head): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (class_encoding): Conv1d(1, 128, kernel_size=(1,), stride=(1,))
      (decoder): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (linear1): Linear(in_features=128, out_features=256, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=256, out_features=128, bias=True)
          (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
          (self_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
          (cross_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (prediction_heads): ModuleList(
        (0): FFN(
          (center): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
        )
      )
    )
  )
)
2024-09-03 23:26:55,362 - mmdet3d - INFO - load checkpoint from local path: pretrained/lidar-only-det.pth
2024-09-03 23:26:55,416 - mmdet3d - WARNING - The model and loaded state dict do not match exactly

size mismatch for heads.object.heatmap_head.1.weight: copying a param with shape torch.Size([10, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([1, 128, 3, 3]).
size mismatch for heads.object.heatmap_head.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([1]).
size mismatch for heads.object.class_encoding.weight: copying a param with shape torch.Size([128, 10, 1]) from checkpoint, the shape in current model is torch.Size([128, 1, 1]).
size mismatch for heads.object.prediction_heads.0.heatmap.1.weight: copying a param with shape torch.Size([10, 64, 1]) from checkpoint, the shape in current model is torch.Size([1, 64, 1]).
size mismatch for heads.object.prediction_heads.0.heatmap.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([1]).
missing keys in source state_dict: encoders.camera.backbone.patch_embed.projection.weight, encoders.camera.backbone.patch_embed.projection.bias, encoders.camera.backbone.patch_embed.norm.weight, encoders.camera.backbone.patch_embed.norm.bias, encoders.camera.backbone.stages.0.blocks.0.norm1.weight, encoders.camera.backbone.stages.0.blocks.0.norm1.bias, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.0.blocks.0.norm2.weight, encoders.camera.backbone.stages.0.blocks.0.norm2.bias, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.0.blocks.1.norm1.weight, encoders.camera.backbone.stages.0.blocks.1.norm1.bias, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.0.blocks.1.norm2.weight, encoders.camera.backbone.stages.0.blocks.1.norm2.bias, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.0.downsample.norm.weight, encoders.camera.backbone.stages.0.downsample.norm.bias, encoders.camera.backbone.stages.0.downsample.reduction.weight, encoders.camera.backbone.stages.1.blocks.0.norm1.weight, encoders.camera.backbone.stages.1.blocks.0.norm1.bias, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.1.blocks.0.norm2.weight, encoders.camera.backbone.stages.1.blocks.0.norm2.bias, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.1.blocks.1.norm1.weight, encoders.camera.backbone.stages.1.blocks.1.norm1.bias, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.1.blocks.1.norm2.weight, encoders.camera.backbone.stages.1.blocks.1.norm2.bias, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.1.downsample.norm.weight, encoders.camera.backbone.stages.1.downsample.norm.bias, encoders.camera.backbone.stages.1.downsample.reduction.weight, encoders.camera.backbone.stages.2.blocks.0.norm1.weight, encoders.camera.backbone.stages.2.blocks.0.norm1.bias, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.0.norm2.weight, encoders.camera.backbone.stages.2.blocks.0.norm2.bias, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.1.norm1.weight, encoders.camera.backbone.stages.2.blocks.1.norm1.bias, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.1.norm2.weight, encoders.camera.backbone.stages.2.blocks.1.norm2.bias, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.2.norm1.weight, encoders.camera.backbone.stages.2.blocks.2.norm1.bias, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.2.norm2.weight, encoders.camera.backbone.stages.2.blocks.2.norm2.bias, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.3.norm1.weight, encoders.camera.backbone.stages.2.blocks.3.norm1.bias, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.3.norm2.weight, encoders.camera.backbone.stages.2.blocks.3.norm2.bias, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.4.norm1.weight, encoders.camera.backbone.stages.2.blocks.4.norm1.bias, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.4.norm2.weight, encoders.camera.backbone.stages.2.blocks.4.norm2.bias, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.5.norm1.weight, encoders.camera.backbone.stages.2.blocks.5.norm1.bias, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.5.norm2.weight, encoders.camera.backbone.stages.2.blocks.5.norm2.bias, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.1.bias, encoders.camera.backbone.stages.2.downsample.norm.weight, encoders.camera.backbone.stages.2.downsample.norm.bias, encoders.camera.backbone.stages.2.downsample.reduction.weight, encoders.camera.backbone.stages.3.blocks.0.norm1.weight, encoders.camera.backbone.stages.3.blocks.0.norm1.bias, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.3.blocks.0.norm2.weight, encoders.camera.backbone.stages.3.blocks.0.norm2.bias, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.3.blocks.1.norm1.weight, encoders.camera.backbone.stages.3.blocks.1.norm1.bias, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.3.blocks.1.norm2.weight, encoders.camera.backbone.stages.3.blocks.1.norm2.bias, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.norm1.weight, encoders.camera.backbone.norm1.bias, encoders.camera.backbone.norm2.weight, encoders.camera.backbone.norm2.bias, encoders.camera.backbone.norm3.weight, encoders.camera.backbone.norm3.bias, encoders.camera.neck.lateral_convs.0.conv.weight, encoders.camera.neck.lateral_convs.0.bn.weight, encoders.camera.neck.lateral_convs.0.bn.bias, encoders.camera.neck.lateral_convs.0.bn.running_mean, encoders.camera.neck.lateral_convs.0.bn.running_var, encoders.camera.neck.lateral_convs.1.conv.weight, encoders.camera.neck.lateral_convs.1.bn.weight, encoders.camera.neck.lateral_convs.1.bn.bias, encoders.camera.neck.lateral_convs.1.bn.running_mean, encoders.camera.neck.lateral_convs.1.bn.running_var, encoders.camera.neck.fpn_convs.0.conv.weight, encoders.camera.neck.fpn_convs.0.bn.weight, encoders.camera.neck.fpn_convs.0.bn.bias, encoders.camera.neck.fpn_convs.0.bn.running_mean, encoders.camera.neck.fpn_convs.0.bn.running_var, encoders.camera.neck.fpn_convs.1.conv.weight, encoders.camera.neck.fpn_convs.1.bn.weight, encoders.camera.neck.fpn_convs.1.bn.bias, encoders.camera.neck.fpn_convs.1.bn.running_mean, encoders.camera.neck.fpn_convs.1.bn.running_var, encoders.camera.vtransform.dx, encoders.camera.vtransform.bx, encoders.camera.vtransform.nx, encoders.camera.vtransform.frustum, encoders.camera.vtransform.dtransform.0.weight, encoders.camera.vtransform.dtransform.0.bias, encoders.camera.vtransform.dtransform.1.weight, encoders.camera.vtransform.dtransform.1.bias, encoders.camera.vtransform.dtransform.1.running_mean, encoders.camera.vtransform.dtransform.1.running_var, encoders.camera.vtransform.dtransform.3.weight, encoders.camera.vtransform.dtransform.3.bias, encoders.camera.vtransform.dtransform.4.weight, encoders.camera.vtransform.dtransform.4.bias, encoders.camera.vtransform.dtransform.4.running_mean, encoders.camera.vtransform.dtransform.4.running_var, encoders.camera.vtransform.dtransform.6.weight, encoders.camera.vtransform.dtransform.6.bias, encoders.camera.vtransform.dtransform.7.weight, encoders.camera.vtransform.dtransform.7.bias, encoders.camera.vtransform.dtransform.7.running_mean, encoders.camera.vtransform.dtransform.7.running_var, encoders.camera.vtransform.depthnet.0.weight, encoders.camera.vtransform.depthnet.0.bias, encoders.camera.vtransform.depthnet.1.weight, encoders.camera.vtransform.depthnet.1.bias, encoders.camera.vtransform.depthnet.1.running_mean, encoders.camera.vtransform.depthnet.1.running_var, encoders.camera.vtransform.depthnet.3.weight, encoders.camera.vtransform.depthnet.3.bias, encoders.camera.vtransform.depthnet.4.weight, encoders.camera.vtransform.depthnet.4.bias, encoders.camera.vtransform.depthnet.4.running_mean, encoders.camera.vtransform.depthnet.4.running_var, encoders.camera.vtransform.depthnet.6.weight, encoders.camera.vtransform.depthnet.6.bias, encoders.camera.vtransform.downsample.0.weight, encoders.camera.vtransform.downsample.1.weight, encoders.camera.vtransform.downsample.1.bias, encoders.camera.vtransform.downsample.1.running_mean, encoders.camera.vtransform.downsample.1.running_var, encoders.camera.vtransform.downsample.3.weight, encoders.camera.vtransform.downsample.4.weight, encoders.camera.vtransform.downsample.4.bias, encoders.camera.vtransform.downsample.4.running_mean, encoders.camera.vtransform.downsample.4.running_var, encoders.camera.vtransform.downsample.6.weight, encoders.camera.vtransform.downsample.7.weight, encoders.camera.vtransform.downsample.7.bias, encoders.camera.vtransform.downsample.7.running_mean, encoders.camera.vtransform.downsample.7.running_var, encoders.infra.backbone.patch_embed.projection.weight, encoders.infra.backbone.patch_embed.projection.bias, encoders.infra.backbone.patch_embed.norm.weight, encoders.infra.backbone.patch_embed.norm.bias, encoders.infra.backbone.stages.0.blocks.0.norm1.weight, encoders.infra.backbone.stages.0.blocks.0.norm1.bias, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.0.blocks.0.norm2.weight, encoders.infra.backbone.stages.0.blocks.0.norm2.bias, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.0.blocks.1.norm1.weight, encoders.infra.backbone.stages.0.blocks.1.norm1.bias, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.0.blocks.1.norm2.weight, encoders.infra.backbone.stages.0.blocks.1.norm2.bias, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.0.downsample.norm.weight, encoders.infra.backbone.stages.0.downsample.norm.bias, encoders.infra.backbone.stages.0.downsample.reduction.weight, encoders.infra.backbone.stages.1.blocks.0.norm1.weight, encoders.infra.backbone.stages.1.blocks.0.norm1.bias, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.1.blocks.0.norm2.weight, encoders.infra.backbone.stages.1.blocks.0.norm2.bias, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.1.blocks.1.norm1.weight, encoders.infra.backbone.stages.1.blocks.1.norm1.bias, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.1.blocks.1.norm2.weight, encoders.infra.backbone.stages.1.blocks.1.norm2.bias, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.1.downsample.norm.weight, encoders.infra.backbone.stages.1.downsample.norm.bias, encoders.infra.backbone.stages.1.downsample.reduction.weight, encoders.infra.backbone.stages.2.blocks.0.norm1.weight, encoders.infra.backbone.stages.2.blocks.0.norm1.bias, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.0.norm2.weight, encoders.infra.backbone.stages.2.blocks.0.norm2.bias, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.1.norm1.weight, encoders.infra.backbone.stages.2.blocks.1.norm1.bias, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.1.norm2.weight, encoders.infra.backbone.stages.2.blocks.1.norm2.bias, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.2.norm1.weight, encoders.infra.backbone.stages.2.blocks.2.norm1.bias, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.2.norm2.weight, encoders.infra.backbone.stages.2.blocks.2.norm2.bias, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.3.norm1.weight, encoders.infra.backbone.stages.2.blocks.3.norm1.bias, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.3.norm2.weight, encoders.infra.backbone.stages.2.blocks.3.norm2.bias, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.4.norm1.weight, encoders.infra.backbone.stages.2.blocks.4.norm1.bias, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.4.norm2.weight, encoders.infra.backbone.stages.2.blocks.4.norm2.bias, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.5.norm1.weight, encoders.infra.backbone.stages.2.blocks.5.norm1.bias, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.5.norm2.weight, encoders.infra.backbone.stages.2.blocks.5.norm2.bias, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.1.bias, encoders.infra.backbone.stages.2.downsample.norm.weight, encoders.infra.backbone.stages.2.downsample.norm.bias, encoders.infra.backbone.stages.2.downsample.reduction.weight, encoders.infra.backbone.stages.3.blocks.0.norm1.weight, encoders.infra.backbone.stages.3.blocks.0.norm1.bias, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.3.blocks.0.norm2.weight, encoders.infra.backbone.stages.3.blocks.0.norm2.bias, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.3.blocks.1.norm1.weight, encoders.infra.backbone.stages.3.blocks.1.norm1.bias, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.3.blocks.1.norm2.weight, encoders.infra.backbone.stages.3.blocks.1.norm2.bias, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.norm1.weight, encoders.infra.backbone.norm1.bias, encoders.infra.backbone.norm2.weight, encoders.infra.backbone.norm2.bias, encoders.infra.backbone.norm3.weight, encoders.infra.backbone.norm3.bias, encoders.infra.neck.lateral_convs.0.conv.weight, encoders.infra.neck.lateral_convs.0.bn.weight, encoders.infra.neck.lateral_convs.0.bn.bias, encoders.infra.neck.lateral_convs.0.bn.running_mean, encoders.infra.neck.lateral_convs.0.bn.running_var, encoders.infra.neck.lateral_convs.1.conv.weight, encoders.infra.neck.lateral_convs.1.bn.weight, encoders.infra.neck.lateral_convs.1.bn.bias, encoders.infra.neck.lateral_convs.1.bn.running_mean, encoders.infra.neck.lateral_convs.1.bn.running_var, encoders.infra.neck.fpn_convs.0.conv.weight, encoders.infra.neck.fpn_convs.0.bn.weight, encoders.infra.neck.fpn_convs.0.bn.bias, encoders.infra.neck.fpn_convs.0.bn.running_mean, encoders.infra.neck.fpn_convs.0.bn.running_var, encoders.infra.neck.fpn_convs.1.conv.weight, encoders.infra.neck.fpn_convs.1.bn.weight, encoders.infra.neck.fpn_convs.1.bn.bias, encoders.infra.neck.fpn_convs.1.bn.running_mean, encoders.infra.neck.fpn_convs.1.bn.running_var, encoders.infra.vtransform.dx, encoders.infra.vtransform.bx, encoders.infra.vtransform.nx, encoders.infra.vtransform.frustum, encoders.infra.vtransform.dtransform.0.weight, encoders.infra.vtransform.dtransform.0.bias, encoders.infra.vtransform.dtransform.1.weight, encoders.infra.vtransform.dtransform.1.bias, encoders.infra.vtransform.dtransform.1.running_mean, encoders.infra.vtransform.dtransform.1.running_var, encoders.infra.vtransform.dtransform.3.weight, encoders.infra.vtransform.dtransform.3.bias, encoders.infra.vtransform.dtransform.4.weight, encoders.infra.vtransform.dtransform.4.bias, encoders.infra.vtransform.dtransform.4.running_mean, encoders.infra.vtransform.dtransform.4.running_var, encoders.infra.vtransform.dtransform.6.weight, encoders.infra.vtransform.dtransform.6.bias, encoders.infra.vtransform.dtransform.7.weight, encoders.infra.vtransform.dtransform.7.bias, encoders.infra.vtransform.dtransform.7.running_mean, encoders.infra.vtransform.dtransform.7.running_var, encoders.infra.vtransform.depthnet.0.weight, encoders.infra.vtransform.depthnet.0.bias, encoders.infra.vtransform.depthnet.1.weight, encoders.infra.vtransform.depthnet.1.bias, encoders.infra.vtransform.depthnet.1.running_mean, encoders.infra.vtransform.depthnet.1.running_var, encoders.infra.vtransform.depthnet.3.weight, encoders.infra.vtransform.depthnet.3.bias, encoders.infra.vtransform.depthnet.4.weight, encoders.infra.vtransform.depthnet.4.bias, encoders.infra.vtransform.depthnet.4.running_mean, encoders.infra.vtransform.depthnet.4.running_var, encoders.infra.vtransform.depthnet.6.weight, encoders.infra.vtransform.depthnet.6.bias, encoders.infra.vtransform.downsample.0.weight, encoders.infra.vtransform.downsample.1.weight, encoders.infra.vtransform.downsample.1.bias, encoders.infra.vtransform.downsample.1.running_mean, encoders.infra.vtransform.downsample.1.running_var, encoders.infra.vtransform.downsample.3.weight, encoders.infra.vtransform.downsample.4.weight, encoders.infra.vtransform.downsample.4.bias, encoders.infra.vtransform.downsample.4.running_mean, encoders.infra.vtransform.downsample.4.running_var, encoders.infra.vtransform.downsample.6.weight, encoders.infra.vtransform.downsample.7.weight, encoders.infra.vtransform.downsample.7.bias, encoders.infra.vtransform.downsample.7.running_mean, encoders.infra.vtransform.downsample.7.running_var, fuser.0.weight, fuser.1.weight, fuser.1.bias, fuser.1.running_mean, fuser.1.running_var

2024-09-03 23:26:55,417 - mmdet3d - INFO - Start running, host: jmeng18@sg048, work_dir: /home/jmeng18/bev_fusion/bevfusion-beliv/train_result_infra_short_full
2024-09-03 23:26:55,417 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2024-09-03 23:26:55,418 - mmdet3d - INFO - workflow: [('train', 1)], max: 10 epochs
2024-09-03 23:26:55,420 - mmdet3d - INFO - Checkpoints will be saved to /home/jmeng18/bev_fusion/bevfusion-beliv/train_result_infra_short_full by HardDiskBackend.
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/models/heads/bbox/transfusion.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  top_proposals_class = top_proposals // heatmap.shape[-1]
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/models/heads/bbox/transfusion.py:535: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  grid_size[:2] // self.train_cfg["out_size_factor"]
2024-09-03 23:28:04,252 - mmdet3d - INFO - Epoch [1][50/8000]	lr: 7.973e-05, eta: 1 day, 6:29:54, time: 1.373, data_time: 0.273, memory: 6905, loss/object/loss_heatmap: 237.5278, loss/object/layer_-1_loss_cls: 1.4072, loss/object/layer_-1_loss_bbox: 10.9101, stats/object/matched_ious: 0.0119, loss: 249.8451, grad_norm: nan
2024-09-03 23:29:08,502 - mmdet3d - INFO - Epoch [1][100/8000]	lr: 9.307e-05, eta: 1 day, 5:29:58, time: 1.285, data_time: 0.189, memory: 6930, loss/object/loss_heatmap: 46.1066, loss/object/layer_-1_loss_cls: 0.7870, loss/object/layer_-1_loss_bbox: 5.4084, stats/object/matched_ious: 0.0235, loss: 52.3020, grad_norm: 499.4698
^C]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.camera.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-det.pth --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ ^C
]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.camera.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-det.pth --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ command | tee output.txt
]777;notify;Command completed;command | tee output.txt]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ command | tee output.txttorchpack dist-run -np 1 python tools/train.py connfigs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.cameraa.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-deet.pth --run-dir train_result_infra_short_full
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/core/bbox/box_np_ops.py:781: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.
  def points_in_convex_polygon_jit(points, polygon, clockwise=True):
2024-09-03 23:30:00,267 - mmdet3d - INFO - Config:
seed = 0
deterministic = False
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
load_from = 'pretrained/lidar-only-det.pth'
resume_from = None
cudnn_benchmark = False
fp16 = dict(loss_scale=dict(growth_interval=2000))
max_epochs = 10
runner = dict(type='CustomEpochBasedRunner', max_epochs=10)
dataset_type = 'NuScenesDataset'
dataset_root = '/scratch/jmeng18/V2X-SIM/'
gt_paste_stop_epoch = -1
reduce_beams = 32
load_dim = 5
use_dim = 5
load_augmented = None
point_cloud_range = [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
voxel_size = [0.075, 0.075, 0.2]
image_size = [256, 704]
augment2d = dict(
    resize=[[0.38, 0.55], [0.48, 0.48]],
    rotate=[-5.4, 5.4],
    gridmask=dict(prob=0.0, fixed_prob=True))
augment3d = dict(
    scale=[0.9, 1.1], rotate=[-0.78539816, 0.78539816], translate=0.5)
object_classes = ['car']
map_classes = [
    'drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area'
]
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=0,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ObjectPaste',
        stop_epoch=-1,
        db_sampler=dict(
            dataset_root='/scratch/jmeng18/V2X-SIM/',
            info_path='/scratch/jmeng18/V2X-SIM/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1], filter_by_min_points=dict(car=5)),
            classes=['car'],
            sample_groups=dict(car=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32))),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.38, 0.55],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[-5.4, 5.4],
        rand_flip=True,
        is_train=True),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[0.9, 1.1],
        rot_lim=[-0.78539816, 0.78539816],
        trans_lim=0.5,
        is_train=True),
    dict(type='RandomFlip3D'),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(type='ObjectNameFilter', classes=['car']),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='GridMask',
        use_h=True,
        use_w=True,
        max_epoch=10,
        rotate=1,
        offset=False,
        ratio=0.5,
        mode=1,
        prob=0.0,
        fixed_prob=True),
    dict(type='PointShuffle'),
    dict(type='DefaultFormatBundle3D', classes=['car']),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.48, 0.48],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[0.0, 0.0],
        rand_flip=False,
        is_train=False),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[1.0, 1.0],
        rot_lim=[0.0, 0.0],
        trans_lim=0.0,
        is_train=False),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(type='DefaultFormatBundle3D', classes=['car']),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='CBGSDataset',
        dataset=dict(
            type='NuScenesDataset',
            dataset_root='/scratch/jmeng18/V2X-SIM/',
            ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_train.pkl',
            pipeline=[
                dict(type='LoadMultiViewImageFromFiles', to_float32=True),
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    load_augmented=None),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=0,
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    load_augmented=None),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True,
                    with_attr_label=False),
                dict(
                    type='ObjectPaste',
                    stop_epoch=-1,
                    db_sampler=dict(
                        dataset_root='/scratch/jmeng18/V2X-SIM/',
                        info_path=
                        '/scratch/jmeng18/V2X-SIM/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(car=5)),
                        classes=['car'],
                        sample_groups=dict(car=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=5,
                            reduce_beams=32))),
                dict(
                    type='ImageAug3D',
                    final_dim=[256, 704],
                    resize_lim=[0.38, 0.55],
                    bot_pct_lim=[0.0, 0.0],
                    rot_lim=[-5.4, 5.4],
                    rand_flip=True,
                    is_train=True),
                dict(
                    type='GlobalRotScaleTrans',
                    resize_lim=[0.9, 1.1],
                    rot_lim=[-0.78539816, 0.78539816],
                    trans_lim=0.5,
                    is_train=True),
                dict(type='RandomFlip3D'),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(type='ObjectNameFilter', classes=['car']),
                dict(
                    type='ImageNormalize',
                    mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225]),
                dict(
                    type='GridMask',
                    use_h=True,
                    use_w=True,
                    max_epoch=10,
                    rotate=1,
                    offset=False,
                    ratio=0.5,
                    mode=1,
                    prob=0.0,
                    fixed_prob=True),
                dict(type='PointShuffle'),
                dict(type='DefaultFormatBundle3D', classes=['car']),
                dict(
                    type='Collect3D',
                    keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                    meta_keys=[
                        'camera_intrinsics', 'camera2ego', 'lidar2ego',
                        'lidar2camera', 'lidar2image', 'camera2lidar',
                        'img_aug_matrix', 'lidar_aug_matrix'
                    ]),
                dict(type='GTDepth', keyframe_only=True)
            ],
            object_classes=['car'],
            map_classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area'
            ],
            modality=dict(
                use_lidar=True,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False),
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        dataset_root='/scratch/jmeng18/V2X-SIM/',
        ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='DefaultFormatBundle3D', classes=['car']),
            dict(
                type='Collect3D',
                keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=['car'],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        dataset_root='/scratch/jmeng18/V2X-SIM/',
        ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='DefaultFormatBundle3D', classes=['car']),
            dict(
                type='Collect3D',
                keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=['car'],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            load_augmented=None),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            pad_empty_sweeps=True,
            remove_close=True,
            load_augmented=None),
        dict(
            type='LoadAnnotations3D',
            with_bbox_3d=True,
            with_label_3d=True,
            with_attr_label=False),
        dict(
            type='ImageAug3D',
            final_dim=[256, 704],
            resize_lim=[0.48, 0.48],
            bot_pct_lim=[0.0, 0.0],
            rot_lim=[0.0, 0.0],
            rand_flip=False,
            is_train=False),
        dict(
            type='GlobalRotScaleTrans',
            resize_lim=[1.0, 1.0],
            rot_lim=[0.0, 0.0],
            trans_lim=0.0,
            is_train=False),
        dict(
            type='PointsRangeFilter',
            point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
        dict(
            type='ImageNormalize',
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]),
        dict(type='DefaultFormatBundle3D', classes=['car']),
        dict(
            type='Collect3D',
            keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
            meta_keys=[
                'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
                'lidar2image', 'camera2lidar', 'img_aug_matrix',
                'lidar_aug_matrix'
            ]),
        dict(type='GTDepth', keyframe_only=True)
    ])
radar_sweeps = 6
radar_max_points = 2500
radar_use_dims = [
    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 55, 56
]
radar_compensate_velocity = True
radar_filtering = 'none'
radar_voxel_size = [0.8, 0.8, 8]
radar_jitter = 0
radar_normalize = False
model = dict(
    type='BEVFusion',
    encoders=dict(
        camera=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='SwinTransformer',
                embed_dims=96,
                depths=[2, 2, 6, 2],
                num_heads=[3, 6, 12, 24],
                window_size=7,
                mlp_ratio=4,
                qkv_bias=True,
                qk_scale=None,
                drop_rate=0.0,
                attn_drop_rate=0.0,
                drop_path_rate=0.2,
                patch_norm=True,
                out_indices=[1, 2, 3],
                with_cp=False,
                convert_weights=True,
                init_cfg=dict(
                    type='Pretrained',
                    checkpoint='pretrained/swint-nuimages-pretrained.pth'))),
        lidar=dict(
            voxelize=dict(
                max_num_points=10,
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                voxel_size=[0.075, 0.075, 0.2],
                max_voxels=[120000, 160000]),
            backbone=dict(
                type='SparseEncoder',
                in_channels=5,
                sparse_shape=[1440, 1440, 41],
                output_channels=128,
                order=['conv', 'norm', 'act'],
                encoder_channels=[[16, 16, 32], [32, 32, 64], [64, 64, 128],
                                  [128, 128]],
                encoder_paddings=[[0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]],
                                  [0, 0]],
                block_type='basicblock')),
        infra=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='SwinTransformer',
                embed_dims=96,
                depths=[2, 2, 6, 2],
                num_heads=[3, 6, 12, 24],
                window_size=7,
                mlp_ratio=4,
                qkv_bias=True,
                qk_scale=None,
                drop_rate=0.0,
                attn_drop_rate=0.0,
                drop_path_rate=0.2,
                patch_norm=True,
                out_indices=[1, 2, 3],
                with_cp=False,
                convert_weights=True,
                init_cfg=dict(
                    type='Pretrained',
                    checkpoint=
                    'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'
                )))),
    fuser=dict(type='ConvFuser', in_channels=[80, 256, 80], out_channels=256),
    heads=dict(
        map=None,
        object=dict(
            type='TransFusionHead',
            num_proposals=200,
            auxiliary=True,
            in_channels=512,
            hidden_channel=128,
            num_classes=1,
            num_decoder_layers=1,
            num_heads=8,
            nms_kernel_size=3,
            ffn_channel=256,
            dropout=0.1,
            bn_momentum=0.1,
            activation='relu',
            train_cfg=dict(
                dataset='nuScenes',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                grid_size=[1440, 1440, 41],
                voxel_size=[0.075, 0.075, 0.2],
                out_size_factor=8,
                gaussian_overlap=0.1,
                min_radius=2,
                pos_weight=-1,
                code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                assigner=dict(
                    type='HungarianAssigner3D',
                    iou_calculator=dict(
                        type='BboxOverlaps3D', coordinate='lidar'),
                    cls_cost=dict(
                        type='FocalLossCost',
                        gamma=2.0,
                        alpha=0.25,
                        weight=0.15),
                    reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                    iou_cost=dict(type='IoU3DCost', weight=0.25))),
            test_cfg=dict(
                dataset='nuScenes',
                grid_size=[1440, 1440, 41],
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                pc_range=[-54.0, -54.0],
                nms_type=None),
            common_heads=dict(
                center=[2, 2],
                height=[1, 2],
                dim=[3, 2],
                rot=[2, 2],
                vel=[2, 2]),
            bbox_coder=dict(
                type='TransFusionBBoxCoder',
                pc_range=[-54.0, -54.0],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                score_threshold=0.0,
                out_size_factor=8,
                voxel_size=[0.075, 0.075]),
            loss_cls=dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                reduction='mean',
                loss_weight=1.0),
            loss_heatmap=dict(
                type='GaussianFocalLoss', reduction='mean', loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', reduction='mean',
                           loss_weight=0.25))),
    decoder=dict(
        backbone=dict(
            type='SECOND',
            in_channels=256,
            out_channels=[128, 256],
            layer_nums=[5, 5],
            layer_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            conv_cfg=dict(type='Conv2d', bias=False)),
        neck=dict(
            type='SECONDFPN',
            in_channels=[128, 256],
            out_channels=[256, 256],
            upsample_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            upsample_cfg=dict(type='deconv', bias=False),
            use_conv_for_no_stride=True)))
optimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.33333333,
    min_lr_ratio=1e-07)
momentum_config = dict(policy='cyclic')
run_dir = 'train_result_infra_short_full'

2024-09-03 23:30:00,267 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2024-09-03 23:30:06,889 - mmdet3d - INFO - load 349483 car database infos
2024-09-03 23:30:06,889 - mmdet3d - INFO - load 157002 bicycle database infos
2024-09-03 23:30:06,889 - mmdet3d - INFO - load 40210 motorcycle database infos
2024-09-03 23:30:06,889 - mmdet3d - INFO - load 16943 vehicle.emergency.police database infos
2024-09-03 23:30:07,714 - mmdet3d - INFO - After filter database:
2024-09-03 23:30:07,726 - mmdet3d - INFO - load 170227 car database infos
2024-09-03 23:30:07,726 - mmdet3d - INFO - load 157002 bicycle database infos
2024-09-03 23:30:07,727 - mmdet3d - INFO - load 40210 motorcycle database infos
2024-09-03 23:30:07,728 - mmdet3d - INFO - load 16943 vehicle.emergency.police database infos
/home/jmeng18/.conda/envs/bevfusion/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1639180588308/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
2024-09-03 23:30:08,356 - mmdet - INFO - load checkpoint from local path: pretrained/swint-nuimages-pretrained.pth
2024-09-03 23:30:08,440 - mmdet - INFO - load checkpoint from local path: pretrained/swint-nuimages-pretrained.pth
2024-09-03 23:30:08,507 - mmdet3d - INFO - Model:
BEVFusion(
  (encoders): ModuleDict(
    (camera): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'pretrained/swint-nuimages-pretrained.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
    (lidar): ModuleDict(
      (voxelize): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
      (backbone): SparseEncoder(
        (conv_input): SparseSequential(
          (0): SubMConv3d()
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (encoder_layers): SparseSequential(
          (encoder_layer1): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer2): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer3): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer4): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
        (conv_out): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    (infra): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
  )
  (fuser): ConvFuser(
    (0): Conv2d(416, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (decoder): ModuleDict(
    (backbone): SECOND(
      (blocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    (neck): SECONDFPN(
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  )
  (heads): ModuleDict(
    (object): TransFusionHead(
      (loss_cls): FocalLoss()
      (loss_bbox): L1Loss()
      (loss_iou): VarifocalLoss()
      (loss_heatmap): GaussianFocalLoss()
      (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (heatmap_head): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (class_encoding): Conv1d(1, 128, kernel_size=(1,), stride=(1,))
      (decoder): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (linear1): Linear(in_features=128, out_features=256, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=256, out_features=128, bias=True)
          (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
          (self_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
          (cross_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (prediction_heads): ModuleList(
        (0): FFN(
          (center): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
        )
      )
    )
  )
)
2024-09-03 23:30:11,225 - mmdet3d - INFO - load checkpoint from local path: pretrained/lidar-only-det.pth
2024-09-03 23:30:11,279 - mmdet3d - WARNING - The model and loaded state dict do not match exactly

size mismatch for heads.object.heatmap_head.1.weight: copying a param with shape torch.Size([10, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([1, 128, 3, 3]).
size mismatch for heads.object.heatmap_head.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([1]).
size mismatch for heads.object.class_encoding.weight: copying a param with shape torch.Size([128, 10, 1]) from checkpoint, the shape in current model is torch.Size([128, 1, 1]).
size mismatch for heads.object.prediction_heads.0.heatmap.1.weight: copying a param with shape torch.Size([10, 64, 1]) from checkpoint, the shape in current model is torch.Size([1, 64, 1]).
size mismatch for heads.object.prediction_heads.0.heatmap.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([1]).
missing keys in source state_dict: encoders.camera.backbone.patch_embed.projection.weight, encoders.camera.backbone.patch_embed.projection.bias, encoders.camera.backbone.patch_embed.norm.weight, encoders.camera.backbone.patch_embed.norm.bias, encoders.camera.backbone.stages.0.blocks.0.norm1.weight, encoders.camera.backbone.stages.0.blocks.0.norm1.bias, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.0.blocks.0.norm2.weight, encoders.camera.backbone.stages.0.blocks.0.norm2.bias, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.0.blocks.1.norm1.weight, encoders.camera.backbone.stages.0.blocks.1.norm1.bias, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.0.blocks.1.norm2.weight, encoders.camera.backbone.stages.0.blocks.1.norm2.bias, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.0.downsample.norm.weight, encoders.camera.backbone.stages.0.downsample.norm.bias, encoders.camera.backbone.stages.0.downsample.reduction.weight, encoders.camera.backbone.stages.1.blocks.0.norm1.weight, encoders.camera.backbone.stages.1.blocks.0.norm1.bias, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.1.blocks.0.norm2.weight, encoders.camera.backbone.stages.1.blocks.0.norm2.bias, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.1.blocks.1.norm1.weight, encoders.camera.backbone.stages.1.blocks.1.norm1.bias, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.1.blocks.1.norm2.weight, encoders.camera.backbone.stages.1.blocks.1.norm2.bias, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.1.downsample.norm.weight, encoders.camera.backbone.stages.1.downsample.norm.bias, encoders.camera.backbone.stages.1.downsample.reduction.weight, encoders.camera.backbone.stages.2.blocks.0.norm1.weight, encoders.camera.backbone.stages.2.blocks.0.norm1.bias, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.0.norm2.weight, encoders.camera.backbone.stages.2.blocks.0.norm2.bias, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.1.norm1.weight, encoders.camera.backbone.stages.2.blocks.1.norm1.bias, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.1.norm2.weight, encoders.camera.backbone.stages.2.blocks.1.norm2.bias, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.2.norm1.weight, encoders.camera.backbone.stages.2.blocks.2.norm1.bias, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.2.norm2.weight, encoders.camera.backbone.stages.2.blocks.2.norm2.bias, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.3.norm1.weight, encoders.camera.backbone.stages.2.blocks.3.norm1.bias, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.3.norm2.weight, encoders.camera.backbone.stages.2.blocks.3.norm2.bias, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.4.norm1.weight, encoders.camera.backbone.stages.2.blocks.4.norm1.bias, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.4.norm2.weight, encoders.camera.backbone.stages.2.blocks.4.norm2.bias, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.5.norm1.weight, encoders.camera.backbone.stages.2.blocks.5.norm1.bias, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.5.norm2.weight, encoders.camera.backbone.stages.2.blocks.5.norm2.bias, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.1.bias, encoders.camera.backbone.stages.2.downsample.norm.weight, encoders.camera.backbone.stages.2.downsample.norm.bias, encoders.camera.backbone.stages.2.downsample.reduction.weight, encoders.camera.backbone.stages.3.blocks.0.norm1.weight, encoders.camera.backbone.stages.3.blocks.0.norm1.bias, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.3.blocks.0.norm2.weight, encoders.camera.backbone.stages.3.blocks.0.norm2.bias, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.3.blocks.1.norm1.weight, encoders.camera.backbone.stages.3.blocks.1.norm1.bias, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.3.blocks.1.norm2.weight, encoders.camera.backbone.stages.3.blocks.1.norm2.bias, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.norm1.weight, encoders.camera.backbone.norm1.bias, encoders.camera.backbone.norm2.weight, encoders.camera.backbone.norm2.bias, encoders.camera.backbone.norm3.weight, encoders.camera.backbone.norm3.bias, encoders.camera.neck.lateral_convs.0.conv.weight, encoders.camera.neck.lateral_convs.0.bn.weight, encoders.camera.neck.lateral_convs.0.bn.bias, encoders.camera.neck.lateral_convs.0.bn.running_mean, encoders.camera.neck.lateral_convs.0.bn.running_var, encoders.camera.neck.lateral_convs.1.conv.weight, encoders.camera.neck.lateral_convs.1.bn.weight, encoders.camera.neck.lateral_convs.1.bn.bias, encoders.camera.neck.lateral_convs.1.bn.running_mean, encoders.camera.neck.lateral_convs.1.bn.running_var, encoders.camera.neck.fpn_convs.0.conv.weight, encoders.camera.neck.fpn_convs.0.bn.weight, encoders.camera.neck.fpn_convs.0.bn.bias, encoders.camera.neck.fpn_convs.0.bn.running_mean, encoders.camera.neck.fpn_convs.0.bn.running_var, encoders.camera.neck.fpn_convs.1.conv.weight, encoders.camera.neck.fpn_convs.1.bn.weight, encoders.camera.neck.fpn_convs.1.bn.bias, encoders.camera.neck.fpn_convs.1.bn.running_mean, encoders.camera.neck.fpn_convs.1.bn.running_var, encoders.camera.vtransform.dx, encoders.camera.vtransform.bx, encoders.camera.vtransform.nx, encoders.camera.vtransform.frustum, encoders.camera.vtransform.dtransform.0.weight, encoders.camera.vtransform.dtransform.0.bias, encoders.camera.vtransform.dtransform.1.weight, encoders.camera.vtransform.dtransform.1.bias, encoders.camera.vtransform.dtransform.1.running_mean, encoders.camera.vtransform.dtransform.1.running_var, encoders.camera.vtransform.dtransform.3.weight, encoders.camera.vtransform.dtransform.3.bias, encoders.camera.vtransform.dtransform.4.weight, encoders.camera.vtransform.dtransform.4.bias, encoders.camera.vtransform.dtransform.4.running_mean, encoders.camera.vtransform.dtransform.4.running_var, encoders.camera.vtransform.dtransform.6.weight, encoders.camera.vtransform.dtransform.6.bias, encoders.camera.vtransform.dtransform.7.weight, encoders.camera.vtransform.dtransform.7.bias, encoders.camera.vtransform.dtransform.7.running_mean, encoders.camera.vtransform.dtransform.7.running_var, encoders.camera.vtransform.depthnet.0.weight, encoders.camera.vtransform.depthnet.0.bias, encoders.camera.vtransform.depthnet.1.weight, encoders.camera.vtransform.depthnet.1.bias, encoders.camera.vtransform.depthnet.1.running_mean, encoders.camera.vtransform.depthnet.1.running_var, encoders.camera.vtransform.depthnet.3.weight, encoders.camera.vtransform.depthnet.3.bias, encoders.camera.vtransform.depthnet.4.weight, encoders.camera.vtransform.depthnet.4.bias, encoders.camera.vtransform.depthnet.4.running_mean, encoders.camera.vtransform.depthnet.4.running_var, encoders.camera.vtransform.depthnet.6.weight, encoders.camera.vtransform.depthnet.6.bias, encoders.camera.vtransform.downsample.0.weight, encoders.camera.vtransform.downsample.1.weight, encoders.camera.vtransform.downsample.1.bias, encoders.camera.vtransform.downsample.1.running_mean, encoders.camera.vtransform.downsample.1.running_var, encoders.camera.vtransform.downsample.3.weight, encoders.camera.vtransform.downsample.4.weight, encoders.camera.vtransform.downsample.4.bias, encoders.camera.vtransform.downsample.4.running_mean, encoders.camera.vtransform.downsample.4.running_var, encoders.camera.vtransform.downsample.6.weight, encoders.camera.vtransform.downsample.7.weight, encoders.camera.vtransform.downsample.7.bias, encoders.camera.vtransform.downsample.7.running_mean, encoders.camera.vtransform.downsample.7.running_var, encoders.infra.backbone.patch_embed.projection.weight, encoders.infra.backbone.patch_embed.projection.bias, encoders.infra.backbone.patch_embed.norm.weight, encoders.infra.backbone.patch_embed.norm.bias, encoders.infra.backbone.stages.0.blocks.0.norm1.weight, encoders.infra.backbone.stages.0.blocks.0.norm1.bias, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.0.blocks.0.norm2.weight, encoders.infra.backbone.stages.0.blocks.0.norm2.bias, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.0.blocks.1.norm1.weight, encoders.infra.backbone.stages.0.blocks.1.norm1.bias, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.0.blocks.1.norm2.weight, encoders.infra.backbone.stages.0.blocks.1.norm2.bias, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.0.downsample.norm.weight, encoders.infra.backbone.stages.0.downsample.norm.bias, encoders.infra.backbone.stages.0.downsample.reduction.weight, encoders.infra.backbone.stages.1.blocks.0.norm1.weight, encoders.infra.backbone.stages.1.blocks.0.norm1.bias, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.1.blocks.0.norm2.weight, encoders.infra.backbone.stages.1.blocks.0.norm2.bias, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.1.blocks.1.norm1.weight, encoders.infra.backbone.stages.1.blocks.1.norm1.bias, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.1.blocks.1.norm2.weight, encoders.infra.backbone.stages.1.blocks.1.norm2.bias, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.1.downsample.norm.weight, encoders.infra.backbone.stages.1.downsample.norm.bias, encoders.infra.backbone.stages.1.downsample.reduction.weight, encoders.infra.backbone.stages.2.blocks.0.norm1.weight, encoders.infra.backbone.stages.2.blocks.0.norm1.bias, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.0.norm2.weight, encoders.infra.backbone.stages.2.blocks.0.norm2.bias, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.1.norm1.weight, encoders.infra.backbone.stages.2.blocks.1.norm1.bias, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.1.norm2.weight, encoders.infra.backbone.stages.2.blocks.1.norm2.bias, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.2.norm1.weight, encoders.infra.backbone.stages.2.blocks.2.norm1.bias, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.2.norm2.weight, encoders.infra.backbone.stages.2.blocks.2.norm2.bias, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.3.norm1.weight, encoders.infra.backbone.stages.2.blocks.3.norm1.bias, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.3.norm2.weight, encoders.infra.backbone.stages.2.blocks.3.norm2.bias, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.4.norm1.weight, encoders.infra.backbone.stages.2.blocks.4.norm1.bias, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.4.norm2.weight, encoders.infra.backbone.stages.2.blocks.4.norm2.bias, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.5.norm1.weight, encoders.infra.backbone.stages.2.blocks.5.norm1.bias, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.5.norm2.weight, encoders.infra.backbone.stages.2.blocks.5.norm2.bias, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.1.bias, encoders.infra.backbone.stages.2.downsample.norm.weight, encoders.infra.backbone.stages.2.downsample.norm.bias, encoders.infra.backbone.stages.2.downsample.reduction.weight, encoders.infra.backbone.stages.3.blocks.0.norm1.weight, encoders.infra.backbone.stages.3.blocks.0.norm1.bias, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.3.blocks.0.norm2.weight, encoders.infra.backbone.stages.3.blocks.0.norm2.bias, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.3.blocks.1.norm1.weight, encoders.infra.backbone.stages.3.blocks.1.norm1.bias, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.3.blocks.1.norm2.weight, encoders.infra.backbone.stages.3.blocks.1.norm2.bias, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.norm1.weight, encoders.infra.backbone.norm1.bias, encoders.infra.backbone.norm2.weight, encoders.infra.backbone.norm2.bias, encoders.infra.backbone.norm3.weight, encoders.infra.backbone.norm3.bias, encoders.infra.neck.lateral_convs.0.conv.weight, encoders.infra.neck.lateral_convs.0.bn.weight, encoders.infra.neck.lateral_convs.0.bn.bias, encoders.infra.neck.lateral_convs.0.bn.running_mean, encoders.infra.neck.lateral_convs.0.bn.running_var, encoders.infra.neck.lateral_convs.1.conv.weight, encoders.infra.neck.lateral_convs.1.bn.weight, encoders.infra.neck.lateral_convs.1.bn.bias, encoders.infra.neck.lateral_convs.1.bn.running_mean, encoders.infra.neck.lateral_convs.1.bn.running_var, encoders.infra.neck.fpn_convs.0.conv.weight, encoders.infra.neck.fpn_convs.0.bn.weight, encoders.infra.neck.fpn_convs.0.bn.bias, encoders.infra.neck.fpn_convs.0.bn.running_mean, encoders.infra.neck.fpn_convs.0.bn.running_var, encoders.infra.neck.fpn_convs.1.conv.weight, encoders.infra.neck.fpn_convs.1.bn.weight, encoders.infra.neck.fpn_convs.1.bn.bias, encoders.infra.neck.fpn_convs.1.bn.running_mean, encoders.infra.neck.fpn_convs.1.bn.running_var, encoders.infra.vtransform.dx, encoders.infra.vtransform.bx, encoders.infra.vtransform.nx, encoders.infra.vtransform.frustum, encoders.infra.vtransform.dtransform.0.weight, encoders.infra.vtransform.dtransform.0.bias, encoders.infra.vtransform.dtransform.1.weight, encoders.infra.vtransform.dtransform.1.bias, encoders.infra.vtransform.dtransform.1.running_mean, encoders.infra.vtransform.dtransform.1.running_var, encoders.infra.vtransform.dtransform.3.weight, encoders.infra.vtransform.dtransform.3.bias, encoders.infra.vtransform.dtransform.4.weight, encoders.infra.vtransform.dtransform.4.bias, encoders.infra.vtransform.dtransform.4.running_mean, encoders.infra.vtransform.dtransform.4.running_var, encoders.infra.vtransform.dtransform.6.weight, encoders.infra.vtransform.dtransform.6.bias, encoders.infra.vtransform.dtransform.7.weight, encoders.infra.vtransform.dtransform.7.bias, encoders.infra.vtransform.dtransform.7.running_mean, encoders.infra.vtransform.dtransform.7.running_var, encoders.infra.vtransform.depthnet.0.weight, encoders.infra.vtransform.depthnet.0.bias, encoders.infra.vtransform.depthnet.1.weight, encoders.infra.vtransform.depthnet.1.bias, encoders.infra.vtransform.depthnet.1.running_mean, encoders.infra.vtransform.depthnet.1.running_var, encoders.infra.vtransform.depthnet.3.weight, encoders.infra.vtransform.depthnet.3.bias, encoders.infra.vtransform.depthnet.4.weight, encoders.infra.vtransform.depthnet.4.bias, encoders.infra.vtransform.depthnet.4.running_mean, encoders.infra.vtransform.depthnet.4.running_var, encoders.infra.vtransform.depthnet.6.weight, encoders.infra.vtransform.depthnet.6.bias, encoders.infra.vtransform.downsample.0.weight, encoders.infra.vtransform.downsample.1.weight, encoders.infra.vtransform.downsample.1.bias, encoders.infra.vtransform.downsample.1.running_mean, encoders.infra.vtransform.downsample.1.running_var, encoders.infra.vtransform.downsample.3.weight, encoders.infra.vtransform.downsample.4.weight, encoders.infra.vtransform.downsample.4.bias, encoders.infra.vtransform.downsample.4.running_mean, encoders.infra.vtransform.downsample.4.running_var, encoders.infra.vtransform.downsample.6.weight, encoders.infra.vtransform.downsample.7.weight, encoders.infra.vtransform.downsample.7.bias, encoders.infra.vtransform.downsample.7.running_mean, encoders.infra.vtransform.downsample.7.running_var, fuser.0.weight, fuser.1.weight, fuser.1.bias, fuser.1.running_mean, fuser.1.running_var

2024-09-03 23:30:11,279 - mmdet3d - INFO - Start running, host: jmeng18@sg048, work_dir: /home/jmeng18/bev_fusion/bevfusion-beliv/train_result_infra_short_full
2024-09-03 23:30:11,279 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2024-09-03 23:30:11,280 - mmdet3d - INFO - workflow: [('train', 1)], max: 10 epochs
2024-09-03 23:30:11,282 - mmdet3d - INFO - Checkpoints will be saved to /home/jmeng18/bev_fusion/bevfusion-beliv/train_result_infra_short_full by HardDiskBackend.
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/models/heads/bbox/transfusion.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  top_proposals_class = top_proposals // heatmap.shape[-1]
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/models/heads/bbox/transfusion.py:535: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  grid_size[:2] // self.train_cfg["out_size_factor"]
2024-09-03 23:31:05,639 - mmdet3d - INFO - Epoch [1][50/8000]	lr: 7.973e-05, eta: 1 day, 0:06:05, time: 1.085, data_time: 0.072, memory: 6907, loss/object/loss_heatmap: 237.4412, loss/object/layer_-1_loss_cls: 1.4099, loss/object/layer_-1_loss_bbox: 10.4439, stats/object/matched_ious: 0.0102, loss: 249.2949, grad_norm: nan
2024-09-03 23:31:55,756 - mmdet3d - INFO - Epoch [1][100/8000]	lr: 9.307e-05, eta: 23:09:59, time: 1.002, data_time: 0.012, memory: 6934, loss/object/loss_heatmap: 46.0494, loss/object/layer_-1_loss_cls: 0.7905, loss/object/layer_-1_loss_bbox: 6.1637, stats/object/matched_ious: 0.0178, loss: 53.0036, grad_norm: 500.5475
2024-09-03 23:32:53,399 - mmdet3d - INFO - Epoch [1][150/8000]	lr: 1.064e-04, eta: 23:57:29, time: 1.153, data_time: 0.147, memory: 6934, loss/object/loss_heatmap: 6.4377, loss/object/layer_-1_loss_cls: 0.5942, loss/object/layer_-1_loss_bbox: 4.0793, stats/object/matched_ious: 0.0672, loss: 11.1112, grad_norm: 102.0516
2024-09-03 23:34:01,218 - mmdet3d - INFO - Epoch [1][200/8000]	lr: 1.197e-04, eta: 1 day, 1:28:26, time: 1.356, data_time: 0.314, memory: 6948, loss/object/loss_heatmap: 2.4659, loss/object/layer_-1_loss_cls: 0.4161, loss/object/layer_-1_loss_bbox: 1.9630, stats/object/matched_ious: 0.1624, loss: 4.8450, grad_norm: 36.6869
2024-09-03 23:35:10,296 - mmdet3d - INFO - Epoch [1][250/8000]	lr: 1.331e-04, eta: 1 day, 2:29:14, time: 1.382, data_time: 0.293, memory: 6948, loss/object/loss_heatmap: 1.6656, loss/object/layer_-1_loss_cls: 0.2488, loss/object/layer_-1_loss_bbox: 1.4371, stats/object/matched_ious: 0.2280, loss: 3.3515, grad_norm: 15.9097
2024-09-03 23:36:17,493 - mmdet3d - INFO - Epoch [1][300/8000]	lr: 1.464e-04, eta: 1 day, 3:01:04, time: 1.344, data_time: 0.309, memory: 6948, loss/object/loss_heatmap: 1.5994, loss/object/layer_-1_loss_cls: 0.2153, loss/object/layer_-1_loss_bbox: 1.5908, stats/object/matched_ious: 0.2050, loss: 3.4055, grad_norm: 18.0084
2024-09-03 23:37:22,661 - mmdet3d - INFO - Epoch [1][350/8000]	lr: 1.597e-04, eta: 1 day, 3:15:47, time: 1.303, data_time: 0.239, memory: 6948, loss/object/loss_heatmap: 1.2812, loss/object/layer_-1_loss_cls: 0.1812, loss/object/layer_-1_loss_bbox: 1.2120, stats/object/matched_ious: 0.2530, loss: 2.6744, grad_norm: 12.5877
2024-09-03 23:38:27,807 - mmdet3d - INFO - Epoch [1][400/8000]	lr: 1.731e-04, eta: 1 day, 3:26:28, time: 1.303, data_time: 0.235, memory: 6949, loss/object/loss_heatmap: 1.2428, loss/object/layer_-1_loss_cls: 0.1591, loss/object/layer_-1_loss_bbox: 1.2196, stats/object/matched_ious: 0.2834, loss: 2.6215, grad_norm: 13.3752
2024-09-03 23:39:31,433 - mmdet3d - INFO - Epoch [1][450/8000]	lr: 1.864e-04, eta: 1 day, 3:30:04, time: 1.273, data_time: 0.225, memory: 6949, loss/object/loss_heatmap: 1.2744, loss/object/layer_-1_loss_cls: 0.1497, loss/object/layer_-1_loss_bbox: 1.3586, stats/object/matched_ious: 0.2667, loss: 2.7827, grad_norm: 11.0325
2024-09-03 23:40:38,357 - mmdet3d - INFO - Epoch [1][500/8000]	lr: 1.997e-04, eta: 1 day, 3:41:29, time: 1.338, data_time: 0.262, memory: 6949, loss/object/loss_heatmap: 1.0684, loss/object/layer_-1_loss_cls: 0.1168, loss/object/layer_-1_loss_bbox: 1.1909, stats/object/matched_ious: 0.3181, loss: 2.3761, grad_norm: 9.3596
2024-09-03 23:41:46,749 - mmdet3d - INFO - Epoch [1][550/8000]	lr: 2.000e-04, eta: 1 day, 3:54:09, time: 1.368, data_time: 0.290, memory: 6949, loss/object/loss_heatmap: 1.2108, loss/object/layer_-1_loss_cls: 0.1490, loss/object/layer_-1_loss_bbox: 1.2658, stats/object/matched_ious: 0.3138, loss: 2.6256, grad_norm: 9.5666
2024-09-03 23:42:46,993 - mmdet3d - INFO - Epoch [1][600/8000]	lr: 2.000e-04, eta: 1 day, 3:46:32, time: 1.205, data_time: 0.145, memory: 6949, loss/object/loss_heatmap: 1.1054, loss/object/layer_-1_loss_cls: 0.1350, loss/object/layer_-1_loss_bbox: 1.1923, stats/object/matched_ious: 0.3247, loss: 2.4327, grad_norm: 8.1044
2024-09-03 23:43:51,305 - mmdet3d - INFO - Epoch [1][650/8000]	lr: 2.000e-04, eta: 1 day, 3:48:13, time: 1.286, data_time: 0.256, memory: 6949, loss/object/loss_heatmap: 1.0970, loss/object/layer_-1_loss_cls: 0.1188, loss/object/layer_-1_loss_bbox: 1.3382, stats/object/matched_ious: 0.3345, loss: 2.5541, grad_norm: 8.2951
2024-09-03 23:44:57,287 - mmdet3d - INFO - Epoch [1][700/8000]	lr: 2.000e-04, eta: 1 day, 3:52:40, time: 1.320, data_time: 0.251, memory: 6952, loss/object/loss_heatmap: 1.0208, loss/object/layer_-1_loss_cls: 0.1397, loss/object/layer_-1_loss_bbox: 1.0693, stats/object/matched_ious: 0.3593, loss: 2.2299, grad_norm: 10.0458
2024-09-03 23:45:57,505 - mmdet3d - INFO - Epoch [1][750/8000]	lr: 2.000e-04, eta: 1 day, 3:46:13, time: 1.204, data_time: 0.152, memory: 6956, loss/object/loss_heatmap: 1.0462, loss/object/layer_-1_loss_cls: 0.1204, loss/object/layer_-1_loss_bbox: 1.2116, stats/object/matched_ious: 0.3592, loss: 2.3782, grad_norm: 9.7776
2024-09-03 23:47:02,662 - mmdet3d - INFO - Epoch [1][800/8000]	lr: 2.000e-04, eta: 1 day, 3:48:36, time: 1.303, data_time: 0.219, memory: 6956, loss/object/loss_heatmap: 0.9903, loss/object/layer_-1_loss_cls: 0.1221, loss/object/layer_-1_loss_bbox: 1.0361, stats/object/matched_ious: 0.3862, loss: 2.1485, grad_norm: 8.4375
2024-09-03 23:48:12,927 - mmdet3d - INFO - Epoch [1][850/8000]	lr: 2.000e-04, eta: 1 day, 3:58:30, time: 1.405, data_time: 0.365, memory: 6956, loss/object/loss_heatmap: 1.0088, loss/object/layer_-1_loss_cls: 0.1147, loss/object/layer_-1_loss_bbox: 1.0779, stats/object/matched_ious: 0.4082, loss: 2.2014, grad_norm: 8.3897
2024-09-03 23:49:15,441 - mmdet3d - INFO - Epoch [1][900/8000]	lr: 2.000e-04, eta: 1 day, 3:55:49, time: 1.250, data_time: 0.192, memory: 6956, loss/object/loss_heatmap: 0.9772, loss/object/layer_-1_loss_cls: 0.0997, loss/object/layer_-1_loss_bbox: 1.3016, stats/object/matched_ious: 0.3723, loss: 2.3785, grad_norm: 8.9914
2024-09-03 23:50:17,036 - mmdet3d - INFO - Epoch [1][950/8000]	lr: 2.000e-04, eta: 1 day, 3:52:02, time: 1.232, data_time: 0.177, memory: 6970, loss/object/loss_heatmap: 0.9915, loss/object/layer_-1_loss_cls: 0.1187, loss/object/layer_-1_loss_bbox: 1.1324, stats/object/matched_ious: 0.4184, loss: 2.2427, grad_norm: 9.6051
2024-09-03 23:51:23,950 - mmdet3d - INFO - Epoch [1][1000/8000]	lr: 2.000e-04, eta: 1 day, 3:55:32, time: 1.338, data_time: 0.259, memory: 6970, loss/object/loss_heatmap: 0.9083, loss/object/layer_-1_loss_cls: 0.1052, loss/object/layer_-1_loss_bbox: 1.1178, stats/object/matched_ious: 0.4251, loss: 2.1313, grad_norm: 7.0694
2024-09-03 23:52:25,015 - mmdet3d - INFO - Epoch [1][1050/8000]	lr: 2.000e-04, eta: 1 day, 3:51:16, time: 1.221, data_time: 0.171, memory: 6970, loss/object/loss_heatmap: 0.8803, loss/object/layer_-1_loss_cls: 0.0919, loss/object/layer_-1_loss_bbox: 1.1065, stats/object/matched_ious: 0.4368, loss: 2.0788, grad_norm: 6.4035
2024-09-03 23:53:31,686 - mmdet3d - INFO - Epoch [1][1100/8000]	lr: 2.000e-04, eta: 1 day, 3:53:59, time: 1.333, data_time: 0.273, memory: 6970, loss/object/loss_heatmap: 0.9249, loss/object/layer_-1_loss_cls: 0.1233, loss/object/layer_-1_loss_bbox: 1.0173, stats/object/matched_ious: 0.4282, loss: 2.0656, grad_norm: 8.3055
2024-09-03 23:54:35,935 - mmdet3d - INFO - Epoch [1][1150/8000]	lr: 2.000e-04, eta: 1 day, 3:53:37, time: 1.285, data_time: 0.183, memory: 6970, loss/object/loss_heatmap: 0.9001, loss/object/layer_-1_loss_cls: 0.1048, loss/object/layer_-1_loss_bbox: 1.0639, stats/object/matched_ious: 0.4423, loss: 2.0689, grad_norm: 7.3266
2024-09-03 23:55:37,040 - mmdet3d - INFO - Epoch [1][1200/8000]	lr: 2.000e-04, eta: 1 day, 3:49:44, time: 1.222, data_time: 0.178, memory: 6970, loss/object/loss_heatmap: 0.9149, loss/object/layer_-1_loss_cls: 0.1047, loss/object/layer_-1_loss_bbox: 1.0950, stats/object/matched_ious: 0.4485, loss: 2.1146, grad_norm: 8.1571
2024-09-03 23:56:35,521 - mmdet3d - INFO - Epoch [1][1250/8000]	lr: 2.000e-04, eta: 1 day, 3:43:20, time: 1.170, data_time: 0.114, memory: 6970, loss/object/loss_heatmap: 0.8082, loss/object/layer_-1_loss_cls: 0.0942, loss/object/layer_-1_loss_bbox: 0.9304, stats/object/matched_ious: 0.4792, loss: 1.8328, grad_norm: 6.8871
2024-09-03 23:57:37,720 - mmdet3d - INFO - Epoch [1][1300/8000]	lr: 2.000e-04, eta: 1 day, 3:41:06, time: 1.244, data_time: 0.127, memory: 6970, loss/object/loss_heatmap: 0.7703, loss/object/layer_-1_loss_cls: 0.0865, loss/object/layer_-1_loss_bbox: 0.9995, stats/object/matched_ious: 0.5022, loss: 1.8563, grad_norm: 6.4891
2024-09-03 23:58:39,372 - mmdet3d - INFO - Epoch [1][1350/8000]	lr: 2.000e-04, eta: 1 day, 3:38:25, time: 1.233, data_time: 0.169, memory: 6970, loss/object/loss_heatmap: 0.7866, loss/object/layer_-1_loss_cls: 0.0939, loss/object/layer_-1_loss_bbox: 0.9780, stats/object/matched_ious: 0.5174, loss: 1.8585, grad_norm: 6.1828
2024-09-03 23:59:42,942 - mmdet3d - INFO - Epoch [1][1400/8000]	lr: 2.000e-04, eta: 1 day, 3:37:40, time: 1.271, data_time: 0.181, memory: 6970, loss/object/loss_heatmap: 0.7584, loss/object/layer_-1_loss_cls: 0.0886, loss/object/layer_-1_loss_bbox: 1.0052, stats/object/matched_ious: 0.4923, loss: 1.8522, grad_norm: 5.9397
2024-09-04 00:00:45,336 - mmdet3d - INFO - Epoch [1][1450/8000]	lr: 2.000e-04, eta: 1 day, 3:35:49, time: 1.248, data_time: 0.154, memory: 6970, loss/object/loss_heatmap: 0.7819, loss/object/layer_-1_loss_cls: 0.0923, loss/object/layer_-1_loss_bbox: 0.8990, stats/object/matched_ious: 0.5222, loss: 1.7731, grad_norm: 7.1178
2024-09-04 00:01:47,910 - mmdet3d - INFO - Epoch [1][1500/8000]	lr: 2.000e-04, eta: 1 day, 3:34:11, time: 1.251, data_time: 0.193, memory: 6970, loss/object/loss_heatmap: 0.8312, loss/object/layer_-1_loss_cls: 0.1017, loss/object/layer_-1_loss_bbox: 1.0028, stats/object/matched_ious: 0.4979, loss: 1.9357, grad_norm: 6.8874
2024-09-04 00:02:47,350 - mmdet3d - INFO - Epoch [1][1550/8000]	lr: 2.000e-04, eta: 1 day, 3:29:56, time: 1.189, data_time: 0.133, memory: 6970, loss/object/loss_heatmap: 0.7540, loss/object/layer_-1_loss_cls: 0.0975, loss/object/layer_-1_loss_bbox: 0.8131, stats/object/matched_ious: 0.5266, loss: 1.6646, grad_norm: 5.9828
2024-09-04 00:03:49,833 - mmdet3d - INFO - Epoch [1][1600/8000]	lr: 2.000e-04, eta: 1 day, 3:28:23, time: 1.250, data_time: 0.190, memory: 6970, loss/object/loss_heatmap: 0.7642, loss/object/layer_-1_loss_cls: 0.0844, loss/object/layer_-1_loss_bbox: 1.1154, stats/object/matched_ious: 0.4984, loss: 1.9640, grad_norm: 5.7180
2024-09-04 00:04:51,273 - mmdet3d - INFO - Epoch [1][1650/8000]	lr: 2.000e-04, eta: 1 day, 3:26:02, time: 1.229, data_time: 0.136, memory: 6970, loss/object/loss_heatmap: 0.8304, loss/object/layer_-1_loss_cls: 0.0941, loss/object/layer_-1_loss_bbox: 1.0178, stats/object/matched_ious: 0.5090, loss: 1.9423, grad_norm: 5.6240
2024-09-04 00:05:53,190 - mmdet3d - INFO - Epoch [1][1700/8000]	lr: 2.000e-04, eta: 1 day, 3:24:08, time: 1.238, data_time: 0.160, memory: 6970, loss/object/loss_heatmap: 0.7597, loss/object/layer_-1_loss_cls: 0.0907, loss/object/layer_-1_loss_bbox: 0.8958, stats/object/matched_ious: 0.5324, loss: 1.7462, grad_norm: 6.1643
2024-09-04 00:06:55,210 - mmdet3d - INFO - Epoch [1][1750/8000]	lr: 2.000e-04, eta: 1 day, 3:22:22, time: 1.240, data_time: 0.170, memory: 6970, loss/object/loss_heatmap: 0.7442, loss/object/layer_-1_loss_cls: 0.0845, loss/object/layer_-1_loss_bbox: 1.0103, stats/object/matched_ious: 0.5296, loss: 1.8390, grad_norm: 5.7834
2024-09-04 00:07:54,163 - mmdet3d - INFO - Epoch [1][1800/8000]	lr: 2.000e-04, eta: 1 day, 3:18:24, time: 1.179, data_time: 0.093, memory: 6970, loss/object/loss_heatmap: 0.7182, loss/object/layer_-1_loss_cls: 0.0860, loss/object/layer_-1_loss_bbox: 0.8176, stats/object/matched_ious: 0.5327, loss: 1.6219, grad_norm: 5.3677
2024-09-04 00:08:51,347 - mmdet3d - INFO - Epoch [1][1850/8000]	lr: 2.000e-04, eta: 1 day, 3:13:22, time: 1.144, data_time: 0.101, memory: 6970, loss/object/loss_heatmap: 0.7189, loss/object/layer_-1_loss_cls: 0.0809, loss/object/layer_-1_loss_bbox: 0.8888, stats/object/matched_ious: 0.5450, loss: 1.6885, grad_norm: 5.8096
2024-09-04 00:09:48,756 - mmdet3d - INFO - Epoch [1][1900/8000]	lr: 2.000e-04, eta: 1 day, 3:08:42, time: 1.148, data_time: 0.077, memory: 6970, loss/object/loss_heatmap: 0.6646, loss/object/layer_-1_loss_cls: 0.0852, loss/object/layer_-1_loss_bbox: 0.7541, stats/object/matched_ious: 0.5713, loss: 1.5039, grad_norm: 5.0919
2024-09-04 00:10:49,336 - mmdet3d - INFO - Epoch [1][1950/8000]	lr: 2.000e-04, eta: 1 day, 3:06:20, time: 1.212, data_time: 0.157, memory: 6970, loss/object/loss_heatmap: 0.7397, loss/object/layer_-1_loss_cls: 0.0834, loss/object/layer_-1_loss_bbox: 1.0343, stats/object/matched_ious: 0.5132, loss: 1.8575, grad_norm: 5.6826
2024-09-04 00:11:51,741 - mmdet3d - INFO - Epoch [1][2000/8000]	lr: 2.000e-04, eta: 1 day, 3:05:13, time: 1.248, data_time: 0.208, memory: 6970, loss/object/loss_heatmap: 0.7941, loss/object/layer_-1_loss_cls: 0.0998, loss/object/layer_-1_loss_bbox: 0.9550, stats/object/matched_ious: 0.5140, loss: 1.8489, grad_norm: 5.9660
2024-09-04 00:12:52,452 - mmdet3d - INFO - Epoch [1][2050/8000]	lr: 2.000e-04, eta: 1 day, 3:03:02, time: 1.214, data_time: 0.162, memory: 6970, loss/object/loss_heatmap: 0.7031, loss/object/layer_-1_loss_cls: 0.0829, loss/object/layer_-1_loss_bbox: 0.8189, stats/object/matched_ious: 0.5279, loss: 1.6049, grad_norm: 5.9384
2024-09-04 00:13:51,428 - mmdet3d - INFO - Epoch [1][2100/8000]	lr: 2.000e-04, eta: 1 day, 2:59:50, time: 1.180, data_time: 0.127, memory: 6970, loss/object/loss_heatmap: 0.7144, loss/object/layer_-1_loss_cls: 0.0841, loss/object/layer_-1_loss_bbox: 0.9030, stats/object/matched_ious: 0.5363, loss: 1.7016, grad_norm: 5.0745
2024-09-04 00:14:51,025 - mmdet3d - INFO - Epoch [1][2150/8000]	lr: 2.000e-04, eta: 1 day, 2:57:07, time: 1.192, data_time: 0.121, memory: 6970, loss/object/loss_heatmap: 0.6952, loss/object/layer_-1_loss_cls: 0.0775, loss/object/layer_-1_loss_bbox: 0.9029, stats/object/matched_ious: 0.5455, loss: 1.6756, grad_norm: 4.7993
2024-09-04 00:15:47,756 - mmdet3d - INFO - Epoch [1][2200/8000]	lr: 2.000e-04, eta: 1 day, 2:52:47, time: 1.135, data_time: 0.071, memory: 6970, loss/object/loss_heatmap: 0.6866, loss/object/layer_-1_loss_cls: 0.0790, loss/object/layer_-1_loss_bbox: 0.8027, stats/object/matched_ious: 0.5489, loss: 1.5683, grad_norm: 4.9580
2024-09-04 00:16:46,596 - mmdet3d - INFO - Epoch [1][2250/8000]	lr: 2.000e-04, eta: 1 day, 2:49:49, time: 1.177, data_time: 0.126, memory: 6970, loss/object/loss_heatmap: 0.7721, loss/object/layer_-1_loss_cls: 0.0936, loss/object/layer_-1_loss_bbox: 1.0477, stats/object/matched_ious: 0.5334, loss: 1.9134, grad_norm: 5.8498
2024-09-04 00:17:49,126 - mmdet3d - INFO - Epoch [1][2300/8000]	lr: 2.000e-04, eta: 1 day, 2:49:01, time: 1.251, data_time: 0.174, memory: 6970, loss/object/loss_heatmap: 0.6895, loss/object/layer_-1_loss_cls: 0.0880, loss/object/layer_-1_loss_bbox: 0.7044, stats/object/matched_ious: 0.5684, loss: 1.4818, grad_norm: 5.9222
2024-09-04 00:18:47,793 - mmdet3d - INFO - Epoch [1][2350/8000]	lr: 2.000e-04, eta: 1 day, 2:46:05, time: 1.173, data_time: 0.071, memory: 6970, loss/object/loss_heatmap: 0.7032, loss/object/layer_-1_loss_cls: 0.0834, loss/object/layer_-1_loss_bbox: 0.8419, stats/object/matched_ious: 0.5566, loss: 1.6285, grad_norm: 4.5595
2024-09-04 00:19:45,290 - mmdet3d - INFO - Epoch [1][2400/8000]	lr: 2.000e-04, eta: 1 day, 2:42:35, time: 1.150, data_time: 0.088, memory: 6970, loss/object/loss_heatmap: 0.7161, loss/object/layer_-1_loss_cls: 0.0892, loss/object/layer_-1_loss_bbox: 0.8559, stats/object/matched_ious: 0.5628, loss: 1.6613, grad_norm: 4.9738
2024-09-04 00:20:43,883 - mmdet3d - INFO - Epoch [1][2450/8000]	lr: 2.000e-04, eta: 1 day, 2:39:47, time: 1.172, data_time: 0.103, memory: 6970, loss/object/loss_heatmap: 0.6461, loss/object/layer_-1_loss_cls: 0.0817, loss/object/layer_-1_loss_bbox: 0.8054, stats/object/matched_ious: 0.5683, loss: 1.5331, grad_norm: 4.5717
2024-09-04 00:21:43,140 - mmdet3d - INFO - Epoch [1][2500/8000]	lr: 2.000e-04, eta: 1 day, 2:37:24, time: 1.185, data_time: 0.112, memory: 6970, loss/object/loss_heatmap: 0.6651, loss/object/layer_-1_loss_cls: 0.0829, loss/object/layer_-1_loss_bbox: 0.7671, stats/object/matched_ious: 0.5735, loss: 1.5151, grad_norm: 5.0039
2024-09-04 00:22:44,613 - mmdet3d - INFO - Epoch [1][2550/8000]	lr: 2.000e-04, eta: 1 day, 2:36:11, time: 1.229, data_time: 0.162, memory: 6970, loss/object/loss_heatmap: 0.6521, loss/object/layer_-1_loss_cls: 0.0794, loss/object/layer_-1_loss_bbox: 0.7559, stats/object/matched_ious: 0.5609, loss: 1.4874, grad_norm: 5.2103
2024-09-04 00:23:46,300 - mmdet3d - INFO - Epoch [1][2600/8000]	lr: 2.000e-04, eta: 1 day, 2:35:05, time: 1.234, data_time: 0.165, memory: 6970, loss/object/loss_heatmap: 0.6798, loss/object/layer_-1_loss_cls: 0.0802, loss/object/layer_-1_loss_bbox: 0.8370, stats/object/matched_ious: 0.5510, loss: 1.5970, grad_norm: 4.5624
2024-09-04 00:24:43,932 - mmdet3d - INFO - Epoch [1][2650/8000]	lr: 2.000e-04, eta: 1 day, 2:32:00, time: 1.153, data_time: 0.059, memory: 6970, loss/object/loss_heatmap: 0.6706, loss/object/layer_-1_loss_cls: 0.0878, loss/object/layer_-1_loss_bbox: 0.7134, stats/object/matched_ious: 0.5741, loss: 1.4719, grad_norm: 4.5003
2024-09-04 00:25:44,627 - mmdet3d - INFO - Epoch [1][2700/8000]	lr: 2.000e-04, eta: 1 day, 2:30:29, time: 1.214, data_time: 0.113, memory: 6970, loss/object/loss_heatmap: 0.6272, loss/object/layer_-1_loss_cls: 0.0819, loss/object/layer_-1_loss_bbox: 0.7368, stats/object/matched_ious: 0.5788, loss: 1.4459, grad_norm: 4.9671
2024-09-04 00:26:44,389 - mmdet3d - INFO - Epoch [1][2750/8000]	lr: 2.000e-04, eta: 1 day, 2:28:32, time: 1.195, data_time: 0.095, memory: 6970, loss/object/loss_heatmap: 0.6694, loss/object/layer_-1_loss_cls: 0.0785, loss/object/layer_-1_loss_bbox: 0.8374, stats/object/matched_ious: 0.5638, loss: 1.5853, grad_norm: 4.1895
2024-09-04 00:27:40,235 - mmdet3d - INFO - Epoch [1][2800/8000]	lr: 2.000e-04, eta: 1 day, 2:24:49, time: 1.117, data_time: 0.045, memory: 6970, loss/object/loss_heatmap: 0.7191, loss/object/layer_-1_loss_cls: 0.0955, loss/object/layer_-1_loss_bbox: 0.8215, stats/object/matched_ious: 0.5450, loss: 1.6361, grad_norm: 4.8387
2024-09-04 00:28:40,769 - mmdet3d - INFO - Epoch [1][2850/8000]	lr: 2.000e-04, eta: 1 day, 2:23:19, time: 1.211, data_time: 0.111, memory: 6970, loss/object/loss_heatmap: 0.6880, loss/object/layer_-1_loss_cls: 0.0869, loss/object/layer_-1_loss_bbox: 0.9306, stats/object/matched_ious: 0.5606, loss: 1.7055, grad_norm: 4.7223
2024-09-04 00:29:45,852 - mmdet3d - INFO - Epoch [1][2900/8000]	lr: 2.000e-04, eta: 1 day, 2:23:51, time: 1.302, data_time: 0.210, memory: 6970, loss/object/loss_heatmap: 0.6801, loss/object/layer_-1_loss_cls: 0.0822, loss/object/layer_-1_loss_bbox: 0.8262, stats/object/matched_ious: 0.5709, loss: 1.5885, grad_norm: 4.5388
2024-09-04 00:30:47,421 - mmdet3d - INFO - Epoch [1][2950/8000]	lr: 2.000e-04, eta: 1 day, 2:22:48, time: 1.231, data_time: 0.129, memory: 6970, loss/object/loss_heatmap: 0.7479, loss/object/layer_-1_loss_cls: 0.0863, loss/object/layer_-1_loss_bbox: 0.9990, stats/object/matched_ious: 0.5535, loss: 1.8332, grad_norm: 4.5775
2024-09-04 00:31:47,221 - mmdet3d - INFO - Epoch [1][3000/8000]	lr: 2.000e-04, eta: 1 day, 2:20:59, time: 1.196, data_time: 0.114, memory: 6970, loss/object/loss_heatmap: 0.6897, loss/object/layer_-1_loss_cls: 0.0791, loss/object/layer_-1_loss_bbox: 0.9341, stats/object/matched_ious: 0.5621, loss: 1.7029, grad_norm: 4.2189
2024-09-04 00:32:45,719 - mmdet3d - INFO - Epoch [1][3050/8000]	lr: 2.000e-04, eta: 1 day, 2:18:39, time: 1.170, data_time: 0.076, memory: 6970, loss/object/loss_heatmap: 0.7079, loss/object/layer_-1_loss_cls: 0.0781, loss/object/layer_-1_loss_bbox: 0.8507, stats/object/matched_ious: 0.5670, loss: 1.6367, grad_norm: 4.4715
2024-09-04 00:33:43,348 - mmdet3d - INFO - Epoch [1][3100/8000]	lr: 2.000e-04, eta: 1 day, 2:16:00, time: 1.153, data_time: 0.077, memory: 6970, loss/object/loss_heatmap: 0.6229, loss/object/layer_-1_loss_cls: 0.0798, loss/object/layer_-1_loss_bbox: 0.7098, stats/object/matched_ious: 0.5818, loss: 1.4125, grad_norm: 4.5478
2024-09-04 00:34:44,184 - mmdet3d - INFO - Epoch [1][3150/8000]	lr: 2.000e-04, eta: 1 day, 2:14:43, time: 1.217, data_time: 0.133, memory: 6970, loss/object/loss_heatmap: 0.6838, loss/object/layer_-1_loss_cls: 0.0812, loss/object/layer_-1_loss_bbox: 0.7779, stats/object/matched_ious: 0.5826, loss: 1.5429, grad_norm: 4.7041
2024-09-04 00:35:43,301 - mmdet3d - INFO - Epoch [1][3200/8000]	lr: 2.000e-04, eta: 1 day, 2:12:45, time: 1.182, data_time: 0.123, memory: 6970, loss/object/loss_heatmap: 0.6375, loss/object/layer_-1_loss_cls: 0.0838, loss/object/layer_-1_loss_bbox: 0.7783, stats/object/matched_ious: 0.5661, loss: 1.4996, grad_norm: 4.9509
2024-09-04 00:36:40,832 - mmdet3d - INFO - Epoch [1][3250/8000]	lr: 2.000e-04, eta: 1 day, 2:10:12, time: 1.151, data_time: 0.086, memory: 6970, loss/object/loss_heatmap: 0.6924, loss/object/layer_-1_loss_cls: 0.0812, loss/object/layer_-1_loss_bbox: 0.7954, stats/object/matched_ious: 0.5841, loss: 1.5690, grad_norm: 4.2015
2024-09-04 00:37:34,691 - mmdet3d - INFO - Epoch [1][3300/8000]	lr: 2.000e-04, eta: 1 day, 2:06:15, time: 1.077, data_time: 0.039, memory: 6970, loss/object/loss_heatmap: 0.6142, loss/object/layer_-1_loss_cls: 0.0760, loss/object/layer_-1_loss_bbox: 0.7073, stats/object/matched_ious: 0.5915, loss: 1.3975, grad_norm: 5.1174
2024-09-04 00:38:32,579 - mmdet3d - INFO - Epoch [1][3350/8000]	lr: 2.000e-04, eta: 1 day, 2:03:57, time: 1.158, data_time: 0.108, memory: 6970, loss/object/loss_heatmap: 0.6302, loss/object/layer_-1_loss_cls: 0.0823, loss/object/layer_-1_loss_bbox: 0.7597, stats/object/matched_ious: 0.5933, loss: 1.4722, grad_norm: 4.4644
2024-09-04 00:39:31,016 - mmdet3d - INFO - Epoch [1][3400/8000]	lr: 2.000e-04, eta: 1 day, 2:01:53, time: 1.169, data_time: 0.080, memory: 6970, loss/object/loss_heatmap: 0.6106, loss/object/layer_-1_loss_cls: 0.0831, loss/object/layer_-1_loss_bbox: 0.6276, stats/object/matched_ious: 0.5830, loss: 1.3213, grad_norm: 5.0344
2024-09-04 00:40:29,801 - mmdet3d - INFO - Epoch [1][3450/8000]	lr: 2.000e-04, eta: 1 day, 1:59:59, time: 1.176, data_time: 0.094, memory: 6970, loss/object/loss_heatmap: 0.6744, loss/object/layer_-1_loss_cls: 0.0748, loss/object/layer_-1_loss_bbox: 0.8775, stats/object/matched_ious: 0.5787, loss: 1.6266, grad_norm: 5.1603
2024-09-04 00:41:24,947 - mmdet3d - INFO - Epoch [1][3500/8000]	lr: 2.000e-04, eta: 1 day, 1:56:47, time: 1.103, data_time: 0.025, memory: 6970, loss/object/loss_heatmap: 0.6457, loss/object/layer_-1_loss_cls: 0.0827, loss/object/layer_-1_loss_bbox: 0.7721, stats/object/matched_ious: 0.5759, loss: 1.5005, grad_norm: 4.2470
2024-09-04 00:42:23,244 - mmdet3d - INFO - Epoch [1][3550/8000]	lr: 2.000e-04, eta: 1 day, 1:54:47, time: 1.166, data_time: 0.077, memory: 6970, loss/object/loss_heatmap: 0.6434, loss/object/layer_-1_loss_cls: 0.0805, loss/object/layer_-1_loss_bbox: 0.7714, stats/object/matched_ious: 0.5852, loss: 1.4952, grad_norm: 3.8730
2024-09-04 00:43:21,453 - mmdet3d - INFO - Epoch [1][3600/8000]	lr: 2.000e-04, eta: 1 day, 1:52:46, time: 1.164, data_time: 0.060, memory: 6970, loss/object/loss_heatmap: 0.6277, loss/object/layer_-1_loss_cls: 0.0704, loss/object/layer_-1_loss_bbox: 0.8318, stats/object/matched_ious: 0.5842, loss: 1.5299, grad_norm: 4.3466
2024-09-04 00:44:18,812 - mmdet3d - INFO - Epoch [1][3650/8000]	lr: 2.000e-04, eta: 1 day, 1:50:30, time: 1.147, data_time: 0.091, memory: 6970, loss/object/loss_heatmap: 0.5932, loss/object/layer_-1_loss_cls: 0.0777, loss/object/layer_-1_loss_bbox: 0.6533, stats/object/matched_ious: 0.6032, loss: 1.3243, grad_norm: 4.4804
2024-09-04 00:45:16,382 - mmdet3d - INFO - Epoch [1][3700/8000]	lr: 2.000e-04, eta: 1 day, 1:48:20, time: 1.151, data_time: 0.099, memory: 6970, loss/object/loss_heatmap: 0.6015, loss/object/layer_-1_loss_cls: 0.0798, loss/object/layer_-1_loss_bbox: 0.6612, stats/object/matched_ious: 0.5945, loss: 1.3426, grad_norm: 4.1394
2024-09-04 00:46:16,415 - mmdet3d - INFO - Epoch [1][3750/8000]	lr: 2.000e-04, eta: 1 day, 1:47:01, time: 1.201, data_time: 0.111, memory: 6970, loss/object/loss_heatmap: 0.6539, loss/object/layer_-1_loss_cls: 0.0817, loss/object/layer_-1_loss_bbox: 0.8691, stats/object/matched_ious: 0.5809, loss: 1.6047, grad_norm: 4.1557
2024-09-04 00:47:16,190 - mmdet3d - INFO - Epoch [1][3800/8000]	lr: 2.000e-04, eta: 1 day, 1:45:39, time: 1.196, data_time: 0.137, memory: 6970, loss/object/loss_heatmap: 0.6099, loss/object/layer_-1_loss_cls: 0.0712, loss/object/layer_-1_loss_bbox: 0.7701, stats/object/matched_ious: 0.5872, loss: 1.4512, grad_norm: 4.1768
2024-09-04 00:48:12,885 - mmdet3d - INFO - Epoch [1][3850/8000]	lr: 2.000e-04, eta: 1 day, 1:43:16, time: 1.134, data_time: 0.074, memory: 6970, loss/object/loss_heatmap: 0.6274, loss/object/layer_-1_loss_cls: 0.0704, loss/object/layer_-1_loss_bbox: 0.7690, stats/object/matched_ious: 0.5863, loss: 1.4667, grad_norm: 4.1763
2024-09-04 00:49:09,485 - mmdet3d - INFO - Epoch [1][3900/8000]	lr: 2.000e-04, eta: 1 day, 1:40:53, time: 1.132, data_time: 0.052, memory: 6970, loss/object/loss_heatmap: 0.7606, loss/object/layer_-1_loss_cls: 0.0779, loss/object/layer_-1_loss_bbox: 1.1422, stats/object/matched_ious: 0.5445, loss: 1.9807, grad_norm: 4.1976
2024-09-04 00:50:06,375 - mmdet3d - INFO - Epoch [1][3950/8000]	lr: 2.000e-04, eta: 1 day, 1:38:38, time: 1.138, data_time: 0.075, memory: 6970, loss/object/loss_heatmap: 0.6668, loss/object/layer_-1_loss_cls: 0.0864, loss/object/layer_-1_loss_bbox: 0.8487, stats/object/matched_ious: 0.5860, loss: 1.6020, grad_norm: 4.1346
2024-09-04 00:51:06,031 - mmdet3d - INFO - Epoch [1][4000/8000]	lr: 2.000e-04, eta: 1 day, 1:37:17, time: 1.193, data_time: 0.138, memory: 6970, loss/object/loss_heatmap: 0.6383, loss/object/layer_-1_loss_cls: 0.0871, loss/object/layer_-1_loss_bbox: 0.7554, stats/object/matched_ious: 0.5937, loss: 1.4807, grad_norm: 4.0255
2024-09-04 00:52:06,553 - mmdet3d - INFO - Epoch [1][4050/8000]	lr: 2.000e-04, eta: 1 day, 1:36:14, time: 1.210, data_time: 0.160, memory: 6970, loss/object/loss_heatmap: 0.6882, loss/object/layer_-1_loss_cls: 0.0819, loss/object/layer_-1_loss_bbox: 0.8222, stats/object/matched_ious: 0.5682, loss: 1.5923, grad_norm: 4.5026
2024-09-04 00:53:05,007 - mmdet3d - INFO - Epoch [1][4100/8000]	lr: 2.000e-04, eta: 1 day, 1:34:32, time: 1.169, data_time: 0.138, memory: 6970, loss/object/loss_heatmap: 0.7268, loss/object/layer_-1_loss_cls: 0.0846, loss/object/layer_-1_loss_bbox: 1.0413, stats/object/matched_ious: 0.5508, loss: 1.8527, grad_norm: 4.4116
2024-09-04 00:54:01,523 - mmdet3d - INFO - Epoch [1][4150/8000]	lr: 2.000e-04, eta: 1 day, 1:32:16, time: 1.130, data_time: 0.082, memory: 6970, loss/object/loss_heatmap: 0.6294, loss/object/layer_-1_loss_cls: 0.0822, loss/object/layer_-1_loss_bbox: 0.7389, stats/object/matched_ious: 0.5936, loss: 1.4505, grad_norm: 3.8437
2024-09-04 00:54:58,645 - mmdet3d - INFO - Epoch [1][4200/8000]	lr: 2.000e-04, eta: 1 day, 1:30:12, time: 1.142, data_time: 0.049, memory: 6970, loss/object/loss_heatmap: 0.6153, loss/object/layer_-1_loss_cls: 0.0704, loss/object/layer_-1_loss_bbox: 0.7747, stats/object/matched_ious: 0.5818, loss: 1.4603, grad_norm: 3.6705
2024-09-04 00:55:53,302 - mmdet3d - INFO - Epoch [1][4250/8000]	lr: 2.000e-04, eta: 1 day, 1:27:26, time: 1.093, data_time: 0.031, memory: 6970, loss/object/loss_heatmap: 0.6507, loss/object/layer_-1_loss_cls: 0.0805, loss/object/layer_-1_loss_bbox: 0.8084, stats/object/matched_ious: 0.5819, loss: 1.5397, grad_norm: 3.6515
2024-09-04 00:56:51,229 - mmdet3d - INFO - Epoch [1][4300/8000]	lr: 2.000e-04, eta: 1 day, 1:25:41, time: 1.159, data_time: 0.106, memory: 6970, loss/object/loss_heatmap: 0.6729, loss/object/layer_-1_loss_cls: 0.0900, loss/object/layer_-1_loss_bbox: 0.8458, stats/object/matched_ious: 0.5805, loss: 1.6087, grad_norm: 3.9491
2024-09-04 00:57:47,266 - mmdet3d - INFO - Epoch [1][4350/8000]	lr: 2.000e-04, eta: 1 day, 1:23:23, time: 1.121, data_time: 0.072, memory: 6970, loss/object/loss_heatmap: 0.6114, loss/object/layer_-1_loss_cls: 0.0751, loss/object/layer_-1_loss_bbox: 0.7786, stats/object/matched_ious: 0.5973, loss: 1.4650, grad_norm: 3.2048
2024-09-04 00:58:46,056 - mmdet3d - INFO - Epoch [1][4400/8000]	lr: 2.000e-04, eta: 1 day, 1:21:55, time: 1.176, data_time: 0.125, memory: 6970, loss/object/loss_heatmap: 0.6155, loss/object/layer_-1_loss_cls: 0.0851, loss/object/layer_-1_loss_bbox: 0.6503, stats/object/matched_ious: 0.6028, loss: 1.3510, grad_norm: 3.3615
2024-09-04 00:59:44,177 - mmdet3d - INFO - Epoch [1][4450/8000]	lr: 2.000e-04, eta: 1 day, 1:20:16, time: 1.162, data_time: 0.097, memory: 6970, loss/object/loss_heatmap: 0.6362, loss/object/layer_-1_loss_cls: 0.0842, loss/object/layer_-1_loss_bbox: 0.7558, stats/object/matched_ious: 0.6002, loss: 1.4763, grad_norm: 3.4146
2024-09-04 01:00:39,136 - mmdet3d - INFO - Epoch [1][4500/8000]	lr: 2.000e-04, eta: 1 day, 1:17:45, time: 1.099, data_time: 0.044, memory: 6970, loss/object/loss_heatmap: 0.6366, loss/object/layer_-1_loss_cls: 0.0806, loss/object/layer_-1_loss_bbox: 0.7003, stats/object/matched_ious: 0.5874, loss: 1.4174, grad_norm: 3.7357
2024-09-04 01:01:31,727 - mmdet3d - INFO - Epoch [1][4550/8000]	lr: 2.000e-04, eta: 1 day, 1:14:37, time: 1.052, data_time: 0.024, memory: 6970, loss/object/loss_heatmap: 0.6392, loss/object/layer_-1_loss_cls: 0.0703, loss/object/layer_-1_loss_bbox: 0.7969, stats/object/matched_ious: 0.5951, loss: 1.5063, grad_norm: 3.2049
2024-09-04 01:02:27,540 - mmdet3d - INFO - Epoch [1][4600/8000]	lr: 2.000e-04, eta: 1 day, 1:12:24, time: 1.116, data_time: 0.040, memory: 6970, loss/object/loss_heatmap: 0.6367, loss/object/layer_-1_loss_cls: 0.0805, loss/object/layer_-1_loss_bbox: 0.6993, stats/object/matched_ious: 0.5999, loss: 1.4165, grad_norm: 3.4631
2024-09-04 01:03:23,052 - mmdet3d - INFO - Epoch [1][4650/8000]	lr: 2.000e-04, eta: 1 day, 1:10:08, time: 1.110, data_time: 0.042, memory: 6970, loss/object/loss_heatmap: 0.6268, loss/object/layer_-1_loss_cls: 0.0804, loss/object/layer_-1_loss_bbox: 0.8065, stats/object/matched_ious: 0.5954, loss: 1.5137, grad_norm: 3.6451
2024-09-04 01:04:21,408 - mmdet3d - INFO - Epoch [1][4700/8000]	lr: 2.000e-04, eta: 1 day, 1:08:40, time: 1.167, data_time: 0.102, memory: 6970, loss/object/loss_heatmap: 0.6884, loss/object/layer_-1_loss_cls: 0.0815, loss/object/layer_-1_loss_bbox: 0.8858, stats/object/matched_ious: 0.5776, loss: 1.6557, grad_norm: 3.7760
2024-09-04 01:05:15,734 - mmdet3d - INFO - Epoch [1][4750/8000]	lr: 2.000e-04, eta: 1 day, 1:06:08, time: 1.087, data_time: 0.052, memory: 6970, loss/object/loss_heatmap: 0.6495, loss/object/layer_-1_loss_cls: 0.0865, loss/object/layer_-1_loss_bbox: 0.7861, stats/object/matched_ious: 0.5805, loss: 1.5221, grad_norm: 4.2651
2024-09-04 01:06:15,700 - mmdet3d - INFO - Epoch [1][4800/8000]	lr: 2.000e-04, eta: 1 day, 1:05:07, time: 1.199, data_time: 0.035, memory: 6970, loss/object/loss_heatmap: 0.6266, loss/object/layer_-1_loss_cls: 0.0859, loss/object/layer_-1_loss_bbox: 0.7258, stats/object/matched_ious: 0.5943, loss: 1.4383, grad_norm: 3.6770
2024-09-04 01:07:12,861 - mmdet3d - INFO - Epoch [1][4850/8000]	lr: 2.000e-04, eta: 1 day, 1:03:22, time: 1.143, data_time: 0.056, memory: 6970, loss/object/loss_heatmap: 0.5838, loss/object/layer_-1_loss_cls: 0.0807, loss/object/layer_-1_loss_bbox: 0.6705, stats/object/matched_ious: 0.6105, loss: 1.3349, grad_norm: 3.5548
2024-09-04 01:08:08,283 - mmdet3d - INFO - Epoch [1][4900/8000]	lr: 2.000e-04, eta: 1 day, 1:01:12, time: 1.108, data_time: 0.040, memory: 6970, loss/object/loss_heatmap: 0.5966, loss/object/layer_-1_loss_cls: 0.0697, loss/object/layer_-1_loss_bbox: 0.8085, stats/object/matched_ious: 0.6009, loss: 1.4747, grad_norm: 3.2344
2024-09-04 01:09:05,293 - mmdet3d - INFO - Epoch [1][4950/8000]	lr: 2.000e-04, eta: 1 day, 0:59:27, time: 1.140, data_time: 0.043, memory: 6970, loss/object/loss_heatmap: 0.6349, loss/object/layer_-1_loss_cls: 0.0726, loss/object/layer_-1_loss_bbox: 0.8196, stats/object/matched_ious: 0.5836, loss: 1.5271, grad_norm: 3.3656
2024-09-04 01:10:01,747 - mmdet3d - INFO - Epoch [1][5000/8000]	lr: 2.000e-04, eta: 1 day, 0:57:35, time: 1.129, data_time: 0.094, memory: 6970, loss/object/loss_heatmap: 0.6483, loss/object/layer_-1_loss_cls: 0.0822, loss/object/layer_-1_loss_bbox: 0.7659, stats/object/matched_ious: 0.6017, loss: 1.4964, grad_norm: 3.3076
2024-09-04 01:10:58,016 - mmdet3d - INFO - Epoch [1][5050/8000]	lr: 2.000e-04, eta: 1 day, 0:55:41, time: 1.125, data_time: 0.056, memory: 6970, loss/object/loss_heatmap: 0.6123, loss/object/layer_-1_loss_cls: 0.0698, loss/object/layer_-1_loss_bbox: 0.8238, stats/object/matched_ious: 0.5947, loss: 1.5059, grad_norm: 3.2501
2024-09-04 01:11:53,908 - mmdet3d - INFO - Epoch [1][5100/8000]	lr: 2.000e-04, eta: 1 day, 0:53:42, time: 1.118, data_time: 0.048, memory: 6970, loss/object/loss_heatmap: 0.6058, loss/object/layer_-1_loss_cls: 0.0732, loss/object/layer_-1_loss_bbox: 0.7900, stats/object/matched_ious: 0.6085, loss: 1.4690, grad_norm: 3.0461
2024-09-04 01:12:50,915 - mmdet3d - INFO - Epoch [1][5150/8000]	lr: 2.000e-04, eta: 1 day, 0:52:02, time: 1.140, data_time: 0.084, memory: 6970, loss/object/loss_heatmap: 0.6161, loss/object/layer_-1_loss_cls: 0.0736, loss/object/layer_-1_loss_bbox: 0.6827, stats/object/matched_ious: 0.6042, loss: 1.3724, grad_norm: 3.2037
2024-09-04 01:13:44,477 - mmdet3d - INFO - Epoch [1][5200/8000]	lr: 2.000e-04, eta: 1 day, 0:49:32, time: 1.071, data_time: 0.024, memory: 6970, loss/object/loss_heatmap: 0.5794, loss/object/layer_-1_loss_cls: 0.0677, loss/object/layer_-1_loss_bbox: 0.6891, stats/object/matched_ious: 0.6117, loss: 1.3363, grad_norm: 3.1267
2024-09-04 01:14:38,466 - mmdet3d - INFO - Epoch [1][5250/8000]	lr: 2.000e-04, eta: 1 day, 0:47:10, time: 1.080, data_time: 0.030, memory: 6970, loss/object/loss_heatmap: 0.6299, loss/object/layer_-1_loss_cls: 0.0765, loss/object/layer_-1_loss_bbox: 0.8607, stats/object/matched_ious: 0.5947, loss: 1.5670, grad_norm: 3.5516
2024-09-04 01:15:33,207 - mmdet3d - INFO - Epoch [1][5300/8000]	lr: 2.000e-04, eta: 1 day, 0:45:01, time: 1.095, data_time: 0.031, memory: 6970, loss/object/loss_heatmap: 0.6257, loss/object/layer_-1_loss_cls: 0.0789, loss/object/layer_-1_loss_bbox: 0.6933, stats/object/matched_ious: 0.6005, loss: 1.3979, grad_norm: 3.4834
2024-09-04 01:16:26,241 - mmdet3d - INFO - Epoch [1][5350/8000]	lr: 2.000e-04, eta: 1 day, 0:42:29, time: 1.061, data_time: 0.016, memory: 6970, loss/object/loss_heatmap: 0.6187, loss/object/layer_-1_loss_cls: 0.0788, loss/object/layer_-1_loss_bbox: 0.7022, stats/object/matched_ious: 0.5883, loss: 1.3997, grad_norm: 3.3376
2024-09-04 01:17:21,484 - mmdet3d - INFO - Epoch [1][5400/8000]	lr: 2.000e-04, eta: 1 day, 0:40:30, time: 1.105, data_time: 0.016, memory: 6970, loss/object/loss_heatmap: 0.5781, loss/object/layer_-1_loss_cls: 0.0692, loss/object/layer_-1_loss_bbox: 0.6944, stats/object/matched_ious: 0.6041, loss: 1.3416, grad_norm: 3.1181
2024-09-04 01:18:14,988 - mmdet3d - INFO - Epoch [1][5450/8000]	lr: 2.000e-04, eta: 1 day, 0:38:08, time: 1.070, data_time: 0.014, memory: 6970, loss/object/loss_heatmap: 0.5854, loss/object/layer_-1_loss_cls: 0.0765, loss/object/layer_-1_loss_bbox: 0.6664, stats/object/matched_ious: 0.6040, loss: 1.3283, grad_norm: 3.3134
2024-09-04 01:19:09,036 - mmdet3d - INFO - Epoch [1][5500/8000]	lr: 2.000e-04, eta: 1 day, 0:35:55, time: 1.081, data_time: 0.028, memory: 6970, loss/object/loss_heatmap: 0.6155, loss/object/layer_-1_loss_cls: 0.0754, loss/object/layer_-1_loss_bbox: 0.7304, stats/object/matched_ious: 0.6056, loss: 1.4213, grad_norm: 3.3559
2024-09-04 01:20:03,361 - mmdet3d - INFO - Epoch [1][5550/8000]	lr: 2.000e-04, eta: 1 day, 0:33:47, time: 1.087, data_time: 0.025, memory: 6970, loss/object/loss_heatmap: 0.6570, loss/object/layer_-1_loss_cls: 0.0835, loss/object/layer_-1_loss_bbox: 0.7327, stats/object/matched_ious: 0.5974, loss: 1.4732, grad_norm: 3.2588
2024-09-04 01:20:59,456 - mmdet3d - INFO - Epoch [1][5600/8000]	lr: 2.000e-04, eta: 1 day, 0:32:04, time: 1.122, data_time: 0.055, memory: 6970, loss/object/loss_heatmap: 0.5830, loss/object/layer_-1_loss_cls: 0.0706, loss/object/layer_-1_loss_bbox: 0.7539, stats/object/matched_ious: 0.6088, loss: 1.4074, grad_norm: 3.0761
2024-09-04 01:21:55,307 - mmdet3d - INFO - Epoch [1][5650/8000]	lr: 2.000e-04, eta: 1 day, 0:30:18, time: 1.117, data_time: 0.063, memory: 6970, loss/object/loss_heatmap: 0.6809, loss/object/layer_-1_loss_cls: 0.0811, loss/object/layer_-1_loss_bbox: 0.8647, stats/object/matched_ious: 0.5867, loss: 1.6267, grad_norm: 3.3262
2024-09-04 01:22:49,005 - mmdet3d - INFO - Epoch [1][5700/8000]	lr: 2.000e-04, eta: 1 day, 0:28:05, time: 1.074, data_time: 0.015, memory: 6970, loss/object/loss_heatmap: 0.6361, loss/object/layer_-1_loss_cls: 0.0733, loss/object/layer_-1_loss_bbox: 0.8255, stats/object/matched_ious: 0.5791, loss: 1.5349, grad_norm: 3.3347
2024-09-04 01:23:45,805 - mmdet3d - INFO - Epoch [1][5750/8000]	lr: 2.000e-04, eta: 1 day, 0:26:34, time: 1.136, data_time: 0.039, memory: 6970, loss/object/loss_heatmap: 0.6485, loss/object/layer_-1_loss_cls: 0.0751, loss/object/layer_-1_loss_bbox: 0.7241, stats/object/matched_ious: 0.5681, loss: 1.4476, grad_norm: 3.5533
2024-09-04 01:24:41,977 - mmdet3d - INFO - Epoch [1][5800/8000]	lr: 2.000e-04, eta: 1 day, 0:24:55, time: 1.123, data_time: 0.032, memory: 6970, loss/object/loss_heatmap: 0.5943, loss/object/layer_-1_loss_cls: 0.0700, loss/object/layer_-1_loss_bbox: 0.7350, stats/object/matched_ious: 0.6130, loss: 1.3994, grad_norm: 3.0402
2024-09-04 01:25:45,121 - mmdet3d - INFO - Epoch [1][5850/8000]	lr: 2.000e-04, eta: 1 day, 0:24:46, time: 1.263, data_time: 0.204, memory: 6970, loss/object/loss_heatmap: 0.6076, loss/object/layer_-1_loss_cls: 0.0779, loss/object/layer_-1_loss_bbox: 0.6923, stats/object/matched_ious: 0.6092, loss: 1.3778, grad_norm: 3.0649
2024-09-04 01:26:46,082 - mmdet3d - INFO - Epoch [1][5900/8000]	lr: 2.000e-04, eta: 1 day, 0:24:08, time: 1.219, data_time: 0.141, memory: 6973, loss/object/loss_heatmap: 0.6111, loss/object/layer_-1_loss_cls: 0.0703, loss/object/layer_-1_loss_bbox: 0.7406, stats/object/matched_ious: 0.6094, loss: 1.4221, grad_norm: 3.0232
2024-09-04 01:27:47,858 - mmdet3d - INFO - Epoch [1][5950/8000]	lr: 2.000e-04, eta: 1 day, 0:23:40, time: 1.236, data_time: 0.183, memory: 6973, loss/object/loss_heatmap: 0.5974, loss/object/layer_-1_loss_cls: 0.0756, loss/object/layer_-1_loss_bbox: 0.6941, stats/object/matched_ious: 0.6180, loss: 1.3671, grad_norm: 3.1073
2024-09-04 01:28:50,803 - mmdet3d - INFO - Epoch [1][6000/8000]	lr: 2.000e-04, eta: 1 day, 0:23:25, time: 1.259, data_time: 0.204, memory: 6973, loss/object/loss_heatmap: 0.6149, loss/object/layer_-1_loss_cls: 0.0841, loss/object/layer_-1_loss_bbox: 0.6839, stats/object/matched_ious: 0.6158, loss: 1.3829, grad_norm: 3.3073
2024-09-04 01:29:55,241 - mmdet3d - INFO - Epoch [1][6050/8000]	lr: 2.000e-04, eta: 1 day, 0:23:28, time: 1.289, data_time: 0.227, memory: 6973, loss/object/loss_heatmap: 0.6114, loss/object/layer_-1_loss_cls: 0.0795, loss/object/layer_-1_loss_bbox: 0.7891, stats/object/matched_ious: 0.5951, loss: 1.4800, grad_norm: 3.1703
2024-09-04 01:31:01,834 - mmdet3d - INFO - Epoch [1][6100/8000]	lr: 2.000e-04, eta: 1 day, 0:23:57, time: 1.332, data_time: 0.253, memory: 6973, loss/object/loss_heatmap: 0.6542, loss/object/layer_-1_loss_cls: 0.0795, loss/object/layer_-1_loss_bbox: 0.7742, stats/object/matched_ious: 0.5990, loss: 1.5079, grad_norm: 3.0442
2024-09-04 01:32:04,029 - mmdet3d - INFO - Epoch [1][6150/8000]	lr: 2.000e-04, eta: 1 day, 0:23:30, time: 1.244, data_time: 0.200, memory: 6973, loss/object/loss_heatmap: 0.6051, loss/object/layer_-1_loss_cls: 0.0730, loss/object/layer_-1_loss_bbox: 0.7489, stats/object/matched_ious: 0.5892, loss: 1.4270, grad_norm: 3.1011
2024-09-04 01:33:08,876 - mmdet3d - INFO - Epoch [1][6200/8000]	lr: 2.000e-04, eta: 1 day, 0:23:35, time: 1.297, data_time: 0.239, memory: 6973, loss/object/loss_heatmap: 0.5991, loss/object/layer_-1_loss_cls: 0.0746, loss/object/layer_-1_loss_bbox: 0.6796, stats/object/matched_ious: 0.6023, loss: 1.3533, grad_norm: 3.3362
2024-09-04 01:34:12,994 - mmdet3d - INFO - Epoch [1][6250/8000]	lr: 2.000e-04, eta: 1 day, 0:23:30, time: 1.282, data_time: 0.218, memory: 6973, loss/object/loss_heatmap: 0.6272, loss/object/layer_-1_loss_cls: 0.0782, loss/object/layer_-1_loss_bbox: 0.6523, stats/object/matched_ious: 0.6064, loss: 1.3577, grad_norm: 3.2954
2024-09-04 01:35:19,753 - mmdet3d - INFO - Epoch [1][6300/8000]	lr: 2.000e-04, eta: 1 day, 0:23:55, time: 1.335, data_time: 0.270, memory: 6973, loss/object/loss_heatmap: 0.5758, loss/object/layer_-1_loss_cls: 0.0713, loss/object/layer_-1_loss_bbox: 0.6336, stats/object/matched_ious: 0.6266, loss: 1.2807, grad_norm: 2.8804
2024-09-04 01:36:22,618 - mmdet3d - INFO - Epoch [1][6350/8000]	lr: 2.000e-04, eta: 1 day, 0:23:34, time: 1.257, data_time: 0.178, memory: 6973, loss/object/loss_heatmap: 0.5864, loss/object/layer_-1_loss_cls: 0.0634, loss/object/layer_-1_loss_bbox: 0.7524, stats/object/matched_ious: 0.6038, loss: 1.4022, grad_norm: 2.9350
2024-09-04 01:37:22,367 - mmdet3d - INFO - Epoch [1][6400/8000]	lr: 2.000e-04, eta: 1 day, 0:22:35, time: 1.195, data_time: 0.162, memory: 6973, loss/object/loss_heatmap: 0.6383, loss/object/layer_-1_loss_cls: 0.0791, loss/object/layer_-1_loss_bbox: 0.7170, stats/object/matched_ious: 0.5936, loss: 1.4344, grad_norm: 3.4048
2024-09-04 01:38:20,821 - mmdet3d - INFO - Epoch [1][6450/8000]	lr: 2.000e-04, eta: 1 day, 0:21:23, time: 1.169, data_time: 0.104, memory: 6973, loss/object/loss_heatmap: 0.6222, loss/object/layer_-1_loss_cls: 0.0740, loss/object/layer_-1_loss_bbox: 0.6849, stats/object/matched_ious: 0.5965, loss: 1.3811, grad_norm: 3.1518
2024-09-04 01:39:31,745 - mmdet3d - INFO - Epoch [1][6500/8000]	lr: 2.000e-04, eta: 1 day, 0:22:31, time: 1.418, data_time: 0.385, memory: 6973, loss/object/loss_heatmap: 0.6652, loss/object/layer_-1_loss_cls: 0.0818, loss/object/layer_-1_loss_bbox: 0.8501, stats/object/matched_ious: 0.5984, loss: 1.5972, grad_norm: 4.0708
2024-09-04 01:40:38,059 - mmdet3d - INFO - Epoch [1][6550/8000]	lr: 2.000e-04, eta: 1 day, 0:22:45, time: 1.326, data_time: 0.278, memory: 6973, loss/object/loss_heatmap: 0.5922, loss/object/layer_-1_loss_cls: 0.0790, loss/object/layer_-1_loss_bbox: 0.7016, stats/object/matched_ious: 0.6111, loss: 1.3728, grad_norm: 3.1343
2024-09-04 01:41:46,850 - mmdet3d - INFO - Epoch [1][6600/8000]	lr: 2.000e-04, eta: 1 day, 0:23:26, time: 1.376, data_time: 0.347, memory: 6973, loss/object/loss_heatmap: 0.6145, loss/object/layer_-1_loss_cls: 0.0729, loss/object/layer_-1_loss_bbox: 0.8364, stats/object/matched_ious: 0.5965, loss: 1.5238, grad_norm: 3.0159
2024-09-04 01:42:48,860 - mmdet3d - INFO - Epoch [1][6650/8000]	lr: 2.000e-04, eta: 1 day, 0:22:51, time: 1.240, data_time: 0.198, memory: 6973, loss/object/loss_heatmap: 0.6837, loss/object/layer_-1_loss_cls: 0.0796, loss/object/layer_-1_loss_bbox: 0.8871, stats/object/matched_ious: 0.5777, loss: 1.6504, grad_norm: 3.1379
2024-09-04 01:43:48,996 - mmdet3d - INFO - Epoch [1][6700/8000]	lr: 2.000e-04, eta: 1 day, 0:21:54, time: 1.203, data_time: 0.138, memory: 6973, loss/object/loss_heatmap: 0.6238, loss/object/layer_-1_loss_cls: 0.0795, loss/object/layer_-1_loss_bbox: 0.7198, stats/object/matched_ious: 0.6009, loss: 1.4231, grad_norm: 3.4439
2024-09-04 01:44:49,510 - mmdet3d - INFO - Epoch [1][6750/8000]	lr: 2.000e-04, eta: 1 day, 0:21:02, time: 1.210, data_time: 0.157, memory: 6973, loss/object/loss_heatmap: 0.6740, loss/object/layer_-1_loss_cls: 0.0899, loss/object/layer_-1_loss_bbox: 0.7943, stats/object/matched_ious: 0.6063, loss: 1.5582, grad_norm: 3.6182
2024-09-04 01:45:48,351 - mmdet3d - INFO - Epoch [1][6800/8000]	lr: 2.000e-04, eta: 1 day, 0:19:51, time: 1.177, data_time: 0.143, memory: 6973, loss/object/loss_heatmap: 0.6219, loss/object/layer_-1_loss_cls: 0.0753, loss/object/layer_-1_loss_bbox: 0.7935, stats/object/matched_ious: 0.6101, loss: 1.4907, grad_norm: 3.0691
2024-09-04 01:46:48,972 - mmdet3d - INFO - Epoch [1][6850/8000]	lr: 2.000e-04, eta: 1 day, 0:19:00, time: 1.212, data_time: 0.130, memory: 6973, loss/object/loss_heatmap: 0.5748, loss/object/layer_-1_loss_cls: 0.0724, loss/object/layer_-1_loss_bbox: 0.6768, stats/object/matched_ious: 0.6157, loss: 1.3239, grad_norm: 2.8461
2024-09-04 01:47:53,883 - mmdet3d - INFO - Epoch [1][6900/8000]	lr: 2.000e-04, eta: 1 day, 0:18:54, time: 1.298, data_time: 0.261, memory: 6973, loss/object/loss_heatmap: 0.5833, loss/object/layer_-1_loss_cls: 0.0714, loss/object/layer_-1_loss_bbox: 0.6735, stats/object/matched_ious: 0.6306, loss: 1.3283, grad_norm: 3.0073
2024-09-04 01:48:56,535 - mmdet3d - INFO - Epoch [1][6950/8000]	lr: 2.000e-04, eta: 1 day, 0:18:23, time: 1.253, data_time: 0.201, memory: 6973, loss/object/loss_heatmap: 0.5667, loss/object/layer_-1_loss_cls: 0.0723, loss/object/layer_-1_loss_bbox: 0.7432, stats/object/matched_ious: 0.6305, loss: 1.3822, grad_norm: 2.8263
2024-09-04 01:50:12,112 - mmdet3d - INFO - Epoch [1][7000/8000]	lr: 2.000e-04, eta: 1 day, 0:20:07, time: 1.511, data_time: 0.441, memory: 6973, loss/object/loss_heatmap: 0.5976, loss/object/layer_-1_loss_cls: 0.0727, loss/object/layer_-1_loss_bbox: 0.7570, stats/object/matched_ious: 0.6146, loss: 1.4273, grad_norm: 2.8762
2024-09-04 01:51:25,497 - mmdet3d - INFO - Epoch [1][7050/8000]	lr: 2.000e-04, eta: 1 day, 0:21:25, time: 1.468, data_time: 0.421, memory: 6973, loss/object/loss_heatmap: 0.6104, loss/object/layer_-1_loss_cls: 0.0747, loss/object/layer_-1_loss_bbox: 0.7036, stats/object/matched_ious: 0.6141, loss: 1.3887, grad_norm: 2.6961
2024-09-04 01:52:35,658 - mmdet3d - INFO - Epoch [1][7100/8000]	lr: 2.000e-04, eta: 1 day, 0:22:08, time: 1.403, data_time: 0.324, memory: 6973, loss/object/loss_heatmap: 0.6128, loss/object/layer_-1_loss_cls: 0.0715, loss/object/layer_-1_loss_bbox: 0.7168, stats/object/matched_ious: 0.6152, loss: 1.4011, grad_norm: 2.6764
2024-09-04 01:53:39,595 - mmdet3d - INFO - Epoch [1][7150/8000]	lr: 2.000e-04, eta: 1 day, 0:21:47, time: 1.279, data_time: 0.249, memory: 6973, loss/object/loss_heatmap: 0.6023, loss/object/layer_-1_loss_cls: 0.0768, loss/object/layer_-1_loss_bbox: 0.6391, stats/object/matched_ious: 0.6199, loss: 1.3183, grad_norm: 3.6216
2024-09-04 01:54:47,661 - mmdet3d - INFO - Epoch [1][7200/8000]	lr: 2.000e-04, eta: 1 day, 0:22:06, time: 1.361, data_time: 0.308, memory: 6973, loss/object/loss_heatmap: 0.6050, loss/object/layer_-1_loss_cls: 0.0719, loss/object/layer_-1_loss_bbox: 0.8012, stats/object/matched_ious: 0.6217, loss: 1.4782, grad_norm: 2.8198
2024-09-04 01:55:47,628 - mmdet3d - INFO - Epoch [1][7250/8000]	lr: 2.000e-04, eta: 1 day, 0:21:03, time: 1.199, data_time: 0.150, memory: 6973, loss/object/loss_heatmap: 0.6559, loss/object/layer_-1_loss_cls: 0.0778, loss/object/layer_-1_loss_bbox: 0.7436, stats/object/matched_ious: 0.6002, loss: 1.4772, grad_norm: 2.8357
2024-09-04 01:56:56,769 - mmdet3d - INFO - Epoch [1][7300/8000]	lr: 2.000e-04, eta: 1 day, 0:21:31, time: 1.383, data_time: 0.356, memory: 6973, loss/object/loss_heatmap: 0.6027, loss/object/layer_-1_loss_cls: 0.0711, loss/object/layer_-1_loss_bbox: 0.7318, stats/object/matched_ious: 0.6178, loss: 1.4056, grad_norm: 3.0445
2024-09-04 01:58:24,107 - mmdet3d - INFO - Epoch [1][7350/8000]	lr: 2.000e-04, eta: 1 day, 0:24:58, time: 1.747, data_time: 0.682, memory: 6973, loss/object/loss_heatmap: 0.5992, loss/object/layer_-1_loss_cls: 0.0714, loss/object/layer_-1_loss_bbox: 0.7071, stats/object/matched_ious: 0.6107, loss: 1.3777, grad_norm: 3.1796
2024-09-04 01:59:46,044 - mmdet3d - INFO - Epoch [1][7400/8000]	lr: 2.000e-04, eta: 1 day, 0:27:28, time: 1.639, data_time: 0.557, memory: 6973, loss/object/loss_heatmap: 0.4884, loss/object/layer_-1_loss_cls: 0.0593, loss/object/layer_-1_loss_bbox: 0.5684, stats/object/matched_ious: 0.6320, loss: 1.1161, grad_norm: 2.7449
2024-09-04 02:01:11,039 - mmdet3d - INFO - Epoch [1][7450/8000]	lr: 2.000e-04, eta: 1 day, 0:30:24, time: 1.700, data_time: 0.611, memory: 6973, loss/object/loss_heatmap: 0.6169, loss/object/layer_-1_loss_cls: 0.0724, loss/object/layer_-1_loss_bbox: 0.7954, stats/object/matched_ious: 0.6081, loss: 1.4848, grad_norm: 2.8300
2024-09-04 02:02:29,335 - mmdet3d - INFO - Epoch [1][7500/8000]	lr: 2.000e-04, eta: 1 day, 0:32:13, time: 1.566, data_time: 0.455, memory: 6973, loss/object/loss_heatmap: 0.5819, loss/object/layer_-1_loss_cls: 0.0749, loss/object/layer_-1_loss_bbox: 0.6760, stats/object/matched_ious: 0.6433, loss: 1.3328, grad_norm: 2.6809
2024-09-04 02:03:43,814 - mmdet3d - INFO - Epoch [1][7550/8000]	lr: 2.000e-04, eta: 1 day, 0:33:22, time: 1.490, data_time: 0.401, memory: 6973, loss/object/loss_heatmap: 0.5358, loss/object/layer_-1_loss_cls: 0.0664, loss/object/layer_-1_loss_bbox: 0.6315, stats/object/matched_ious: 0.6365, loss: 1.2337, grad_norm: 2.7450
2024-09-04 02:04:49,207 - mmdet3d - INFO - Epoch [1][7600/8000]	lr: 2.000e-04, eta: 1 day, 0:33:03, time: 1.308, data_time: 0.261, memory: 6973, loss/object/loss_heatmap: 0.6583, loss/object/layer_-1_loss_cls: 0.0877, loss/object/layer_-1_loss_bbox: 0.7502, stats/object/matched_ious: 0.5910, loss: 1.4962, grad_norm: 3.3942
2024-09-04 02:06:32,612 - mmdet3d - INFO - Epoch [1][7650/8000]	lr: 2.000e-04, eta: 1 day, 0:38:42, time: 2.068, data_time: 1.014, memory: 6973, loss/object/loss_heatmap: 0.6288, loss/object/layer_-1_loss_cls: 0.0770, loss/object/layer_-1_loss_bbox: 0.6649, stats/object/matched_ious: 0.6080, loss: 1.3706, grad_norm: 2.9577
2024-09-04 02:08:29,426 - mmdet3d - INFO - Epoch [1][7700/8000]	lr: 2.000e-04, eta: 1 day, 0:46:22, time: 2.336, data_time: 1.232, memory: 6973, loss/object/loss_heatmap: 0.5880, loss/object/layer_-1_loss_cls: 0.0703, loss/object/layer_-1_loss_bbox: 0.6873, stats/object/matched_ious: 0.6254, loss: 1.3456, grad_norm: 3.1184
2024-09-04 02:09:54,293 - mmdet3d - INFO - Epoch [1][7750/8000]	lr: 2.000e-04, eta: 1 day, 0:48:57, time: 1.697, data_time: 0.621, memory: 6973, loss/object/loss_heatmap: 0.6067, loss/object/layer_-1_loss_cls: 0.0676, loss/object/layer_-1_loss_bbox: 0.7702, stats/object/matched_ious: 0.6175, loss: 1.4445, grad_norm: 2.7848
2024-09-04 02:11:18,380 - mmdet3d - INFO - Epoch [1][7800/8000]	lr: 2.000e-04, eta: 1 day, 0:51:21, time: 1.682, data_time: 0.625, memory: 6973, loss/object/loss_heatmap: 0.5377, loss/object/layer_-1_loss_cls: 0.0660, loss/object/layer_-1_loss_bbox: 0.6022, stats/object/matched_ious: 0.6394, loss: 1.2059, grad_norm: 2.5540
2024-09-04 02:13:34,976 - mmdet3d - INFO - Epoch [1][7850/8000]	lr: 2.000e-04, eta: 1 day, 1:01:45, time: 2.732, data_time: 1.600, memory: 6973, loss/object/loss_heatmap: 0.6350, loss/object/layer_-1_loss_cls: 0.0755, loss/object/layer_-1_loss_bbox: 0.7200, stats/object/matched_ious: 0.6146, loss: 1.4305, grad_norm: 2.7843
2024-09-04 02:15:21,861 - mmdet3d - INFO - Epoch [1][7900/8000]	lr: 2.000e-04, eta: 1 day, 1:07:28, time: 2.138, data_time: 1.012, memory: 6973, loss/object/loss_heatmap: 0.5588, loss/object/layer_-1_loss_cls: 0.0661, loss/object/layer_-1_loss_bbox: 0.6247, stats/object/matched_ious: 0.6338, loss: 1.2496, grad_norm: 2.6635
2024-09-04 02:16:47,892 - mmdet3d - INFO - Epoch [1][7950/8000]	lr: 2.000e-04, eta: 1 day, 1:09:56, time: 1.721, data_time: 0.621, memory: 6973, loss/object/loss_heatmap: 0.6397, loss/object/layer_-1_loss_cls: 0.0767, loss/object/layer_-1_loss_bbox: 0.7761, stats/object/matched_ious: 0.6117, loss: 1.4926, grad_norm: 3.1751
2024-09-04 02:18:06,851 - mmdet3d - INFO - Epoch [1][8000/8000]	lr: 2.000e-04, eta: 1 day, 1:11:18, time: 1.579, data_time: 0.485, memory: 6973, loss/object/loss_heatmap: 0.5663, loss/object/layer_-1_loss_cls: 0.0729, loss/object/layer_-1_loss_bbox: 0.6171, stats/object/matched_ious: 0.6280, loss: 1.2563, grad_norm: 2.8754
2024-09-04 02:18:07,008 - mmdet3d - INFO - Saving checkpoint at 1 epochs
[                                                  ] 0/2000, elapsed: 0s, ETA:[  ] 1/2000, 0.2 task/s, elapsed: 6s, ETA: 11074s/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/core/bbox/coders/transfusion_bbox_coder.py:96: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.post_center_range = torch.tensor(
[  ] 2/2000, 0.3 task/s, elapsed: 7s, ETA:  6985s[  ] 3/2000, 0.4 task/s, elapsed: 8s, ETA:  5503s[  ] 4/2000, 0.4 task/s, elapsed: 10s, ETA:  4846s[  ] 5/2000, 0.4 task/s, elapsed: 11s, ETA:  4535s[  ] 6/2000, 0.5 task/s, elapsed: 13s, ETA:  4283s[  ] 7/2000, 0.5 task/s, elapsed: 14s, ETA:  4082s[  ] 8/2000, 0.5 task/s, elapsed: 16s, ETA:  3941s[  ] 9/2000, 0.5 task/s, elapsed: 17s, ETA:  3861s[  ] 10/2000, 0.5 task/s, elapsed: 19s, ETA:  3838s[  ] 11/2000, 0.5 task/s, elapsed: 21s, ETA:  3767s[  ] 12/2000, 0.5 task/s, elapsed: 22s, ETA:  3726s[  ] 13/2000, 0.5 task/s, elapsed: 24s, ETA:  3690s[  ] 14/2000, 0.5 task/s, elapsed: 26s, ETA:  3671s[  ] 15/2000, 0.5 task/s, elapsed: 28s, ETA:  3721s[  ] 16/2000, 0.5 task/s, elapsed: 30s, ETA:  3700s[  ] 17/2000, 0.5 task/s, elapsed: 32s, ETA:  3678s[  ] 18/2000, 0.5 task/s, elapsed: 33s, ETA:  3631s[  ] 19/2000, 0.6 task/s, elapsed: 34s, ETA:  3586s[  ] 20/2000, 0.6 task/s, elapsed: 36s, ETA:  3540s[  ] 21/2000, 0.6 task/s, elapsed: 37s, ETA:  3483s[  ] 22/2000, 0.6 task/s, elapsed: 38s, ETA:  3456s[  ] 23/2000, 0.6 task/s, elapsed: 40s, ETA:  3408s[  ] 24/2000, 0.6 task/s, elapsed: 41s, ETA:  3384s[  ] 25/2000, 0.6 task/s, elapsed: 43s, ETA:  3371s[  ] 26/2000, 0.6 task/s, elapsed: 44s, ETA:  3310s[  ] 27/2000, 0.6 task/s, elapsed: 45s, ETA:  3300s[  ] 28/2000, 0.6 task/s, elapsed: 46s, ETA:  3275s[  ] 29/2000, 0.6 task/s, elapsed: 48s, ETA:  3245s[  ] 30/2000, 0.6 task/s, elapsed: 49s, ETA:  3228s[  ] 31/2000, 0.6 task/s, elapsed: 51s, ETA:  3214s[  ] 32/2000, 0.6 task/s, elapsed: 52s, ETA:  3210s[  ] 33/2000, 0.6 task/s, elapsed: 54s, ETA:  3194s[  ] 34/2000, 0.6 task/s, elapsed: 55s, ETA:  3172s[  ] 35/2000, 0.6 task/s, elapsed: 56s, ETA:  3140s[  ] 36/2000, 0.6 task/s, elapsed: 57s, ETA:  3127s[  ] 37/2000, 0.6 task/s, elapsed: 59s, ETA:  3121s[  ] 38/2000, 0.6 task/s, elapsed: 60s, ETA:  3102s[  ] 39/2000, 0.6 task/s, elapsed: 61s, ETA:  3083s[  ] 40/2000, 0.6 task/s, elapsed: 63s, ETA:  3066s[  ] 41/2000, 0.6 task/s, elapsed: 64s, ETA:  3052s[  ] 42/2000, 0.6 task/s, elapsed: 65s, ETA:  3038s[  ] 43/2000, 0.6 task/s, elapsed: 67s, ETA:  3031s[  ] 44/2000, 0.6 task/s, elapsed: 68s, ETA:  3014s[  ] 45/2000, 0.6 task/s, elapsed: 69s, ETA:  3011s[  ] 46/2000, 0.7 task/s, elapsed: 71s, ETA:  2999s[  ] 47/2000, 0.7 task/s, elapsed: 72s, ETA:  2986s[  ] 48/2000, 0.7 task/s, elapsed: 73s, ETA:  2979s[  ] 49/2000, 0.7 task/s, elapsed: 75s, ETA:  2976s[  ] 50/2000, 0.7 task/s, elapsed: 76s, ETA:  2965s[  ] 51/2000, 0.7 task/s, elapsed: 77s, ETA:  2951s[  ] 52/2000, 0.7 task/s, elapsed: 79s, ETA:  2948s[  ] 53/2000, 0.7 task/s, elapsed: 80s, ETA:  2934s[  ] 54/2000, 0.7 task/s, elapsed: 81s, ETA:  2919s[  ] 55/2000, 0.7 task/s, elapsed: 82s, ETA:  2913s[  ] 56/2000, 0.7 task/s, elapsed: 84s, ETA:  2901s[  ] 57/2000, 0.7 task/s, elapsed: 85s, ETA:  2889s[  ] 58/2000, 0.7 task/s, elapsed: 86s, ETA:  2878s[  ] 59/2000, 0.7 task/s, elapsed: 87s, ETA:  2868s[  ] 60/2000, 0.7 task/s, elapsed: 88s, ETA:  2860s[  ] 61/2000, 0.7 task/s, elapsed: 90s, ETA:  2860s[  ] 62/2000, 0.7 task/s, elapsed: 91s, ETA:  2851s[  ] 63/2000, 0.7 task/s, elapsed: 93s, ETA:  2844s[  ] 64/2000, 0.7 task/s, elapsed: 94s, ETA:  2837s[  ] 65/2000, 0.7 task/s, elapsed: 95s, ETA:  2836s[  ] 66/2000, 0.7 task/s, elapsed: 97s, ETA:  2842s[  ] 67/2000, 0.7 task/s, elapsed: 98s, ETA:  2835s[  ] 68/2000, 0.7 task/s, elapsed: 99s, ETA:  2825s[  ] 69/2000, 0.7 task/s, elapsed: 101s, ETA:  2831s[  ] 70/2000, 0.7 task/s, elapsed: 103s, ETA:  2841s[  ] 71/2000, 0.7 task/s, elapsed: 104s, ETA:  2833s[  ] 72/2000, 0.7 task/s, elapsed: 106s, ETA:  2827s[  ] 73/2000, 0.7 task/s, elapsed: 107s, ETA:  2820s[  ] 74/2000, 0.7 task/s, elapsed: 108s, ETA:  2813s[  ] 75/2000, 0.7 task/s, elapsed: 109s, ETA:  2804s[  ] 76/2000, 0.7 task/s, elapsed: 110s, ETA:  2796s[  ] 77/2000, 0.7 task/s, elapsed: 112s, ETA:  2788s[  ] 78/2000, 0.7 task/s, elapsed: 113s, ETA:  2795s[  ] 79/2000, 0.7 task/s, elapsed: 115s, ETA:  2787s[  ] 80/2000, 0.7 task/s, elapsed: 116s, ETA:  2783s[  ] 81/2000, 0.7 task/s, elapsed: 117s, ETA:  2778s[  ] 82/2000, 0.7 task/s, elapsed: 118s, ETA:  2771s[  ] 83/2000, 0.7 task/s, elapsed: 120s, ETA:  2762s[  ] 84/2000, 0.7 task/s, elapsed: 121s, ETA:  2756s[  ] 85/2000, 0.7 task/s, elapsed: 122s, ETA:  2751s[  ] 86/2000, 0.7 task/s, elapsed: 123s, ETA:  2747s[  ] 87/2000, 0.7 task/s, elapsed: 125s, ETA:  2749s[  ] 88/2000, 0.7 task/s, elapsed: 126s, ETA:  2746s[  ] 89/2000, 0.7 task/s, elapsed: 127s, ETA:  2737s[  ] 90/2000, 0.7 task/s, elapsed: 128s, ETA:  2725s[  ] 91/2000, 0.7 task/s, elapsed: 129s, ETA:  2715s[  ] 92/2000, 0.7 task/s, elapsed: 131s, ETA:  2711s[  ] 93/2000, 0.7 task/s, elapsed: 132s, ETA:  2704s[  ] 94/2000, 0.7 task/s, elapsed: 133s, ETA:  2695s[  ] 95/2000, 0.7 task/s, elapsed: 134s, ETA:  2687s[  ] 96/2000, 0.7 task/s, elapsed: 135s, ETA:  2679s[  ] 97/2000, 0.7 task/s, elapsed: 136s, ETA:  2673s[  ] 98/2000, 0.7 task/s, elapsed: 137s, ETA:  2664s[  ] 99/2000, 0.7 task/s, elapsed: 138s, ETA:  2656s[  ] 100/2000, 0.7 task/s, elapsed: 139s, ETA:  2648s[  ] 101/2000, 0.7 task/s, elapsed: 141s, ETA:  2644s[  ] 102/2000, 0.7 task/s, elapsed: 142s, ETA:  2636s[  ] 103/2000, 0.7 task/s, elapsed: 143s, ETA:  2633s[  ] 104/2000, 0.7 task/s, elapsed: 144s, ETA:  2625s[  ] 105/2000, 0.7 task/s, elapsed: 145s, ETA:  2621s[  ] 106/2000, 0.7 task/s, elapsed: 146s, ETA:  2616s[  ] 107/2000, 0.7 task/s, elapsed: 147s, ETA:  2609s[  ] 108/2000, 0.7 task/s, elapsed: 149s, ETA:  2606s[  ] 109/2000, 0.7 task/s, elapsed: 150s, ETA:  2603s[  ] 110/2000, 0.7 task/s, elapsed: 152s, ETA:  2603s[  ] 111/2000, 0.7 task/s, elapsed: 153s, ETA:  2603s[  ] 112/2000, 0.7 task/s, elapsed: 154s, ETA:  2600s[  ] 113/2000, 0.7 task/s, elapsed: 155s, ETA:  2594s[  ] 114/2000, 0.7 task/s, elapsed: 157s, ETA:  2601s[  ] 115/2000, 0.7 task/s, elapsed: 158s, ETA:  2595s[  ] 116/2000, 0.7 task/s, elapsed: 160s, ETA:  2594s[  ] 117/2000, 0.7 task/s, elapsed: 161s, ETA:  2592s[  ] 118/2000, 0.7 task/s, elapsed: 162s, ETA:  2589s[  ] 119/2000, 0.7 task/s, elapsed: 164s, ETA:  2586s[  ] 120/2000, 0.7 task/s, elapsed: 165s, ETA:  2584s[  ] 121/2000, 0.7 task/s, elapsed: 166s, ETA:  2584s[  ] 122/2000, 0.7 task/s, elapsed: 168s, ETA:  2582s[  ] 123/2000, 0.7 task/s, elapsed: 169s, ETA:  2579s[  ] 124/2000, 0.7 task/s, elapsed: 170s, ETA:  2574s[  ] 125/2000, 0.7 task/s, elapsed: 171s, ETA:  2572s[  ] 126/2000, 0.7 task/s, elapsed: 173s, ETA:  2568s[  ] 127/2000, 0.7 task/s, elapsed: 174s, ETA:  2564s[  ] 128/2000, 0.7 task/s, elapsed: 175s, ETA:  2560s[  ] 129/2000, 0.7 task/s, elapsed: 176s, ETA:  2555s[  ] 130/2000, 0.7 task/s, elapsed: 177s, ETA:  2550s[  ] 131/2000, 0.7 task/s, elapsed: 179s, ETA:  2547s[  ] 132/2000, 0.7 task/s, elapsed: 180s, ETA:  2541s[  ] 133/2000, 0.7 task/s, elapsed: 181s, ETA:  2539s[  ] 134/2000, 0.7 task/s, elapsed: 182s, ETA:  2539s[  ] 135/2000, 0.7 task/s, elapsed: 184s, ETA:  2537s[  ] 136/2000, 0.7 task/s, elapsed: 185s, ETA:  2538s[  ] 137/2000, 0.7 task/s, elapsed: 187s, ETA:  2541s[  ] 138/2000, 0.7 task/s, elapsed: 188s, ETA:  2539s[  ] 139/2000, 0.7 task/s, elapsed: 190s, ETA:  2540s[  ] 140/2000, 0.7 task/s, elapsed: 191s, ETA:  2538s[  ] 141/2000, 0.7 task/s, elapsed: 192s, ETA:  2537s[  ] 142/2000, 0.7 task/s, elapsed: 194s, ETA:  2538s[  ] 143/2000, 0.7 task/s, elapsed: 195s, ETA:  2537s[  ] 144/2000, 0.7 task/s, elapsed: 197s, ETA:  2537s[  ] 145/2000, 0.7 task/s, elapsed: 198s, ETA:  2534s[  ] 146/2000, 0.7 task/s, elapsed: 199s, ETA:  2532s[  ] 147/2000, 0.7 task/s, elapsed: 201s, ETA:  2528s[  ] 148/2000, 0.7 task/s, elapsed: 202s, ETA:  2528s[  ] 149/2000, 0.7 task/s, elapsed: 203s, ETA:  2527s[  ] 150/2000, 0.7 task/s, elapsed: 205s, ETA:  2524s[  ] 151/2000, 0.7 task/s, elapsed: 206s, ETA:  2524s[  ] 152/2000, 0.7 task/s, elapsed: 208s, ETA:  2526s[  ] 153/2000, 0.7 task/s, elapsed: 209s, ETA:  2522s[  ] 154/2000, 0.7 task/s, elapsed: 210s, ETA:  2519s[  ] 155/2000, 0.7 task/s, elapsed: 211s, ETA:  2515s[  ] 156/2000, 0.7 task/s, elapsed: 213s, ETA:  2512s[  ] 157/2000, 0.7 task/s, elapsed: 214s, ETA:  2509s[  ] 158/2000, 0.7 task/s, elapsed: 215s, ETA:  2506s[  ] 159/2000, 0.7 task/s, elapsed: 216s, ETA:  2504s[  ] 160/2000, 0.7 task/s, elapsed: 217s, ETA:  2500s[  ] 161/2000, 0.7 task/s, elapsed: 218s, ETA:  2495s[  ] 162/2000, 0.7 task/s, elapsed: 220s, ETA:  2493s[  ] 163/2000, 0.7 task/s, elapsed: 221s, ETA:  2490s[  ] 164/2000, 0.7 task/s, elapsed: 223s, ETA:  2493s[  ] 165/2000, 0.7 task/s, elapsed: 224s, ETA:  2490s[  ] 166/2000, 0.7 task/s, elapsed: 225s, ETA:  2490s[  ] 167/2000, 0.7 task/s, elapsed: 227s, ETA:  2491s[  ] 168/2000, 0.7 task/s, elapsed: 228s, ETA:  2490s[  ] 169/2000, 0.7 task/s, elapsed: 230s, ETA:  2488s[  ] 170/2000, 0.7 task/s, elapsed: 231s, ETA:  2488s[  ] 171/2000, 0.7 task/s, elapsed: 232s, ETA:  2485s[  ] 172/2000, 0.7 task/s, elapsed: 234s, ETA:  2482s[  ] 173/2000, 0.7 task/s, elapsed: 235s, ETA:  2479s[  ] 174/2000, 0.7 task/s, elapsed: 236s, ETA:  2475s[  ] 175/2000, 0.7 task/s, elapsed: 237s, ETA:  2471s[  ] 176/2000, 0.7 task/s, elapsed: 238s, ETA:  2468s[  ] 177/2000, 0.7 task/s, elapsed: 239s, ETA:  2465s[  ] 178/2000, 0.7 task/s, elapsed: 241s, ETA:  2462s[  ] 179/2000, 0.7 task/s, elapsed: 242s, ETA:  2458s[  ] 180/2000, 0.7 task/s, elapsed: 243s, ETA:  2455s[  ] 181/2000, 0.7 task/s, elapsed: 244s, ETA:  2452s[  ] 182/2000, 0.7 task/s, elapsed: 245s, ETA:  2450s[  ] 183/2000, 0.7 task/s, elapsed: 247s, ETA:  2448s[  ] 184/2000, 0.7 task/s, elapsed: 248s, ETA:  2445s[  ] 185/2000, 0.7 task/s, elapsed: 249s, ETA:  2442s[  ] 186/2000, 0.7 task/s, elapsed: 250s, ETA:  2441s[  ] 187/2000, 0.7 task/s, elapsed: 251s, ETA:  2438s[  ] 188/2000, 0.7 task/s, elapsed: 253s, ETA:  2436s[  ] 189/2000, 0.7 task/s, elapsed: 254s, ETA:  2434s[  ] 190/2000, 0.7 task/s, elapsed: 255s, ETA:  2431s[  ] 191/2000, 0.7 task/s, elapsed: 256s, ETA:  2428s[  ] 192/2000, 0.7 task/s, elapsed: 258s, ETA:  2425s[  ] 193/2000, 0.7 task/s, elapsed: 259s, ETA:  2423s[  ] 194/2000, 0.7 task/s, elapsed: 260s, ETA:  2424s[  ] 195/2000, 0.7 task/s, elapsed: 262s, ETA:  2421s[  ] 196/2000, 0.7 task/s, elapsed: 263s, ETA:  2420s[  ] 197/2000, 0.7 task/s, elapsed: 264s, ETA:  2418s[  ] 198/2000, 0.7 task/s, elapsed: 265s, ETA:  2414s[  ] 199/2000, 0.7 task/s, elapsed: 267s, ETA:  2416s[  ] 200/2000, 0.7 task/s, elapsed: 268s, ETA:  2415s[  ] 201/2000, 0.7 task/s, elapsed: 269s, ETA:  2411s[  ] 202/2000, 0.7 task/s, elapsed: 271s, ETA:  2410s[  ] 203/2000, 0.7 task/s, elapsed: 272s, ETA:  2409s[  ] 204/2000, 0.7 task/s, elapsed: 273s, ETA:  2405s[  ] 205/2000, 0.7 task/s, elapsed: 275s, ETA:  2405s[  ] 206/2000, 0.7 task/s, elapsed: 276s, ETA:  2402s[  ] 207/2000, 0.7 task/s, elapsed: 277s, ETA:  2398s[  ] 208/2000, 0.7 task/s, elapsed: 278s, ETA:  2395s[  ] 209/2000, 0.7 task/s, elapsed: 279s, ETA:  2394s[  ] 210/2000, 0.7 task/s, elapsed: 281s, ETA:  2392s[  ] 211/2000, 0.7 task/s, elapsed: 282s, ETA:  2390s[  ] 212/2000, 0.7 task/s, elapsed: 283s, ETA:  2387s[  ] 213/2000, 0.7 task/s, elapsed: 284s, ETA:  2384s[  ] 214/2000, 0.8 task/s, elapsed: 285s, ETA:  2381s[  ] 215/2000, 0.8 task/s, elapsed: 286s, ETA:  2378s[  ] 216/2000, 0.8 task/s, elapsed: 287s, ETA:  2374s[  ] 217/2000, 0.8 task/s, elapsed: 289s, ETA:  2372s[  ] 218/2000, 0.8 task/s, elapsed: 290s, ETA:  2369s[  ] 219/2000, 0.8 task/s, elapsed: 291s, ETA:  2364s[  ] 220/2000, 0.8 task/s, elapsed: 292s, ETA:  2362s[  ] 221/2000, 0.8 task/s, elapsed: 293s, ETA:  2358s[  ] 222/2000, 0.8 task/s, elapsed: 294s, ETA:  2354s[  ] 223/2000, 0.8 task/s, elapsed: 295s, ETA:  2351s[  ] 224/2000, 0.8 task/s, elapsed: 296s, ETA:  2348s[  ] 225/2000, 0.8 task/s, elapsed: 297s, ETA:  2343s[  ] 226/2000, 0.8 task/s, elapsed: 298s, ETA:  2341s[  ] 227/2000, 0.8 task/s, elapsed: 299s, ETA:  2337s[  ] 228/2000, 0.8 task/s, elapsed: 300s, ETA:  2334s[  ] 229/2000, 0.8 task/s, elapsed: 301s, ETA:  2331s[  ] 230/2000, 0.8 task/s, elapsed: 303s, ETA:  2329s[  ] 231/2000, 0.8 task/s, elapsed: 304s, ETA:  2329s[  ] 232/2000, 0.8 task/s, elapsed: 305s, ETA:  2327s[  ] 233/2000, 0.8 task/s, elapsed: 307s, ETA:  2325s[  ] 234/2000, 0.8 task/s, elapsed: 308s, ETA:  2324s[  ] 235/2000, 0.8 task/s, elapsed: 309s, ETA:  2320s[  ] 236/2000, 0.8 task/s, elapsed: 310s, ETA:  2317s[  ] 237/2000, 0.8 task/s, elapsed: 311s, ETA:  2315s[  ] 238/2000, 0.8 task/s, elapsed: 312s, ETA:  2313s[  ] 239/2000, 0.8 task/s, elapsed: 313s, ETA:  2310s[  ] 240/2000, 0.8 task/s, elapsed: 315s, ETA:  2306s[  ] 241/2000, 0.8 task/s, elapsed: 316s, ETA:  2304s[  ] 242/2000, 0.8 task/s, elapsed: 317s, ETA:  2303s[  ] 243/2000, 0.8 task/s, elapsed: 318s, ETA:  2298s[  ] 244/2000, 0.8 task/s, elapsed: 319s, ETA:  2296s[  ] 245/2000, 0.8 task/s, elapsed: 320s, ETA:  2293s[  ] 246/2000, 0.8 task/s, elapsed: 321s, ETA:  2290s[  ] 247/2000, 0.8 task/s, elapsed: 323s, ETA:  2290s[  ] 248/2000, 0.8 task/s, elapsed: 324s, ETA:  2286s[  ] 249/2000, 0.8 task/s, elapsed: 325s, ETA:  2284s[  ] 250/2000, 0.8 task/s, elapsed: 326s, ETA:  2281s[  ] 251/2000, 0.8 task/s, elapsed: 327s, ETA:  2279s[  ] 252/2000, 0.8 task/s, elapsed: 328s, ETA:  2277s[  ] 253/2000, 0.8 task/s, elapsed: 329s, ETA:  2274s[  ] 254/2000, 0.8 task/s, elapsed: 331s, ETA:  2272s[  ] 255/2000, 0.8 task/s, elapsed: 332s, ETA:  2273s[  ] 256/2000, 0.8 task/s, elapsed: 333s, ETA:  2270s[  ] 257/2000, 0.8 task/s, elapsed: 334s, ETA:  2268s[  ] 258/2000, 0.8 task/s, elapsed: 335s, ETA:  2265s[  ] 259/2000, 0.8 task/s, elapsed: 337s, ETA:  2262s[  ] 260/2000, 0.8 task/s, elapsed: 338s, ETA:  2259s[  ] 261/2000, 0.8 task/s, elapsed: 339s, ETA:  2258s[  ] 262/2000, 0.8 task/s, elapsed: 340s, ETA:  2256s[  ] 263/2000, 0.8 task/s, elapsed: 341s, ETA:  2255s[  ] 264/2000, 0.8 task/s, elapsed: 343s, ETA:  2253s[  ] 265/2000, 0.8 task/s, elapsed: 344s, ETA:  2252s[  ] 266/2000, 0.8 task/s, elapsed: 345s, ETA:  2249s[  ] 267/2000, 0.8 task/s, elapsed: 346s, ETA:  2246s[  ] 268/2000, 0.8 task/s, elapsed: 347s, ETA:  2246s[  ] 269/2000, 0.8 task/s, elapsed: 349s, ETA:  2246s[  ] 270/2000, 0.8 task/s, elapsed: 350s, ETA:  2243s[  ] 271/2000, 0.8 task/s, elapsed: 351s, ETA:  2241s[  ] 272/2000, 0.8 task/s, elapsed: 353s, ETA:  2242s[  ] 273/2000, 0.8 task/s, elapsed: 354s, ETA:  2241s[  ] 274/2000, 0.8 task/s, elapsed: 356s, ETA:  2240s[  ] 275/2000, 0.8 task/s, elapsed: 357s, ETA:  2238s[  ] 276/2000, 0.8 task/s, elapsed: 358s, ETA:  2237s[  ] 277/2000, 0.8 task/s, elapsed: 359s, ETA:  2234s[  ] 278/2000, 0.8 task/s, elapsed: 360s, ETA:  2232s[  ] 279/2000, 0.8 task/s, elapsed: 362s, ETA:  2231s[  ] 280/2000, 0.8 task/s, elapsed: 363s, ETA:  2229s[  ] 281/2000, 0.8 task/s, elapsed: 364s, ETA:  2227s[  ] 282/2000, 0.8 task/s, elapsed: 365s, ETA:  2225s[  ] 283/2000, 0.8 task/s, elapsed: 367s, ETA:  2224s[  ] 284/2000, 0.8 task/s, elapsed: 368s, ETA:  2224s[  ] 285/2000, 0.8 task/s, elapsed: 370s, ETA:  2226s[  ] 286/2000, 0.8 task/s, elapsed: 371s, ETA:  2223s[  ] 287/2000, 0.8 task/s, elapsed: 372s, ETA:  2220s[  ] 288/2000, 0.8 task/s, elapsed: 373s, ETA:  2219s[  ] 289/2000, 0.8 task/s, elapsed: 374s, ETA:  2217s[  ] 290/2000, 0.8 task/s, elapsed: 376s, ETA:  2216s[  ] 291/2000, 0.8 task/s, elapsed: 377s, ETA:  2213s[  ] 292/2000, 0.8 task/s, elapsed: 378s, ETA:  2211s[  ] 293/2000, 0.8 task/s, elapsed: 379s, ETA:  2209s[  ] 294/2000, 0.8 task/s, elapsed: 380s, ETA:  2206s[  ] 295/2000, 0.8 task/s, elapsed: 382s, ETA:  2205s[  ] 296/2000, 0.8 task/s, elapsed: 383s, ETA:  2202s[  ] 297/2000, 0.8 task/s, elapsed: 384s, ETA:  2199s[  ] 298/2000, 0.8 task/s, elapsed: 385s, ETA:  2198s[  ] 299/2000, 0.8 task/s, elapsed: 386s, ETA:  2195s[  ] 300/2000, 0.8 task/s, elapsed: 387s, ETA:  2194s[  ] 301/2000, 0.8 task/s, elapsed: 388s, ETA:  2192s[  ] 302/2000, 0.8 task/s, elapsed: 390s, ETA:  2192s[  ] 303/2000, 0.8 task/s, elapsed: 391s, ETA:  2190s[  ] 304/2000, 0.8 task/s, elapsed: 392s, ETA:  2188s[  ] 305/2000, 0.8 task/s, elapsed: 394s, ETA:  2189s[  ] 306/2000, 0.8 task/s, elapsed: 395s, ETA:  2186s[  ] 307/2000, 0.8 task/s, elapsed: 396s, ETA:  2185s[  ] 308/2000, 0.8 task/s, elapsed: 397s, ETA:  2183s[  ] 309/2000, 0.8 task/s, elapsed: 398s, ETA:  2181s[  ] 310/2000, 0.8 task/s, elapsed: 400s, ETA:  2179s[  ] 311/2000, 0.8 task/s, elapsed: 401s, ETA:  2178s[  ] 312/2000, 0.8 task/s, elapsed: 402s, ETA:  2176s[  ] 313/2000, 0.8 task/s, elapsed: 403s, ETA:  2174s[  ] 314/2000, 0.8 task/s, elapsed: 405s, ETA:  2172s[  ] 315/2000, 0.8 task/s, elapsed: 406s, ETA:  2170s[  ] 316/2000, 0.8 task/s, elapsed: 407s, ETA:  2168s[  ] 317/2000, 0.8 task/s, elapsed: 408s, ETA:  2166s[  ] 318/2000, 0.8 task/s, elapsed: 409s, ETA:  2165s[  ] 319/2000, 0.8 task/s, elapsed: 410s, ETA:  2163s[  ] 320/2000, 0.8 task/s, elapsed: 412s, ETA:  2161s[  ] 321/2000, 0.8 task/s, elapsed: 413s, ETA:  2159s[  ] 322/2000, 0.8 task/s, elapsed: 414s, ETA:  2157s[  ] 323/2000, 0.8 task/s, elapsed: 415s, ETA:  2155s[  ] 324/2000, 0.8 task/s, elapsed: 416s, ETA:  2154s[  ] 325/2000, 0.8 task/s, elapsed: 418s, ETA:  2153s[  ] 326/2000, 0.8 task/s, elapsed: 419s, ETA:  2151s[  ] 327/2000, 0.8 task/s, elapsed: 420s, ETA:  2151s[  ] 328/2000, 0.8 task/s, elapsed: 422s, ETA:  2149s[  ] 329/2000, 0.8 task/s, elapsed: 423s, ETA:  2149s[  ] 330/2000, 0.8 task/s, elapsed: 424s, ETA:  2147s[  ] 331/2000, 0.8 task/s, elapsed: 425s, ETA:  2145s[  ] 332/2000, 0.8 task/s, elapsed: 427s, ETA:  2143s[  ] 333/2000, 0.8 task/s, elapsed: 428s, ETA:  2140s[  ] 334/2000, 0.8 task/s, elapsed: 429s, ETA:  2140s[  ] 335/2000, 0.8 task/s, elapsed: 430s, ETA:  2137s[  ] 336/2000, 0.8 task/s, elapsed: 431s, ETA:  2135s[  ] 337/2000, 0.8 task/s, elapsed: 432s, ETA:  2133s[  ] 338/2000, 0.8 task/s, elapsed: 433s, ETA:  2131s[  ] 339/2000, 0.8 task/s, elapsed: 435s, ETA:  2130s[  ] 340/2000, 0.8 task/s, elapsed: 436s, ETA:  2129s[  ] 341/2000, 0.8 task/s, elapsed: 437s, ETA:  2127s[  ] 342/2000, 0.8 task/s, elapsed: 438s, ETA:  2125s[  ] 343/2000, 0.8 task/s, elapsed: 440s, ETA:  2124s[  ] 344/2000, 0.8 task/s, elapsed: 441s, ETA:  2123s[  ] 345/2000, 0.8 task/s, elapsed: 442s, ETA:  2122s[  ] 346/2000, 0.8 task/s, elapsed: 443s, ETA:  2120s[  ] 347/2000, 0.8 task/s, elapsed: 445s, ETA:  2118s[  ] 348/2000, 0.8 task/s, elapsed: 446s, ETA:  2116s[  ] 349/2000, 0.8 task/s, elapsed: 447s, ETA:  2115s[  ] 350/2000, 0.8 task/s, elapsed: 448s, ETA:  2113s[  ] 351/2000, 0.8 task/s, elapsed: 449s, ETA:  2111s[  ] 352/2000, 0.8 task/s, elapsed: 451s, ETA:  2109s[  ] 353/2000, 0.8 task/s, elapsed: 452s, ETA:  2107s[  ] 354/2000, 0.8 task/s, elapsed: 453s, ETA:  2105s[  ] 355/2000, 0.8 task/s, elapsed: 454s, ETA:  2102s[  ] 356/2000, 0.8 task/s, elapsed: 455s, ETA:  2100s[  ] 357/2000, 0.8 task/s, elapsed: 456s, ETA:  2098s[  ] 358/2000, 0.8 task/s, elapsed: 457s, ETA:  2095s[  ] 359/2000, 0.8 task/s, elapsed: 458s, ETA:  2093s[  ] 360/2000, 0.8 task/s, elapsed: 459s, ETA:  2091s[  ] 361/2000, 0.8 task/s, elapsed: 461s, ETA:  2094s[  ] 362/2000, 0.8 task/s, elapsed: 462s, ETA:  2089s[  ] 363/2000, 0.8 task/s, elapsed: 463s, ETA:  2086s[  ] 364/2000, 0.8 task/s, elapsed: 464s, ETA:  2085s[  ] 365/2000, 0.8 task/s, elapsed: 465s, ETA:  2083s[  ] 366/2000, 0.8 task/s, elapsed: 467s, ETA:  2083s[  ] 367/2000, 0.8 task/s, elapsed: 468s, ETA:  2083s[  ] 368/2000, 0.8 task/s, elapsed: 469s, ETA:  2080s[  ] 369/2000, 0.8 task/s, elapsed: 470s, ETA:  2079s[  ] 370/2000, 0.8 task/s, elapsed: 471s, ETA:  2077s[  ] 371/2000, 0.8 task/s, elapsed: 473s, ETA:  2077s[  ] 372/2000, 0.8 task/s, elapsed: 474s, ETA:  2074s[  ] 373/2000, 0.8 task/s, elapsed: 475s, ETA:  2073s[  ] 374/2000, 0.8 task/s, elapsed: 476s, ETA:  2071s[  ] 375/2000, 0.8 task/s, elapsed: 477s, ETA:  2068s[  ] 376/2000, 0.8 task/s, elapsed: 478s, ETA:  2066s[  ] 377/2000, 0.8 task/s, elapsed: 479s, ETA:  2063s[  ] 378/2000, 0.8 task/s, elapsed: 480s, ETA:  2061s[  ] 379/2000, 0.8 task/s, elapsed: 481s, ETA:  2058s[  ] 380/2000, 0.8 task/s, elapsed: 482s, ETA:  2056s[  ] 381/2000, 0.8 task/s, elapsed: 483s, ETA:  2054s[  ] 382/2000, 0.8 task/s, elapsed: 484s, ETA:  2052s[  ] 383/2000, 0.8 task/s, elapsed: 486s, ETA:  2050s[  ] 384/2000, 0.8 task/s, elapsed: 487s, ETA:  2048s[  ] 385/2000, 0.8 task/s, elapsed: 488s, ETA:  2048s[  ] 386/2000, 0.8 task/s, elapsed: 489s, ETA:  2046s[  ] 387/2000, 0.8 task/s, elapsed: 490s, ETA:  2044s[  ] 388/2000, 0.8 task/s, elapsed: 491s, ETA:  2042s[  ] 389/2000, 0.8 task/s, elapsed: 492s, ETA:  2039s[  ] 390/2000, 0.8 task/s, elapsed: 494s, ETA:  2037s[  ] 391/2000, 0.8 task/s, elapsed: 495s, ETA:  2035s[  ] 392/2000, 0.8 task/s, elapsed: 496s, ETA:  2034s[  ] 393/2000, 0.8 task/s, elapsed: 497s, ETA:  2034s[  ] 394/2000, 0.8 task/s, elapsed: 499s, ETA:  2032s[  ] 395/2000, 0.8 task/s, elapsed: 500s, ETA:  2031s[  ] 396/2000, 0.8 task/s, elapsed: 501s, ETA:  2029s[  ] 397/2000, 0.8 task/s, elapsed: 502s, ETA:  2029s[  ] 398/2000, 0.8 task/s, elapsed: 504s, ETA:  2028s[  ] 399/2000, 0.8 task/s, elapsed: 505s, ETA:  2025s[  ] 400/2000, 0.8 task/s, elapsed: 506s, ETA:  2025s[  ] 401/2000, 0.8 task/s, elapsed: 508s, ETA:  2024s[  ] 402/2000, 0.8 task/s, elapsed: 509s, ETA:  2024s[  ] 403/2000, 0.8 task/s, elapsed: 511s, ETA:  2023s[  ] 404/2000, 0.8 task/s, elapsed: 512s, ETA:  2023s[  ] 405/2000, 0.8 task/s, elapsed: 513s, ETA:  2022s[  ] 406/2000, 0.8 task/s, elapsed: 515s, ETA:  2021s[  ] 407/2000, 0.8 task/s, elapsed: 516s, ETA:  2019s[  ] 408/2000, 0.8 task/s, elapsed: 517s, ETA:  2019s[  ] 409/2000, 0.8 task/s, elapsed: 519s, ETA:  2018s[  ] 410/2000, 0.8 task/s, elapsed: 520s, ETA:  2018s[  ] 411/2000, 0.8 task/s, elapsed: 522s, ETA:  2018s[  ] 412/2000, 0.8 task/s, elapsed: 524s, ETA:  2018s[  ] 413/2000, 0.8 task/s, elapsed: 525s, ETA:  2018s[  ] 414/2000, 0.8 task/s, elapsed: 527s, ETA:  2018s[  ] 415/2000, 0.8 task/s, elapsed: 529s, ETA:  2019s[  ] 416/2000, 0.8 task/s, elapsed: 530s, ETA:  2019s[  ] 417/2000, 0.8 task/s, elapsed: 532s, ETA:  2019s[  ] 418/2000, 0.8 task/s, elapsed: 534s, ETA:  2020s[  ] 419/2000, 0.8 task/s, elapsed: 535s, ETA:  2020s[  ] 420/2000, 0.8 task/s, elapsed: 537s, ETA:  2020s[  ] 421/2000, 0.8 task/s, elapsed: 539s, ETA:  2020s[  ] 422/2000, 0.8 task/s, elapsed: 540s, ETA:  2019s[  ] 423/2000, 0.8 task/s, elapsed: 541s, ETA:  2018s[  ] 424/2000, 0.8 task/s, elapsed: 542s, ETA:  2016s[  ] 425/2000, 0.8 task/s, elapsed: 544s, ETA:  2015s[  ] 426/2000, 0.8 task/s, elapsed: 545s, ETA:  2013s[  ] 427/2000, 0.8 task/s, elapsed: 546s, ETA:  2013s[  ] 428/2000, 0.8 task/s, elapsed: 548s, ETA:  2012s[  ] 429/2000, 0.8 task/s, elapsed: 549s, ETA:  2010s[  ] 430/2000, 0.8 task/s, elapsed: 551s, ETA:  2011s[  ] 431/2000, 0.8 task/s, elapsed: 552s, ETA:  2011s[  ] 432/2000, 0.8 task/s, elapsed: 554s, ETA:  2011s[  ] 433/2000, 0.8 task/s, elapsed: 556s, ETA:  2011s[  ] 434/2000, 0.8 task/s, elapsed: 557s, ETA:  2011s[  ] 435/2000, 0.8 task/s, elapsed: 559s, ETA:  2011s[  ] 436/2000, 0.8 task/s, elapsed: 561s, ETA:  2012s[  ] 437/2000, 0.8 task/s, elapsed: 562s, ETA:  2009s[  ] 438/2000, 0.8 task/s, elapsed: 563s, ETA:  2007s[  ] 439/2000, 0.8 task/s, elapsed: 564s, ETA:  2006s[  ] 440/2000, 0.8 task/s, elapsed: 565s, ETA:  2005s[  ] 441/2000, 0.8 task/s, elapsed: 567s, ETA:  2004s[  ] 442/2000, 0.8 task/s, elapsed: 568s, ETA:  2003s[  ] 443/2000, 0.8 task/s, elapsed: 570s, ETA:  2002s[  ] 444/2000, 0.8 task/s, elapsed: 571s, ETA:  2001s[  ] 445/2000, 0.8 task/s, elapsed: 572s, ETA:  2000s[  ] 446/2000, 0.8 task/s, elapsed: 573s, ETA:  1998s[  ] 447/2000, 0.8 task/s, elapsed: 575s, ETA:  1997s[  ] 448/2000, 0.8 task/s, elapsed: 576s, ETA:  1996s[  ] 449/2000, 0.8 task/s, elapsed: 578s, ETA:  1995s[  ] 450/2000, 0.8 task/s, elapsed: 579s, ETA:  1993s[  ] 451/2000, 0.8 task/s, elapsed: 580s, ETA:  1992s[  ] 452/2000, 0.8 task/s, elapsed: 581s, ETA:  1990s[  ] 453/2000, 0.8 task/s, elapsed: 583s, ETA:  1990s[  ] 454/2000, 0.8 task/s, elapsed: 584s, ETA:  1988s[  ] 455/2000, 0.8 task/s, elapsed: 585s, ETA:  1987s[  ] 456/2000, 0.8 task/s, elapsed: 586s, ETA:  1985s[  ] 457/2000, 0.8 task/s, elapsed: 588s, ETA:  1984s[  ] 458/2000, 0.8 task/s, elapsed: 589s, ETA:  1982s[  ] 459/2000, 0.8 task/s, elapsed: 590s, ETA:  1981s[  ] 460/2000, 0.8 task/s, elapsed: 592s, ETA:  1981s[  ] 461/2000, 0.8 task/s, elapsed: 593s, ETA:  1979s[  ] 462/2000, 0.8 task/s, elapsed: 594s, ETA:  1978s[  ] 463/2000, 0.8 task/s, elapsed: 596s, ETA:  1978s[  ] 464/2000, 0.8 task/s, elapsed: 597s, ETA:  1977s[  ] 465/2000, 0.8 task/s, elapsed: 599s, ETA:  1976s[  ] 466/2000, 0.8 task/s, elapsed: 600s, ETA:  1976s[  ] 467/2000, 0.8 task/s, elapsed: 602s, ETA:  1976s[  ] 468/2000, 0.8 task/s, elapsed: 604s, ETA:  1976s[  ] 469/2000, 0.8 task/s, elapsed: 605s, ETA:  1976s[  ] 470/2000, 0.8 task/s, elapsed: 607s, ETA:  1976s[  ] 471/2000, 0.8 task/s, elapsed: 609s, ETA:  1976s[  ] 472/2000, 0.8 task/s, elapsed: 610s, ETA:  1974s[  ] 473/2000, 0.8 task/s, elapsed: 611s, ETA:  1974s[  ] 474/2000, 0.8 task/s, elapsed: 613s, ETA:  1974s[  ] 475/2000, 0.8 task/s, elapsed: 614s, ETA:  1971s[  ] 476/2000, 0.8 task/s, elapsed: 616s, ETA:  1972s[  ] 477/2000, 0.8 task/s, elapsed: 617s, ETA:  1971s[  ] 478/2000, 0.8 task/s, elapsed: 618s, ETA:  1969s[  ] 479/2000, 0.8 task/s, elapsed: 619s, ETA:  1967s[  ] 480/2000, 0.8 task/s, elapsed: 621s, ETA:  1966s[  ] 481/2000, 0.8 task/s, elapsed: 622s, ETA:  1965s[  ] 482/2000, 0.8 task/s, elapsed: 623s, ETA:  1963s[  ] 483/2000, 0.8 task/s, elapsed: 625s, ETA:  1962s[  ] 484/2000, 0.8 task/s, elapsed: 626s, ETA:  1960s[  ] 485/2000, 0.8 task/s, elapsed: 627s, ETA:  1959s[  ] 486/2000, 0.8 task/s, elapsed: 628s, ETA:  1957s[  ] 487/2000, 0.8 task/s, elapsed: 630s, ETA:  1956s[  ] 488/2000, 0.8 task/s, elapsed: 631s, ETA:  1957s[  ] 489/2000, 0.8 task/s, elapsed: 633s, ETA:  1956s[  ] 490/2000, 0.8 task/s, elapsed: 634s, ETA:  1954s[  ] 491/2000, 0.8 task/s, elapsed: 635s, ETA:  1953s[  ] 492/2000, 0.8 task/s, elapsed: 637s, ETA:  1951s[  ] 493/2000, 0.8 task/s, elapsed: 638s, ETA:  1950s[  ] 494/2000, 0.8 task/s, elapsed: 639s, ETA:  1949s[  ] 495/2000, 0.8 task/s, elapsed: 640s, ETA:  1947s[  ] 496/2000, 0.8 task/s, elapsed: 642s, ETA:  1946s[  ] 497/2000, 0.8 task/s, elapsed: 644s, ETA:  1946s[  ] 498/2000, 0.8 task/s, elapsed: 645s, ETA:  1945s[  ] 499/2000, 0.8 task/s, elapsed: 646s, ETA:  1944s[  ] 500/2000, 0.8 task/s, elapsed: 647s, ETA:  1942s[  ] 501/2000, 0.8 task/s, elapsed: 649s, ETA:  1942s[  ] 502/2000, 0.8 task/s, elapsed: 651s, ETA:  1942s[  ] 503/2000, 0.8 task/s, elapsed: 652s, ETA:  1941s[  ] 504/2000, 0.8 task/s, elapsed: 654s, ETA:  1940s[  ] 505/2000, 0.8 task/s, elapsed: 655s, ETA:  1939s[  ] 506/2000, 0.8 task/s, elapsed: 656s, ETA:  1937s[  ] 507/2000, 0.8 task/s, elapsed: 657s, ETA:  1936s[  ] 508/2000, 0.8 task/s, elapsed: 659s, ETA:  1935s[  ] 509/2000, 0.8 task/s, elapsed: 660s, ETA:  1933s[  ] 510/2000, 0.8 task/s, elapsed: 661s, ETA:  1932s[  ] 511/2000, 0.8 task/s, elapsed: 663s, ETA:  1931s[  ] 512/2000, 0.8 task/s, elapsed: 664s, ETA:  1930s[  ] 513/2000, 0.8 task/s, elapsed: 665s, ETA:  1928s[  ] 514/2000, 0.8 task/s, elapsed: 666s, ETA:  1927s[  ] 515/2000, 0.8 task/s, elapsed: 668s, ETA:  1925s[  ] 516/2000, 0.8 task/s, elapsed: 669s, ETA:  1923s[  ] 517/2000, 0.8 task/s, elapsed: 670s, ETA:  1921s[  ] 518/2000, 0.8 task/s, elapsed: 671s, ETA:  1920s[  ] 519/2000, 0.8 task/s, elapsed: 672s, ETA:  1919s[  ] 520/2000, 0.8 task/s, elapsed: 674s, ETA:  1918s[  ] 521/2000, 0.8 task/s, elapsed: 675s, ETA:  1916s[  ] 522/2000, 0.8 task/s, elapsed: 676s, ETA:  1915s[  ] 523/2000, 0.8 task/s, elapsed: 678s, ETA:  1913s[  ] 524/2000, 0.8 task/s, elapsed: 679s, ETA:  1912s[  ] 525/2000, 0.8 task/s, elapsed: 680s, ETA:  1910s[  ] 526/2000, 0.8 task/s, elapsed: 681s, ETA:  1909s[  ] 527/2000, 0.8 task/s, elapsed: 682s, ETA:  1907s[  ] 528/2000, 0.8 task/s, elapsed: 684s, ETA:  1907s[  ] 529/2000, 0.8 task/s, elapsed: 685s, ETA:  1905s[  ] 530/2000, 0.8 task/s, elapsed: 686s, ETA:  1904s[  ] 531/2000, 0.8 task/s, elapsed: 688s, ETA:  1903s[  ] 532/2000, 0.8 task/s, elapsed: 689s, ETA:  1902s[  ] 533/2000, 0.8 task/s, elapsed: 690s, ETA:  1900s[  ] 534/2000, 0.8 task/s, elapsed: 692s, ETA:  1899s[  ] 535/2000, 0.8 task/s, elapsed: 693s, ETA:  1897s[  ] 536/2000, 0.8 task/s, elapsed: 694s, ETA:  1896s[  ] 537/2000, 0.8 task/s, elapsed: 695s, ETA:  1894s[  ] 538/2000, 0.8 task/s, elapsed: 697s, ETA:  1893s[  ] 539/2000, 0.8 task/s, elapsed: 698s, ETA:  1891s[  ] 540/2000, 0.8 task/s, elapsed: 699s, ETA:  1890s[  ] 541/2000, 0.8 task/s, elapsed: 701s, ETA:  1890s[  ] 542/2000, 0.8 task/s, elapsed: 702s, ETA:  1888s[  ] 543/2000, 0.8 task/s, elapsed: 703s, ETA:  1887s[  ] 544/2000, 0.8 task/s, elapsed: 704s, ETA:  1885s[  ] 545/2000, 0.8 task/s, elapsed: 706s, ETA:  1884s[  ] 546/2000, 0.8 task/s, elapsed: 707s, ETA:  1882s[  ] 547/2000, 0.8 task/s, elapsed: 708s, ETA:  1881s[  ] 548/2000, 0.8 task/s, elapsed: 709s, ETA:  1879s[  ] 549/2000, 0.8 task/s, elapsed: 710s, ETA:  1877s[  ] 550/2000, 0.8 task/s, elapsed: 711s, ETA:  1876s[  ] 551/2000, 0.8 task/s, elapsed: 713s, ETA:  1874s[  ] 552/2000, 0.8 task/s, elapsed: 714s, ETA:  1873s[  ] 553/2000, 0.8 task/s, elapsed: 715s, ETA:  1871s[  ] 554/2000, 0.8 task/s, elapsed: 716s, ETA:  1869s[  ] 555/2000, 0.8 task/s, elapsed: 717s, ETA:  1867s[  ] 556/2000, 0.8 task/s, elapsed: 718s, ETA:  1865s[  ] 557/2000, 0.8 task/s, elapsed: 719s, ETA:  1863s[  ] 558/2000, 0.8 task/s, elapsed: 720s, ETA:  1862s[  ] 559/2000, 0.8 task/s, elapsed: 722s, ETA:  1861s[  ] 560/2000, 0.8 task/s, elapsed: 723s, ETA:  1859s[  ] 561/2000, 0.8 task/s, elapsed: 724s, ETA:  1858s[  ] 562/2000, 0.8 task/s, elapsed: 725s, ETA:  1856s[  ] 563/2000, 0.8 task/s, elapsed: 726s, ETA:  1854s[  ] 564/2000, 0.8 task/s, elapsed: 728s, ETA:  1853s[  ] 565/2000, 0.8 task/s, elapsed: 729s, ETA:  1851s[  ] 566/2000, 0.8 task/s, elapsed: 730s, ETA:  1850s[  ] 567/2000, 0.8 task/s, elapsed: 731s, ETA:  1848s[  ] 568/2000, 0.8 task/s, elapsed: 733s, ETA:  1847s[  ] 569/2000, 0.8 task/s, elapsed: 734s, ETA:  1846s[  ] 570/2000, 0.8 task/s, elapsed: 735s, ETA:  1844s[  ] 571/2000, 0.8 task/s, elapsed: 736s, ETA:  1842s[  ] 572/2000, 0.8 task/s, elapsed: 737s, ETA:  1840s[  ] 573/2000, 0.8 task/s, elapsed: 738s, ETA:  1838s[  ] 574/2000, 0.8 task/s, elapsed: 739s, ETA:  1836s[  ] 575/2000, 0.8 task/s, elapsed: 740s, ETA:  1835s[  ] 576/2000, 0.8 task/s, elapsed: 741s, ETA:  1833s[  ] 577/2000, 0.8 task/s, elapsed: 743s, ETA:  1831s[  ] 578/2000, 0.8 task/s, elapsed: 744s, ETA:  1830s[  ] 579/2000, 0.8 task/s, elapsed: 745s, ETA:  1829s[  ] 580/2000, 0.8 task/s, elapsed: 746s, ETA:  1828s[  ] 581/2000, 0.8 task/s, elapsed: 748s, ETA:  1826s[  ] 582/2000, 0.8 task/s, elapsed: 749s, ETA:  1824s[  ] 583/2000, 0.8 task/s, elapsed: 750s, ETA:  1823s[  ] 584/2000, 0.8 task/s, elapsed: 751s, ETA:  1821s[  ] 585/2000, 0.8 task/s, elapsed: 752s, ETA:  1819s[  ] 586/2000, 0.8 task/s, elapsed: 753s, ETA:  1818s[  ] 587/2000, 0.8 task/s, elapsed: 755s, ETA:  1817s[  ] 588/2000, 0.8 task/s, elapsed: 756s, ETA:  1816s[  ] 589/2000, 0.8 task/s, elapsed: 758s, ETA:  1815s[  ] 590/2000, 0.8 task/s, elapsed: 759s, ETA:  1814s[  ] 591/2000, 0.8 task/s, elapsed: 760s, ETA:  1812s[  ] 592/2000, 0.8 task/s, elapsed: 761s, ETA:  1811s[  ] 593/2000, 0.8 task/s, elapsed: 763s, ETA:  1809s[  ] 594/2000, 0.8 task/s, elapsed: 764s, ETA:  1808s[  ] 595/2000, 0.8 task/s, elapsed: 765s, ETA:  1807s[  ] 596/2000, 0.8 task/s, elapsed: 767s, ETA:  1806s[  ] 597/2000, 0.8 task/s, elapsed: 768s, ETA:  1804s[  ] 598/2000, 0.8 task/s, elapsed: 769s, ETA:  1802s[  ] 599/2000, 0.8 task/s, elapsed: 770s, ETA:  1801s[  ] 600/2000, 0.8 task/s, elapsed: 771s, ETA:  1800s[  ] 601/2000, 0.8 task/s, elapsed: 773s, ETA:  1799s[  ] 602/2000, 0.8 task/s, elapsed: 774s, ETA:  1797s[  ] 603/2000, 0.8 task/s, elapsed: 775s, ETA:  1795s[  ] 604/2000, 0.8 task/s, elapsed: 776s, ETA:  1794s[  ] 605/2000, 0.8 task/s, elapsed: 777s, ETA:  1792s[  ] 606/2000, 0.8 task/s, elapsed: 778s, ETA:  1791s[  ] 607/2000, 0.8 task/s, elapsed: 780s, ETA:  1789s[  ] 608/2000, 0.8 task/s, elapsed: 781s, ETA:  1788s[  ] 609/2000, 0.8 task/s, elapsed: 782s, ETA:  1786s[  ] 610/2000, 0.8 task/s, elapsed: 783s, ETA:  1784s[  ] 611/2000, 0.8 task/s, elapsed: 785s, ETA:  1783s[  ] 612/2000, 0.8 task/s, elapsed: 786s, ETA:  1783s[  ] 613/2000, 0.8 task/s, elapsed: 788s, ETA:  1782s[  ] 614/2000, 0.8 task/s, elapsed: 789s, ETA:  1781s[  ] 615/2000, 0.8 task/s, elapsed: 790s, ETA:  1780s[  ] 616/2000, 0.8 task/s, elapsed: 792s, ETA:  1779s[  ] 617/2000, 0.8 task/s, elapsed: 793s, ETA:  1777s[  ] 618/2000, 0.8 task/s, elapsed: 794s, ETA:  1776s[  ] 619/2000, 0.8 task/s, elapsed: 795s, ETA:  1774s[  ] 620/2000, 0.8 task/s, elapsed: 796s, ETA:  1772s[  ] 621/2000, 0.8 task/s, elapsed: 797s, ETA:  1771s[  ] 622/2000, 0.8 task/s, elapsed: 799s, ETA:  1769s[  ] 623/2000, 0.8 task/s, elapsed: 800s, ETA:  1768s[  ] 624/2000, 0.8 task/s, elapsed: 801s, ETA:  1766s[  ] 625/2000, 0.8 task/s, elapsed: 802s, ETA:  1764s[  ] 626/2000, 0.8 task/s, elapsed: 803s, ETA:  1762s[  ] 627/2000, 0.8 task/s, elapsed: 804s, ETA:  1761s[  ] 628/2000, 0.8 task/s, elapsed: 805s, ETA:  1760s[  ] 629/2000, 0.8 task/s, elapsed: 806s, ETA:  1758s[  ] 630/2000, 0.8 task/s, elapsed: 807s, ETA:  1756s[  ] 631/2000, 0.8 task/s, elapsed: 809s, ETA:  1754s[  ] 632/2000, 0.8 task/s, elapsed: 810s, ETA:  1753s[  ] 633/2000, 0.8 task/s, elapsed: 811s, ETA:  1751s[  ] 634/2000, 0.8 task/s, elapsed: 812s, ETA:  1750s[  ] 635/2000, 0.8 task/s, elapsed: 813s, ETA:  1748s[  ] 636/2000, 0.8 task/s, elapsed: 815s, ETA:  1747s[  ] 637/2000, 0.8 task/s, elapsed: 816s, ETA:  1745s[  ] 638/2000, 0.8 task/s, elapsed: 817s, ETA:  1744s[  ] 639/2000, 0.8 task/s, elapsed: 818s, ETA:  1743s[  ] 640/2000, 0.8 task/s, elapsed: 820s, ETA:  1742s[  ] 641/2000, 0.8 task/s, elapsed: 823s, ETA:  1745s[  ] 642/2000, 0.8 task/s, elapsed: 824s, ETA:  1743s[  ] 643/2000, 0.8 task/s, elapsed: 825s, ETA:  1741s[  ] 644/2000, 0.8 task/s, elapsed: 827s, ETA:  1741s[  ] 645/2000, 0.8 task/s, elapsed: 829s, ETA:  1741s[  ] 646/2000, 0.8 task/s, elapsed: 830s, ETA:  1739s[  ] 647/2000, 0.8 task/s, elapsed: 831s, ETA:  1738s[  ] 648/2000, 0.8 task/s, elapsed: 832s, ETA:  1737s[  ] 649/2000, 0.8 task/s, elapsed: 834s, ETA:  1735s[  ] 650/2000, 0.8 task/s, elapsed: 835s, ETA:  1734s[  ] 651/2000, 0.8 task/s, elapsed: 836s, ETA:  1732s[  ] 652/2000, 0.8 task/s, elapsed: 837s, ETA:  1731s[  ] 653/2000, 0.8 task/s, elapsed: 839s, ETA:  1730s[  ] 654/2000, 0.8 task/s, elapsed: 840s, ETA:  1728s[  ] 655/2000, 0.8 task/s, elapsed: 841s, ETA:  1728s[  ] 656/2000, 0.8 task/s, elapsed: 842s, ETA:  1726s[  ] 657/2000, 0.8 task/s, elapsed: 844s, ETA:  1725s[  ] 658/2000, 0.8 task/s, elapsed: 846s, ETA:  1725s[  ] 659/2000, 0.8 task/s, elapsed: 847s, ETA:  1724s[  ] 660/2000, 0.8 task/s, elapsed: 848s, ETA:  1722s[  ] 661/2000, 0.8 task/s, elapsed: 850s, ETA:  1721s[  ] 662/2000, 0.8 task/s, elapsed: 851s, ETA:  1720s[  ] 663/2000, 0.8 task/s, elapsed: 852s, ETA:  1718s[  ] 664/2000, 0.8 task/s, elapsed: 853s, ETA:  1717s[  ] 665/2000, 0.8 task/s, elapsed: 854s, ETA:  1715s[  ] 666/2000, 0.8 task/s, elapsed: 855s, ETA:  1713s[  ] 667/2000, 0.8 task/s, elapsed: 857s, ETA:  1712s[  ] 668/2000, 0.8 task/s, elapsed: 858s, ETA:  1711s[  ] 669/2000, 0.8 task/s, elapsed: 859s, ETA:  1709s[  ] 670/2000, 0.8 task/s, elapsed: 860s, ETA:  1708s[  ] 671/2000, 0.8 task/s, elapsed: 862s, ETA:  1707s[  ] 672/2000, 0.8 task/s, elapsed: 863s, ETA:  1706s[  ] 673/2000, 0.8 task/s, elapsed: 865s, ETA:  1705s[  ] 674/2000, 0.8 task/s, elapsed: 866s, ETA:  1703s[  ] 675/2000, 0.8 task/s, elapsed: 867s, ETA:  1702s[  ] 676/2000, 0.8 task/s, elapsed: 868s, ETA:  1700s[  ] 677/2000, 0.8 task/s, elapsed: 869s, ETA:  1698s[  ] 678/2000, 0.8 task/s, elapsed: 870s, ETA:  1697s[  ] 679/2000, 0.8 task/s, elapsed: 872s, ETA:  1696s[  ] 680/2000, 0.8 task/s, elapsed: 873s, ETA:  1694s[  ] 681/2000, 0.8 task/s, elapsed: 874s, ETA:  1692s[  ] 682/2000, 0.8 task/s, elapsed: 875s, ETA:  1691s[  ] 683/2000, 0.8 task/s, elapsed: 876s, ETA:  1689s[  ] 684/2000, 0.8 task/s, elapsed: 877s, ETA:  1687s[  ] 685/2000, 0.8 task/s, elapsed: 878s, ETA:  1686s[  ] 686/2000, 0.8 task/s, elapsed: 879s, ETA:  1684s[  ] 687/2000, 0.8 task/s, elapsed: 880s, ETA:  1683s[  ] 688/2000, 0.8 task/s, elapsed: 882s, ETA:  1681s[  ] 689/2000, 0.8 task/s, elapsed: 883s, ETA:  1679s[  ] 690/2000, 0.8 task/s, elapsed: 884s, ETA:  1678s[  ] 691/2000, 0.8 task/s, elapsed: 885s, ETA:  1676s[  ] 692/2000, 0.8 task/s, elapsed: 886s, ETA:  1675s[  ] 693/2000, 0.8 task/s, elapsed: 887s, ETA:  1673s[  ] 694/2000, 0.8 task/s, elapsed: 888s, ETA:  1671s[  ] 695/2000, 0.8 task/s, elapsed: 889s, ETA:  1670s[  ] 696/2000, 0.8 task/s, elapsed: 891s, ETA:  1669s[  ] 697/2000, 0.8 task/s, elapsed: 892s, ETA:  1667s[  ] 698/2000, 0.8 task/s, elapsed: 893s, ETA:  1666s[  ] 699/2000, 0.8 task/s, elapsed: 895s, ETA:  1665s[  ] 700/2000, 0.8 task/s, elapsed: 896s, ETA:  1663s[  ] 701/2000, 0.8 task/s, elapsed: 897s, ETA:  1662s[  ] 702/2000, 0.8 task/s, elapsed: 899s, ETA:  1661s[  ] 703/2000, 0.8 task/s, elapsed: 900s, ETA:  1660s[  ] 704/2000, 0.8 task/s, elapsed: 901s, ETA:  1659s[  ] 705/2000, 0.8 task/s, elapsed: 903s, ETA:  1658s[  ] 706/2000, 0.8 task/s, elapsed: 904s, ETA:  1656s[  ] 707/2000, 0.8 task/s, elapsed: 905s, ETA:  1655s[  ] 708/2000, 0.8 task/s, elapsed: 906s, ETA:  1653s[  ] 709/2000, 0.8 task/s, elapsed: 907s, ETA:  1652s[  ] 710/2000, 0.8 task/s, elapsed: 909s, ETA:  1651s[  ] 711/2000, 0.8 task/s, elapsed: 910s, ETA:  1650s[  ] 712/2000, 0.8 task/s, elapsed: 912s, ETA:  1649s[  ] 713/2000, 0.8 task/s, elapsed: 913s, ETA:  1648s[  ] 714/2000, 0.8 task/s, elapsed: 915s, ETA:  1647s[  ] 715/2000, 0.8 task/s, elapsed: 916s, ETA:  1646s[  ] 716/2000, 0.8 task/s, elapsed: 917s, ETA:  1644s[  ] 717/2000, 0.8 task/s, elapsed: 918s, ETA:  1643s[  ] 718/2000, 0.8 task/s, elapsed: 919s, ETA:  1641s[  ] 719/2000, 0.8 task/s, elapsed: 921s, ETA:  1640s[  ] 720/2000, 0.8 task/s, elapsed: 922s, ETA:  1639s[  ] 721/2000, 0.8 task/s, elapsed: 923s, ETA:  1638s[  ] 722/2000, 0.8 task/s, elapsed: 925s, ETA:  1637s[  ] 723/2000, 0.8 task/s, elapsed: 926s, ETA:  1635s[  ] 724/2000, 0.8 task/s, elapsed: 927s, ETA:  1634s[  ] 725/2000, 0.8 task/s, elapsed: 929s, ETA:  1633s[  ] 726/2000, 0.8 task/s, elapsed: 930s, ETA:  1632s[  ] 727/2000, 0.8 task/s, elapsed: 931s, ETA:  1630s[  ] 728/2000, 0.8 task/s, elapsed: 933s, ETA:  1629s[  ] 729/2000, 0.8 task/s, elapsed: 934s, ETA:  1629s[  ] 730/2000, 0.8 task/s, elapsed: 936s, ETA:  1628s[  ] 731/2000, 0.8 task/s, elapsed: 937s, ETA:  1626s[  ] 732/2000, 0.8 task/s, elapsed: 938s, ETA:  1625s[  ] 733/2000, 0.8 task/s, elapsed: 940s, ETA:  1624s[  ] 734/2000, 0.8 task/s, elapsed: 941s, ETA:  1623s[  ] 735/2000, 0.8 task/s, elapsed: 942s, ETA:  1621s[  ] 736/2000, 0.8 task/s, elapsed: 943s, ETA:  1620s[  ] 737/2000, 0.8 task/s, elapsed: 944s, ETA:  1618s[  ] 738/2000, 0.8 task/s, elapsed: 946s, ETA:  1617s[  ] 739/2000, 0.8 task/s, elapsed: 947s, ETA:  1616s[  ] 740/2000, 0.8 task/s, elapsed: 948s, ETA:  1615s[  ] 741/2000, 0.8 task/s, elapsed: 950s, ETA:  1613s[  ] 742/2000, 0.8 task/s, elapsed: 951s, ETA:  1612s[  ] 743/2000, 0.8 task/s, elapsed: 952s, ETA:  1610s[  ] 744/2000, 0.8 task/s, elapsed: 954s, ETA:  1610s[  ] 745/2000, 0.8 task/s, elapsed: 955s, ETA:  1608s[  ] 746/2000, 0.8 task/s, elapsed: 956s, ETA:  1607s[  ] 747/2000, 0.8 task/s, elapsed: 957s, ETA:  1606s[  ] 748/2000, 0.8 task/s, elapsed: 959s, ETA:  1605s[  ] 749/2000, 0.8 task/s, elapsed: 960s, ETA:  1604s[  ] 750/2000, 0.8 task/s, elapsed: 962s, ETA:  1603s[  ] 751/2000, 0.8 task/s, elapsed: 963s, ETA:  1601s[  ] 752/2000, 0.8 task/s, elapsed: 964s, ETA:  1600s[  ] 753/2000, 0.8 task/s, elapsed: 965s, ETA:  1599s[  ] 754/2000, 0.8 task/s, elapsed: 967s, ETA:  1597s[  ] 755/2000, 0.8 task/s, elapsed: 968s, ETA:  1596s[  ] 756/2000, 0.8 task/s, elapsed: 969s, ETA:  1595s[  ] 757/2000, 0.8 task/s, elapsed: 970s, ETA:  1593s[  ] 758/2000, 0.8 task/s, elapsed: 972s, ETA:  1593s[  ] 759/2000, 0.8 task/s, elapsed: 973s, ETA:  1591s[  ] 760/2000, 0.8 task/s, elapsed: 974s, ETA:  1590s[  ] 761/2000, 0.8 task/s, elapsed: 976s, ETA:  1588s[  ] 762/2000, 0.8 task/s, elapsed: 977s, ETA:  1587s[  ] 763/2000, 0.8 task/s, elapsed: 978s, ETA:  1586s[  ] 764/2000, 0.8 task/s, elapsed: 979s, ETA:  1584s[  ] 765/2000, 0.8 task/s, elapsed: 980s, ETA:  1583s[  ] 766/2000, 0.8 task/s, elapsed: 982s, ETA:  1582s[  ] 767/2000, 0.8 task/s, elapsed: 983s, ETA:  1580s[  ] 768/2000, 0.8 task/s, elapsed: 985s, ETA:  1580s[  ] 769/2000, 0.8 task/s, elapsed: 986s, ETA:  1579s[  ] 770/2000, 0.8 task/s, elapsed: 988s, ETA:  1578s[  ] 771/2000, 0.8 task/s, elapsed: 989s, ETA:  1576s[  ] 772/2000, 0.8 task/s, elapsed: 990s, ETA:  1575s[  ] 773/2000, 0.8 task/s, elapsed: 991s, ETA:  1574s[  ] 774/2000, 0.8 task/s, elapsed: 993s, ETA:  1572s[  ] 775/2000, 0.8 task/s, elapsed: 994s, ETA:  1571s[  ] 776/2000, 0.8 task/s, elapsed: 995s, ETA:  1570s[  ] 777/2000, 0.8 task/s, elapsed: 996s, ETA:  1568s[  ] 778/2000, 0.8 task/s, elapsed: 998s, ETA:  1567s[  ] 779/2000, 0.8 task/s, elapsed: 999s, ETA:  1566s[  ] 780/2000, 0.8 task/s, elapsed: 1000s, ETA:  1565s[  ] 781/2000, 0.8 task/s, elapsed: 1002s, ETA:  1563s[  ] 782/2000, 0.8 task/s, elapsed: 1003s, ETA:  1562s[  ] 783/2000, 0.8 task/s, elapsed: 1004s, ETA:  1560s[  ] 784/2000, 0.8 task/s, elapsed: 1005s, ETA:  1559s[  ] 785/2000, 0.8 task/s, elapsed: 1006s, ETA:  1558s[  ] 786/2000, 0.8 task/s, elapsed: 1008s, ETA:  1556s[  ] 787/2000, 0.8 task/s, elapsed: 1009s, ETA:  1555s[  ] 788/2000, 0.8 task/s, elapsed: 1010s, ETA:  1554s[  ] 789/2000, 0.8 task/s, elapsed: 1012s, ETA:  1554s[  ] 790/2000, 0.8 task/s, elapsed: 1013s, ETA:  1552s[  ] 791/2000, 0.8 task/s, elapsed: 1015s, ETA:  1551s[  ] 792/2000, 0.8 task/s, elapsed: 1016s, ETA:  1549s[  ] 793/2000, 0.8 task/s, elapsed: 1017s, ETA:  1548s[  ] 794/2000, 0.8 task/s, elapsed: 1018s, ETA:  1546s[  ] 795/2000, 0.8 task/s, elapsed: 1019s, ETA:  1545s[  ] 796/2000, 0.8 task/s, elapsed: 1020s, ETA:  1543s[  ] 797/2000, 0.8 task/s, elapsed: 1021s, ETA:  1542s[  ] 798/2000, 0.8 task/s, elapsed: 1022s, ETA:  1540s[  ] 799/2000, 0.8 task/s, elapsed: 1024s, ETA:  1539s[  ] 800/2000, 0.8 task/s, elapsed: 1025s, ETA:  1537s[  ] 801/2000, 0.8 task/s, elapsed: 1026s, ETA:  1535s[  ] 802/2000, 0.8 task/s, elapsed: 1027s, ETA:  1534s[  ] 803/2000, 0.8 task/s, elapsed: 1028s, ETA:  1532s[  ] 804/2000, 0.8 task/s, elapsed: 1029s, ETA:  1531s[  ] 805/2000, 0.8 task/s, elapsed: 1030s, ETA:  1530s[  ] 806/2000, 0.8 task/s, elapsed: 1032s, ETA:  1529s[  ] 807/2000, 0.8 task/s, elapsed: 1033s, ETA:  1527s[  ] 808/2000, 0.8 task/s, elapsed: 1035s, ETA:  1526s[  ] 809/2000, 0.8 task/s, elapsed: 1037s, ETA:  1526s[  ] 810/2000, 0.8 task/s, elapsed: 1038s, ETA:  1525s[  ] 811/2000, 0.8 task/s, elapsed: 1039s, ETA:  1523s[  ] 812/2000, 0.8 task/s, elapsed: 1040s, ETA:  1522s[  ] 813/2000, 0.8 task/s, elapsed: 1041s, ETA:  1521s[  ] 814/2000, 0.8 task/s, elapsed: 1043s, ETA:  1520s[  ] 815/2000, 0.8 task/s, elapsed: 1044s, ETA:  1518s[  ] 816/2000, 0.8 task/s, elapsed: 1045s, ETA:  1517s[  ] 817/2000, 0.8 task/s, elapsed: 1047s, ETA:  1516s[  ] 818/2000, 0.8 task/s, elapsed: 1048s, ETA:  1514s[  ] 819/2000, 0.8 task/s, elapsed: 1049s, ETA:  1513s[  ] 820/2000, 0.8 task/s, elapsed: 1050s, ETA:  1511s[  ] 821/2000, 0.8 task/s, elapsed: 1051s, ETA:  1510s[  ] 822/2000, 0.8 task/s, elapsed: 1052s, ETA:  1508s[  ] 823/2000, 0.8 task/s, elapsed: 1053s, ETA:  1506s[  ] 824/2000, 0.8 task/s, elapsed: 1054s, ETA:  1505s[  ] 825/2000, 0.8 task/s, elapsed: 1056s, ETA:  1503s[  ] 826/2000, 0.8 task/s, elapsed: 1057s, ETA:  1502s[  ] 827/2000, 0.8 task/s, elapsed: 1058s, ETA:  1501s[  ] 828/2000, 0.8 task/s, elapsed: 1060s, ETA:  1500s[  ] 829/2000, 0.8 task/s, elapsed: 1061s, ETA:  1499s[  ] 830/2000, 0.8 task/s, elapsed: 1062s, ETA:  1497s[  ] 831/2000, 0.8 task/s, elapsed: 1063s, ETA:  1496s[  ] 832/2000, 0.8 task/s, elapsed: 1064s, ETA:  1494s[  ] 833/2000, 0.8 task/s, elapsed: 1065s, ETA:  1492s[  ] 834/2000, 0.8 task/s, elapsed: 1066s, ETA:  1491s[  ] 835/2000, 0.8 task/s, elapsed: 1067s, ETA:  1489s[  ] 836/2000, 0.8 task/s, elapsed: 1069s, ETA:  1488s[  ] 837/2000, 0.8 task/s, elapsed: 1070s, ETA:  1487s[  ] 838/2000, 0.8 task/s, elapsed: 1071s, ETA:  1485s[  ] 839/2000, 0.8 task/s, elapsed: 1072s, ETA:  1484s[  ] 840/2000, 0.8 task/s, elapsed: 1073s, ETA:  1482s[  ] 841/2000, 0.8 task/s, elapsed: 1074s, ETA:  1481s[  ] 842/2000, 0.8 task/s, elapsed: 1076s, ETA:  1479s[  ] 843/2000, 0.8 task/s, elapsed: 1077s, ETA:  1478s[  ] 844/2000, 0.8 task/s, elapsed: 1078s, ETA:  1477s[  ] 845/2000, 0.8 task/s, elapsed: 1080s, ETA:  1476s[  ] 846/2000, 0.8 task/s, elapsed: 1081s, ETA:  1475s[  ] 847/2000, 0.8 task/s, elapsed: 1082s, ETA:  1473s[  ] 848/2000, 0.8 task/s, elapsed: 1083s, ETA:  1472s[  ] 849/2000, 0.8 task/s, elapsed: 1085s, ETA:  1471s[  ] 850/2000, 0.8 task/s, elapsed: 1086s, ETA:  1469s[  ] 851/2000, 0.8 task/s, elapsed: 1087s, ETA:  1468s[  ] 852/2000, 0.8 task/s, elapsed: 1088s, ETA:  1466s[  ] 853/2000, 0.8 task/s, elapsed: 1089s, ETA:  1465s[  ] 854/2000, 0.8 task/s, elapsed: 1091s, ETA:  1463s[  ] 855/2000, 0.8 task/s, elapsed: 1092s, ETA:  1462s[  ] 856/2000, 0.8 task/s, elapsed: 1093s, ETA:  1460s[  ] 857/2000, 0.8 task/s, elapsed: 1094s, ETA:  1459s[  ] 858/2000, 0.8 task/s, elapsed: 1095s, ETA:  1457s[  ] 859/2000, 0.8 task/s, elapsed: 1097s, ETA:  1457s[  ] 860/2000, 0.8 task/s, elapsed: 1098s, ETA:  1455s[  ] 861/2000, 0.8 task/s, elapsed: 1099s, ETA:  1454s[  ] 862/2000, 0.8 task/s, elapsed: 1100s, ETA:  1452s[  ] 863/2000, 0.8 task/s, elapsed: 1101s, ETA:  1451s[  ] 864/2000, 0.8 task/s, elapsed: 1102s, ETA:  1449s[  ] 865/2000, 0.8 task/s, elapsed: 1104s, ETA:  1448s[  ] 866/2000, 0.8 task/s, elapsed: 1105s, ETA:  1446s[  ] 867/2000, 0.8 task/s, elapsed: 1106s, ETA:  1445s[  ] 868/2000, 0.8 task/s, elapsed: 1107s, ETA:  1444s[  ] 869/2000, 0.8 task/s, elapsed: 1108s, ETA:  1442s[  ] 870/2000, 0.8 task/s, elapsed: 1109s, ETA:  1440s[  ] 871/2000, 0.8 task/s, elapsed: 1111s, ETA:  1440s[  ] 872/2000, 0.8 task/s, elapsed: 1112s, ETA:  1438s[  ] 873/2000, 0.8 task/s, elapsed: 1113s, ETA:  1436s[  ] 874/2000, 0.8 task/s, elapsed: 1114s, ETA:  1435s[  ] 875/2000, 0.8 task/s, elapsed: 1115s, ETA:  1433s[  ] 876/2000, 0.8 task/s, elapsed: 1116s, ETA:  1432s[  ] 877/2000, 0.8 task/s, elapsed: 1117s, ETA:  1430s[  ] 878/2000, 0.8 task/s, elapsed: 1118s, ETA:  1429s[  ] 879/2000, 0.8 task/s, elapsed: 1119s, ETA:  1427s[  ] 880/2000, 0.8 task/s, elapsed: 1120s, ETA:  1426s[  ] 881/2000, 0.8 task/s, elapsed: 1121s, ETA:  1424s[  ] 882/2000, 0.8 task/s, elapsed: 1122s, ETA:  1423s[  ] 883/2000, 0.8 task/s, elapsed: 1123s, ETA:  1421s[  ] 884/2000, 0.8 task/s, elapsed: 1124s, ETA:  1420s[  ] 885/2000, 0.8 task/s, elapsed: 1126s, ETA:  1418s[  ] 886/2000, 0.8 task/s, elapsed: 1127s, ETA:  1417s[  ] 887/2000, 0.8 task/s, elapsed: 1128s, ETA:  1415s[  ] 888/2000, 0.8 task/s, elapsed: 1129s, ETA:  1414s[  ] 889/2000, 0.8 task/s, elapsed: 1130s, ETA:  1412s[  ] 890/2000, 0.8 task/s, elapsed: 1132s, ETA:  1411s[  ] 891/2000, 0.8 task/s, elapsed: 1133s, ETA:  1410s[  ] 892/2000, 0.8 task/s, elapsed: 1134s, ETA:  1409s[  ] 893/2000, 0.8 task/s, elapsed: 1135s, ETA:  1407s[  ] 894/2000, 0.8 task/s, elapsed: 1137s, ETA:  1407s[  ] 895/2000, 0.8 task/s, elapsed: 1138s, ETA:  1405s[  ] 896/2000, 0.8 task/s, elapsed: 1139s, ETA:  1404s[  ] 897/2000, 0.8 task/s, elapsed: 1141s, ETA:  1403s[  ] 898/2000, 0.8 task/s, elapsed: 1142s, ETA:  1402s[  ] 899/2000, 0.8 task/s, elapsed: 1143s, ETA:  1400s[  ] 900/2000, 0.8 task/s, elapsed: 1144s, ETA:  1399s[  ] 901/2000, 0.8 task/s, elapsed: 1146s, ETA:  1398s[  ] 902/2000, 0.8 task/s, elapsed: 1147s, ETA:  1396s[  ] 903/2000, 0.8 task/s, elapsed: 1149s, ETA:  1395s[  ] 904/2000, 0.8 task/s, elapsed: 1150s, ETA:  1394s[  ] 905/2000, 0.8 task/s, elapsed: 1152s, ETA:  1394s[  ] 906/2000, 0.8 task/s, elapsed: 1153s, ETA:  1393s[  ] 907/2000, 0.8 task/s, elapsed: 1155s, ETA:  1392s[  ] 908/2000, 0.8 task/s, elapsed: 1156s, ETA:  1391s[  ] 909/2000, 0.8 task/s, elapsed: 1158s, ETA:  1390s[  ] 910/2000, 0.8 task/s, elapsed: 1159s, ETA:  1389s[  ] 911/2000, 0.8 task/s, elapsed: 1161s, ETA:  1388s[  ] 912/2000, 0.8 task/s, elapsed: 1162s, ETA:  1386s[  ] 913/2000, 0.8 task/s, elapsed: 1163s, ETA:  1385s[  ] 914/2000, 0.8 task/s, elapsed: 1165s, ETA:  1384s[  ] 915/2000, 0.8 task/s, elapsed: 1166s, ETA:  1382s[  ] 916/2000, 0.8 task/s, elapsed: 1167s, ETA:  1381s[  ] 917/2000, 0.8 task/s, elapsed: 1169s, ETA:  1380s[  ] 918/2000, 0.8 task/s, elapsed: 1170s, ETA:  1379s[  ] 919/2000, 0.8 task/s, elapsed: 1171s, ETA:  1378s[  ] 920/2000, 0.8 task/s, elapsed: 1172s, ETA:  1376s[  ] 921/2000, 0.8 task/s, elapsed: 1174s, ETA:  1375s[  ] 922/2000, 0.8 task/s, elapsed: 1175s, ETA:  1374s[  ] 923/2000, 0.8 task/s, elapsed: 1177s, ETA:  1373s[  ] 924/2000, 0.8 task/s, elapsed: 1178s, ETA:  1372s[  ] 925/2000, 0.8 task/s, elapsed: 1179s, ETA:  1371s[  ] 926/2000, 0.8 task/s, elapsed: 1181s, ETA:  1369s[  ] 927/2000, 0.8 task/s, elapsed: 1182s, ETA:  1368s[  ] 928/2000, 0.8 task/s, elapsed: 1183s, ETA:  1367s[  ] 929/2000, 0.8 task/s, elapsed: 1184s, ETA:  1365s[  ] 930/2000, 0.8 task/s, elapsed: 1185s, ETA:  1364s[  ] 931/2000, 0.8 task/s, elapsed: 1187s, ETA:  1363s[  ] 932/2000, 0.8 task/s, elapsed: 1188s, ETA:  1361s[  ] 933/2000, 0.8 task/s, elapsed: 1189s, ETA:  1360s[  ] 934/2000, 0.8 task/s, elapsed: 1190s, ETA:  1359s[  ] 935/2000, 0.8 task/s, elapsed: 1192s, ETA:  1357s[  ] 936/2000, 0.8 task/s, elapsed: 1193s, ETA:  1356s[  ] 937/2000, 0.8 task/s, elapsed: 1194s, ETA:  1355s[  ] 938/2000, 0.8 task/s, elapsed: 1195s, ETA:  1353s[  ] 939/2000, 0.8 task/s, elapsed: 1196s, ETA:  1352s[  ] 940/2000, 0.8 task/s, elapsed: 1197s, ETA:  1350s[  ] 941/2000, 0.8 task/s, elapsed: 1199s, ETA:  1349s[  ] 942/2000, 0.8 task/s, elapsed: 1200s, ETA:  1348s[  ] 943/2000, 0.8 task/s, elapsed: 1201s, ETA:  1346s[  ] 944/2000, 0.8 task/s, elapsed: 1202s, ETA:  1345s[  ] 945/2000, 0.8 task/s, elapsed: 1204s, ETA:  1344s[  ] 946/2000, 0.8 task/s, elapsed: 1206s, ETA:  1343s[  ] 947/2000, 0.8 task/s, elapsed: 1207s, ETA:  1342s[  ] 948/2000, 0.8 task/s, elapsed: 1208s, ETA:  1340s[  ] 949/2000, 0.8 task/s, elapsed: 1209s, ETA:  1339s[  ] 950/2000, 0.8 task/s, elapsed: 1210s, ETA:  1338s[  ] 951/2000, 0.8 task/s, elapsed: 1211s, ETA:  1336s[  ] 952/2000, 0.8 task/s, elapsed: 1213s, ETA:  1335s[  ] 953/2000, 0.8 task/s, elapsed: 1214s, ETA:  1333s[  ] 954/2000, 0.8 task/s, elapsed: 1215s, ETA:  1332s[  ] 955/2000, 0.8 task/s, elapsed: 1216s, ETA:  1331s[  ] 956/2000, 0.8 task/s, elapsed: 1217s, ETA:  1329s[  ] 957/2000, 0.8 task/s, elapsed: 1219s, ETA:  1328s[  ] 958/2000, 0.8 task/s, elapsed: 1220s, ETA:  1327s[  ] 959/2000, 0.8 task/s, elapsed: 1221s, ETA:  1326s[  ] 960/2000, 0.8 task/s, elapsed: 1223s, ETA:  1325s[  ] 961/2000, 0.8 task/s, elapsed: 1224s, ETA:  1324s[  ] 962/2000, 0.8 task/s, elapsed: 1225s, ETA:  1322s[  ] 963/2000, 0.8 task/s, elapsed: 1227s, ETA:  1321s[  ] 964/2000, 0.8 task/s, elapsed: 1228s, ETA:  1320s[  ] 965/2000, 0.8 task/s, elapsed: 1229s, ETA:  1318s[  ] 966/2000, 0.8 task/s, elapsed: 1230s, ETA:  1317s[  ] 967/2000, 0.8 task/s, elapsed: 1232s, ETA:  1316s[  ] 968/2000, 0.8 task/s, elapsed: 1233s, ETA:  1314s[  ] 969/2000, 0.8 task/s, elapsed: 1235s, ETA:  1314s[  ] 970/2000, 0.8 task/s, elapsed: 1236s, ETA:  1312s[  ] 971/2000, 0.8 task/s, elapsed: 1237s, ETA:  1311s[  ] 972/2000, 0.8 task/s, elapsed: 1238s, ETA:  1310s[  ] 973/2000, 0.8 task/s, elapsed: 1239s, ETA:  1308s[  ] 974/2000, 0.8 task/s, elapsed: 1241s, ETA:  1307s[  ] 975/2000, 0.8 task/s, elapsed: 1242s, ETA:  1306s[  ] 976/2000, 0.8 task/s, elapsed: 1244s, ETA:  1305s[  ] 977/2000, 0.8 task/s, elapsed: 1245s, ETA:  1303s[  ] 978/2000, 0.8 task/s, elapsed: 1246s, ETA:  1302s[  ] 979/2000, 0.8 task/s, elapsed: 1247s, ETA:  1300s[  ] 980/2000, 0.8 task/s, elapsed: 1248s, ETA:  1299s[  ] 981/2000, 0.8 task/s, elapsed: 1249s, ETA:  1298s[  ] 982/2000, 0.8 task/s, elapsed: 1251s, ETA:  1297s[  ] 983/2000, 0.8 task/s, elapsed: 1252s, ETA:  1295s[  ] 984/2000, 0.8 task/s, elapsed: 1253s, ETA:  1294s[  ] 985/2000, 0.8 task/s, elapsed: 1255s, ETA:  1293s[  ] 986/2000, 0.8 task/s, elapsed: 1256s, ETA:  1292s[  ] 987/2000, 0.8 task/s, elapsed: 1257s, ETA:  1290s[  ] 988/2000, 0.8 task/s, elapsed: 1258s, ETA:  1289s[  ] 989/2000, 0.8 task/s, elapsed: 1259s, ETA:  1287s[  ] 990/2000, 0.8 task/s, elapsed: 1261s, ETA:  1286s[  ] 991/2000, 0.8 task/s, elapsed: 1262s, ETA:  1285s[  ] 992/2000, 0.8 task/s, elapsed: 1263s, ETA:  1283s[  ] 993/2000, 0.8 task/s, elapsed: 1264s, ETA:  1282s[  ] 994/2000, 0.8 task/s, elapsed: 1265s, ETA:  1281s[  ] 995/2000, 0.8 task/s, elapsed: 1266s, ETA:  1279s[  ] 996/2000, 0.8 task/s, elapsed: 1268s, ETA:  1278s[  ] 997/2000, 0.8 task/s, elapsed: 1269s, ETA:  1276s[  ] 998/2000, 0.8 task/s, elapsed: 1270s, ETA:  1275s[  ] 999/2000, 0.8 task/s, elapsed: 1272s, ETA:  1274s[> ] 1000/2000, 0.8 task/s, elapsed: 1273s, ETA:  1273s[> ] 1001/2000, 0.8 task/s, elapsed: 1274s, ETA:  1271s[> ] 1002/2000, 0.8 task/s, elapsed: 1275s, ETA:  1270s[> ] 1003/2000, 0.8 task/s, elapsed: 1276s, ETA:  1269s[> ] 1004/2000, 0.8 task/s, elapsed: 1277s, ETA:  1267s[> ] 1005/2000, 0.8 task/s, elapsed: 1279s, ETA:  1266s[> ] 1006/2000, 0.8 task/s, elapsed: 1280s, ETA:  1264s[> ] 1007/2000, 0.8 task/s, elapsed: 1281s, ETA:  1263s[> ] 1008/2000, 0.8 task/s, elapsed: 1282s, ETA:  1262s[> ] 1009/2000, 0.8 task/s, elapsed: 1284s, ETA:  1261s[> ] 1010/2000, 0.8 task/s, elapsed: 1285s, ETA:  1260s[> ] 1011/2000, 0.8 task/s, elapsed: 1287s, ETA:  1259s[> ] 1012/2000, 0.8 task/s, elapsed: 1288s, ETA:  1257s[> ] 1013/2000, 0.8 task/s, elapsed: 1289s, ETA:  1256s[> ] 1014/2000, 0.8 task/s, elapsed: 1290s, ETA:  1255s[> ] 1015/2000, 0.8 task/s, elapsed: 1292s, ETA:  1254s[> ] 1016/2000, 0.8 task/s, elapsed: 1293s, ETA:  1252s[> ] 1017/2000, 0.8 task/s, elapsed: 1294s, ETA:  1251s[> ] 1018/2000, 0.8 task/s, elapsed: 1295s, ETA:  1249s[> ] 1019/2000, 0.8 task/s, elapsed: 1297s, ETA:  1248s[> ] 1020/2000, 0.8 task/s, elapsed: 1298s, ETA:  1248s[> ] 1021/2000, 0.8 task/s, elapsed: 1300s, ETA:  1246s[> ] 1022/2000, 0.8 task/s, elapsed: 1301s, ETA:  1245s[> ] 1023/2000, 0.8 task/s, elapsed: 1302s, ETA:  1244s[> ] 1024/2000, 0.8 task/s, elapsed: 1304s, ETA:  1243s[> ] 1025/2000, 0.8 task/s, elapsed: 1305s, ETA:  1242s[> ] 1026/2000, 0.8 task/s, elapsed: 1306s, ETA:  1240s[> ] 1027/2000, 0.8 task/s, elapsed: 1308s, ETA:  1239s[> ] 1028/2000, 0.8 task/s, elapsed: 1309s, ETA:  1238s[> ] 1029/2000, 0.8 task/s, elapsed: 1310s, ETA:  1236s[> ] 1030/2000, 0.8 task/s, elapsed: 1312s, ETA:  1236s[> ] 1031/2000, 0.8 task/s, elapsed: 1314s, ETA:  1235s[> ] 1032/2000, 0.8 task/s, elapsed: 1315s, ETA:  1233s[> ] 1033/2000, 0.8 task/s, elapsed: 1316s, ETA:  1232s[> ] 1034/2000, 0.8 task/s, elapsed: 1317s, ETA:  1230s[> ] 1035/2000, 0.8 task/s, elapsed: 1318s, ETA:  1229s[> ] 1036/2000, 0.8 task/s, elapsed: 1320s, ETA:  1228s[> ] 1037/2000, 0.8 task/s, elapsed: 1321s, ETA:  1226s[> ] 1038/2000, 0.8 task/s, elapsed: 1322s, ETA:  1225s[> ] 1039/2000, 0.8 task/s, elapsed: 1323s, ETA:  1224s[> ] 1040/2000, 0.8 task/s, elapsed: 1325s, ETA:  1223s[> ] 1041/2000, 0.8 task/s, elapsed: 1326s, ETA:  1221s[> ] 1042/2000, 0.8 task/s, elapsed: 1327s, ETA:  1220s[> ] 1043/2000, 0.8 task/s, elapsed: 1328s, ETA:  1218s[> ] 1044/2000, 0.8 task/s, elapsed: 1329s, ETA:  1217s[> ] 1045/2000, 0.8 task/s, elapsed: 1330s, ETA:  1216s[> ] 1046/2000, 0.8 task/s, elapsed: 1331s, ETA:  1214s[> ] 1047/2000, 0.8 task/s, elapsed: 1332s, ETA:  1213s[> ] 1048/2000, 0.8 task/s, elapsed: 1334s, ETA:  1212s[> ] 1049/2000, 0.8 task/s, elapsed: 1335s, ETA:  1210s[> ] 1050/2000, 0.8 task/s, elapsed: 1337s, ETA:  1209s[> ] 1051/2000, 0.8 task/s, elapsed: 1338s, ETA:  1208s[> ] 1052/2000, 0.8 task/s, elapsed: 1339s, ETA:  1206s[> ] 1053/2000, 0.8 task/s, elapsed: 1340s, ETA:  1205s[> ] 1054/2000, 0.8 task/s, elapsed: 1341s, ETA:  1204s[> ] 1055/2000, 0.8 task/s, elapsed: 1342s, ETA:  1202s[> ] 1056/2000, 0.8 task/s, elapsed: 1344s, ETA:  1201s[> ] 1057/2000, 0.8 task/s, elapsed: 1345s, ETA:  1200s[> ] 1058/2000, 0.8 task/s, elapsed: 1346s, ETA:  1198s[> ] 1059/2000, 0.8 task/s, elapsed: 1347s, ETA:  1197s[> ] 1060/2000, 0.8 task/s, elapsed: 1348s, ETA:  1195s[> ] 1061/2000, 0.8 task/s, elapsed: 1349s, ETA:  1194s[> ] 1062/2000, 0.8 task/s, elapsed: 1351s, ETA:  1193s[> ] 1063/2000, 0.8 task/s, elapsed: 1352s, ETA:  1191s[> ] 1064/2000, 0.8 task/s, elapsed: 1353s, ETA:  1190s[> ] 1065/2000, 0.8 task/s, elapsed: 1354s, ETA:  1189s[> ] 1066/2000, 0.8 task/s, elapsed: 1356s, ETA:  1188s[> ] 1067/2000, 0.8 task/s, elapsed: 1357s, ETA:  1187s[> ] 1068/2000, 0.8 task/s, elapsed: 1358s, ETA:  1185s[> ] 1069/2000, 0.8 task/s, elapsed: 1360s, ETA:  1184s[> ] 1070/2000, 0.8 task/s, elapsed: 1361s, ETA:  1183s[> ] 1071/2000, 0.8 task/s, elapsed: 1362s, ETA:  1182s[> ] 1072/2000, 0.8 task/s, elapsed: 1364s, ETA:  1181s[> ] 1073/2000, 0.8 task/s, elapsed: 1365s, ETA:  1180s[> ] 1074/2000, 0.8 task/s, elapsed: 1367s, ETA:  1178s[> ] 1075/2000, 0.8 task/s, elapsed: 1368s, ETA:  1177s[> ] 1076/2000, 0.8 task/s, elapsed: 1370s, ETA:  1176s[> ] 1077/2000, 0.8 task/s, elapsed: 1371s, ETA:  1175s[> ] 1078/2000, 0.8 task/s, elapsed: 1372s, ETA:  1173s[> ] 1079/2000, 0.8 task/s, elapsed: 1373s, ETA:  1172s[> ] 1080/2000, 0.8 task/s, elapsed: 1374s, ETA:  1171s[> ] 1081/2000, 0.8 task/s, elapsed: 1376s, ETA:  1169s[> ] 1082/2000, 0.8 task/s, elapsed: 1377s, ETA:  1168s[> ] 1083/2000, 0.8 task/s, elapsed: 1379s, ETA:  1167s[> ] 1084/2000, 0.8 task/s, elapsed: 1380s, ETA:  1166s[> ] 1085/2000, 0.8 task/s, elapsed: 1381s, ETA:  1165s[> ] 1086/2000, 0.8 task/s, elapsed: 1382s, ETA:  1163s[> ] 1087/2000, 0.8 task/s, elapsed: 1384s, ETA:  1162s[> ] 1088/2000, 0.8 task/s, elapsed: 1385s, ETA:  1161s[> ] 1089/2000, 0.8 task/s, elapsed: 1386s, ETA:  1159s[> ] 1090/2000, 0.8 task/s, elapsed: 1387s, ETA:  1158s[> ] 1091/2000, 0.8 task/s, elapsed: 1388s, ETA:  1157s[> ] 1092/2000, 0.8 task/s, elapsed: 1389s, ETA:  1155s[> ] 1093/2000, 0.8 task/s, elapsed: 1391s, ETA:  1154s[> ] 1094/2000, 0.8 task/s, elapsed: 1392s, ETA:  1153s[> ] 1095/2000, 0.8 task/s, elapsed: 1393s, ETA:  1152s[> ] 1096/2000, 0.8 task/s, elapsed: 1395s, ETA:  1150s[> ] 1097/2000, 0.8 task/s, elapsed: 1397s, ETA:  1150s[> ] 1098/2000, 0.8 task/s, elapsed: 1398s, ETA:  1149s[> ] 1099/2000, 0.8 task/s, elapsed: 1399s, ETA:  1147s[> ] 1100/2000, 0.8 task/s, elapsed: 1401s, ETA:  1146s[> ] 1101/2000, 0.8 task/s, elapsed: 1402s, ETA:  1145s[> ] 1102/2000, 0.8 task/s, elapsed: 1404s, ETA:  1144s[> ] 1103/2000, 0.8 task/s, elapsed: 1405s, ETA:  1143s[> ] 1104/2000, 0.8 task/s, elapsed: 1406s, ETA:  1141s[> ] 1105/2000, 0.8 task/s, elapsed: 1408s, ETA:  1140s[> ] 1106/2000, 0.8 task/s, elapsed: 1409s, ETA:  1139s[> ] 1107/2000, 0.8 task/s, elapsed: 1411s, ETA:  1138s[> ] 1108/2000, 0.8 task/s, elapsed: 1412s, ETA:  1137s[> ] 1109/2000, 0.8 task/s, elapsed: 1413s, ETA:  1136s[> ] 1110/2000, 0.8 task/s, elapsed: 1415s, ETA:  1134s[> ] 1111/2000, 0.8 task/s, elapsed: 1417s, ETA:  1134s[> ] 1112/2000, 0.8 task/s, elapsed: 1419s, ETA:  1134s[> ] 1113/2000, 0.8 task/s, elapsed: 1421s, ETA:  1132s[> ] 1114/2000, 0.8 task/s, elapsed: 1423s, ETA:  1132s[> ] 1115/2000, 0.8 task/s, elapsed: 1424s, ETA:  1131s[> ] 1116/2000, 0.8 task/s, elapsed: 1426s, ETA:  1130s[> ] 1117/2000, 0.8 task/s, elapsed: 1427s, ETA:  1128s[> ] 1118/2000, 0.8 task/s, elapsed: 1429s, ETA:  1127s[> ] 1119/2000, 0.8 task/s, elapsed: 1430s, ETA:  1126s[> ] 1120/2000, 0.8 task/s, elapsed: 1432s, ETA:  1125s[> ] 1121/2000, 0.8 task/s, elapsed: 1433s, ETA:  1124s[> ] 1122/2000, 0.8 task/s, elapsed: 1435s, ETA:  1123s[> ] 1123/2000, 0.8 task/s, elapsed: 1436s, ETA:  1121s[> ] 1124/2000, 0.8 task/s, elapsed: 1437s, ETA:  1120s[> ] 1125/2000, 0.8 task/s, elapsed: 1439s, ETA:  1119s[> ] 1126/2000, 0.8 task/s, elapsed: 1440s, ETA:  1118s[> ] 1127/2000, 0.8 task/s, elapsed: 1441s, ETA:  1116s[> ] 1128/2000, 0.8 task/s, elapsed: 1443s, ETA:  1115s[> ] 1129/2000, 0.8 task/s, elapsed: 1444s, ETA:  1114s[> ] 1130/2000, 0.8 task/s, elapsed: 1445s, ETA:  1113s[> ] 1131/2000, 0.8 task/s, elapsed: 1446s, ETA:  1111s[> ] 1132/2000, 0.8 task/s, elapsed: 1448s, ETA:  1110s[> ] 1133/2000, 0.8 task/s, elapsed: 1449s, ETA:  1109s[> ] 1134/2000, 0.8 task/s, elapsed: 1450s, ETA:  1107s[> ] 1135/2000, 0.8 task/s, elapsed: 1451s, ETA:  1106s[> ] 1136/2000, 0.8 task/s, elapsed: 1452s, ETA:  1105s[> ] 1137/2000, 0.8 task/s, elapsed: 1454s, ETA:  1104s[> ] 1138/2000, 0.8 task/s, elapsed: 1455s, ETA:  1102s[> ] 1139/2000, 0.8 task/s, elapsed: 1457s, ETA:  1101s[> ] 1140/2000, 0.8 task/s, elapsed: 1458s, ETA:  1100s[> ] 1141/2000, 0.8 task/s, elapsed: 1459s, ETA:  1098s[> ] 1142/2000, 0.8 task/s, elapsed: 1461s, ETA:  1097s[> ] 1143/2000, 0.8 task/s, elapsed: 1462s, ETA:  1096s[> ] 1144/2000, 0.8 task/s, elapsed: 1463s, ETA:  1095s[> ] 1145/2000, 0.8 task/s, elapsed: 1465s, ETA:  1094s[> ] 1146/2000, 0.8 task/s, elapsed: 1466s, ETA:  1092s[> ] 1147/2000, 0.8 task/s, elapsed: 1467s, ETA:  1091s[> ] 1148/2000, 0.8 task/s, elapsed: 1469s, ETA:  1090s[> ] 1149/2000, 0.8 task/s, elapsed: 1470s, ETA:  1089s[> ] 1150/2000, 0.8 task/s, elapsed: 1471s, ETA:  1087s[> ] 1151/2000, 0.8 task/s, elapsed: 1473s, ETA:  1086s[> ] 1152/2000, 0.8 task/s, elapsed: 1474s, ETA:  1085s[> ] 1153/2000, 0.8 task/s, elapsed: 1475s, ETA:  1084s[> ] 1154/2000, 0.8 task/s, elapsed: 1476s, ETA:  1082s[> ] 1155/2000, 0.8 task/s, elapsed: 1478s, ETA:  1081s[> ] 1156/2000, 0.8 task/s, elapsed: 1479s, ETA:  1080s[> ] 1157/2000, 0.8 task/s, elapsed: 1480s, ETA:  1078s[> ] 1158/2000, 0.8 task/s, elapsed: 1481s, ETA:  1077s[> ] 1159/2000, 0.8 task/s, elapsed: 1482s, ETA:  1076s[> ] 1160/2000, 0.8 task/s, elapsed: 1484s, ETA:  1074s[> ] 1161/2000, 0.8 task/s, elapsed: 1485s, ETA:  1073s[> ] 1162/2000, 0.8 task/s, elapsed: 1486s, ETA:  1072s[> ] 1163/2000, 0.8 task/s, elapsed: 1487s, ETA:  1070s[> ] 1164/2000, 0.8 task/s, elapsed: 1488s, ETA:  1069s[> ] 1165/2000, 0.8 task/s, elapsed: 1490s, ETA:  1068s[> ] 1166/2000, 0.8 task/s, elapsed: 1491s, ETA:  1067s[> ] 1167/2000, 0.8 task/s, elapsed: 1492s, ETA:  1065s[> ] 1168/2000, 0.8 task/s, elapsed: 1494s, ETA:  1064s[> ] 1169/2000, 0.8 task/s, elapsed: 1495s, ETA:  1063s[> ] 1170/2000, 0.8 task/s, elapsed: 1496s, ETA:  1061s[> ] 1171/2000, 0.8 task/s, elapsed: 1497s, ETA:  1060s[> ] 1172/2000, 0.8 task/s, elapsed: 1498s, ETA:  1059s[> ] 1173/2000, 0.8 task/s, elapsed: 1500s, ETA:  1057s[> ] 1174/2000, 0.8 task/s, elapsed: 1501s, ETA:  1056s[> ] 1175/2000, 0.8 task/s, elapsed: 1502s, ETA:  1055s[> ] 1176/2000, 0.8 task/s, elapsed: 1503s, ETA:  1053s[> ] 1177/2000, 0.8 task/s, elapsed: 1505s, ETA:  1052s[> ] 1178/2000, 0.8 task/s, elapsed: 1506s, ETA:  1051s[> ] 1179/2000, 0.8 task/s, elapsed: 1507s, ETA:  1050s[> ] 1180/2000, 0.8 task/s, elapsed: 1508s, ETA:  1048s[> ] 1181/2000, 0.8 task/s, elapsed: 1510s, ETA:  1047s[> ] 1182/2000, 0.8 task/s, elapsed: 1511s, ETA:  1046s[> ] 1183/2000, 0.8 task/s, elapsed: 1512s, ETA:  1044s[> ] 1184/2000, 0.8 task/s, elapsed: 1513s, ETA:  1043s[> ] 1185/2000, 0.8 task/s, elapsed: 1514s, ETA:  1042s[> ] 1186/2000, 0.8 task/s, elapsed: 1516s, ETA:  1040s[> ] 1187/2000, 0.8 task/s, elapsed: 1517s, ETA:  1039s[> ] 1188/2000, 0.8 task/s, elapsed: 1518s, ETA:  1038s[> ] 1189/2000, 0.8 task/s, elapsed: 1519s, ETA:  1036s[> ] 1190/2000, 0.8 task/s, elapsed: 1520s, ETA:  1035s[> ] 1191/2000, 0.8 task/s, elapsed: 1522s, ETA:  1034s[> ] 1192/2000, 0.8 task/s, elapsed: 1523s, ETA:  1032s[> ] 1193/2000, 0.8 task/s, elapsed: 1524s, ETA:  1031s[> ] 1194/2000, 0.8 task/s, elapsed: 1525s, ETA:  1029s[> ] 1195/2000, 0.8 task/s, elapsed: 1526s, ETA:  1028s[> ] 1196/2000, 0.8 task/s, elapsed: 1527s, ETA:  1027s[> ] 1197/2000, 0.8 task/s, elapsed: 1529s, ETA:  1025s[> ] 1198/2000, 0.8 task/s, elapsed: 1530s, ETA:  1024s[> ] 1199/2000, 0.8 task/s, elapsed: 1531s, ETA:  1023s[> ] 1200/2000, 0.8 task/s, elapsed: 1532s, ETA:  1022s[> ] 1201/2000, 0.8 task/s, elapsed: 1534s, ETA:  1020s[> ] 1202/2000, 0.8 task/s, elapsed: 1535s, ETA:  1019s[> ] 1203/2000, 0.8 task/s, elapsed: 1537s, ETA:  1018s[> ] 1204/2000, 0.8 task/s, elapsed: 1538s, ETA:  1017s[> ] 1205/2000, 0.8 task/s, elapsed: 1539s, ETA:  1016s[> ] 1206/2000, 0.8 task/s, elapsed: 1541s, ETA:  1015s[> ] 1207/2000, 0.8 task/s, elapsed: 1542s, ETA:  1013s[> ] 1208/2000, 0.8 task/s, elapsed: 1544s, ETA:  1012s[> ] 1209/2000, 0.8 task/s, elapsed: 1545s, ETA:  1011s[> ] 1210/2000, 0.8 task/s, elapsed: 1546s, ETA:  1009s[> ] 1211/2000, 0.8 task/s, elapsed: 1547s, ETA:  1008s[> ] 1212/2000, 0.8 task/s, elapsed: 1549s, ETA:  1007s[> ] 1213/2000, 0.8 task/s, elapsed: 1550s, ETA:  1006s[> ] 1214/2000, 0.8 task/s, elapsed: 1552s, ETA:  1005s[> ] 1215/2000, 0.8 task/s, elapsed: 1553s, ETA:  1003s[> ] 1216/2000, 0.8 task/s, elapsed: 1555s, ETA:  1002s[> ] 1217/2000, 0.8 task/s, elapsed: 1556s, ETA:  1001s[> ] 1218/2000, 0.8 task/s, elapsed: 1557s, ETA:  1000s[> ] 1219/2000, 0.8 task/s, elapsed: 1558s, ETA:   998s[> ] 1220/2000, 0.8 task/s, elapsed: 1559s, ETA:   997s[> ] 1221/2000, 0.8 task/s, elapsed: 1561s, ETA:   996s[> ] 1222/2000, 0.8 task/s, elapsed: 1562s, ETA:   994s[> ] 1223/2000, 0.8 task/s, elapsed: 1563s, ETA:   993s[> ] 1224/2000, 0.8 task/s, elapsed: 1564s, ETA:   992s[> ] 1225/2000, 0.8 task/s, elapsed: 1565s, ETA:   990s[> ] 1226/2000, 0.8 task/s, elapsed: 1567s, ETA:   989s[> ] 1227/2000, 0.8 task/s, elapsed: 1568s, ETA:   988s[> ] 1228/2000, 0.8 task/s, elapsed: 1569s, ETA:   986s[> ] 1229/2000, 0.8 task/s, elapsed: 1570s, ETA:   985s[> ] 1230/2000, 0.8 task/s, elapsed: 1572s, ETA:   984s[> ] 1231/2000, 0.8 task/s, elapsed: 1573s, ETA:   982s[> ] 1232/2000, 0.8 task/s, elapsed: 1574s, ETA:   981s[> ] 1233/2000, 0.8 task/s, elapsed: 1575s, ETA:   980s[> ] 1234/2000, 0.8 task/s, elapsed: 1577s, ETA:   979s[> ] 1235/2000, 0.8 task/s, elapsed: 1578s, ETA:   977s[> ] 1236/2000, 0.8 task/s, elapsed: 1579s, ETA:   976s[> ] 1237/2000, 0.8 task/s, elapsed: 1581s, ETA:   975s[> ] 1238/2000, 0.8 task/s, elapsed: 1582s, ETA:   974s[> ] 1239/2000, 0.8 task/s, elapsed: 1584s, ETA:   973s[> ] 1240/2000, 0.8 task/s, elapsed: 1585s, ETA:   971s[> ] 1241/2000, 0.8 task/s, elapsed: 1586s, ETA:   970s[> ] 1242/2000, 0.8 task/s, elapsed: 1587s, ETA:   969s[> ] 1243/2000, 0.8 task/s, elapsed: 1589s, ETA:   968s[> ] 1244/2000, 0.8 task/s, elapsed: 1590s, ETA:   966s[> ] 1245/2000, 0.8 task/s, elapsed: 1591s, ETA:   965s[> ] 1246/2000, 0.8 task/s, elapsed: 1593s, ETA:   964s[> ] 1247/2000, 0.8 task/s, elapsed: 1594s, ETA:   962s[> ] 1248/2000, 0.8 task/s, elapsed: 1595s, ETA:   961s[> ] 1249/2000, 0.8 task/s, elapsed: 1596s, ETA:   960s[> ] 1250/2000, 0.8 task/s, elapsed: 1598s, ETA:   959s[> ] 1251/2000, 0.8 task/s, elapsed: 1599s, ETA:   957s[> ] 1252/2000, 0.8 task/s, elapsed: 1600s, ETA:   956s[> ] 1253/2000, 0.8 task/s, elapsed: 1601s, ETA:   955s[> ] 1254/2000, 0.8 task/s, elapsed: 1603s, ETA:   953s[> ] 1255/2000, 0.8 task/s, elapsed: 1604s, ETA:   952s[> ] 1256/2000, 0.8 task/s, elapsed: 1606s, ETA:   951s[> ] 1257/2000, 0.8 task/s, elapsed: 1607s, ETA:   950s[> ] 1258/2000, 0.8 task/s, elapsed: 1609s, ETA:   949s[> ] 1259/2000, 0.8 task/s, elapsed: 1610s, ETA:   947s[> ] 1260/2000, 0.8 task/s, elapsed: 1611s, ETA:   946s[> ] 1261/2000, 0.8 task/s, elapsed: 1612s, ETA:   945s[> ] 1262/2000, 0.8 task/s, elapsed: 1614s, ETA:   944s[> ] 1263/2000, 0.8 task/s, elapsed: 1615s, ETA:   942s[> ] 1264/2000, 0.8 task/s, elapsed: 1617s, ETA:   941s[> ] 1265/2000, 0.8 task/s, elapsed: 1618s, ETA:   940s[> ] 1266/2000, 0.8 task/s, elapsed: 1619s, ETA:   939s[> ] 1267/2000, 0.8 task/s, elapsed: 1620s, ETA:   938s[> ] 1268/2000, 0.8 task/s, elapsed: 1622s, ETA:   936s[> ] 1269/2000, 0.8 task/s, elapsed: 1623s, ETA:   935s[> ] 1270/2000, 0.8 task/s, elapsed: 1624s, ETA:   934s[> ] 1271/2000, 0.8 task/s, elapsed: 1625s, ETA:   932s[> ] 1272/2000, 0.8 task/s, elapsed: 1627s, ETA:   931s[> ] 1273/2000, 0.8 task/s, elapsed: 1628s, ETA:   930s[> ] 1274/2000, 0.8 task/s, elapsed: 1629s, ETA:   928s[> ] 1275/2000, 0.8 task/s, elapsed: 1631s, ETA:   927s[> ] 1276/2000, 0.8 task/s, elapsed: 1632s, ETA:   926s[> ] 1277/2000, 0.8 task/s, elapsed: 1634s, ETA:   925s[> ] 1278/2000, 0.8 task/s, elapsed: 1635s, ETA:   924s[> ] 1279/2000, 0.8 task/s, elapsed: 1636s, ETA:   922s[> ] 1280/2000, 0.8 task/s, elapsed: 1638s, ETA:   921s[> ] 1281/2000, 0.8 task/s, elapsed: 1639s, ETA:   920s[> ] 1282/2000, 0.8 task/s, elapsed: 1640s, ETA:   919s[> ] 1283/2000, 0.8 task/s, elapsed: 1642s, ETA:   917s[> ] 1284/2000, 0.8 task/s, elapsed: 1643s, ETA:   916s[> ] 1285/2000, 0.8 task/s, elapsed: 1644s, ETA:   915s[> ] 1286/2000, 0.8 task/s, elapsed: 1645s, ETA:   914s[> ] 1287/2000, 0.8 task/s, elapsed: 1647s, ETA:   912s[> ] 1288/2000, 0.8 task/s, elapsed: 1648s, ETA:   911s[> ] 1289/2000, 0.8 task/s, elapsed: 1649s, ETA:   910s[> ] 1290/2000, 0.8 task/s, elapsed: 1650s, ETA:   908s[> ] 1291/2000, 0.8 task/s, elapsed: 1652s, ETA:   907s[> ] 1292/2000, 0.8 task/s, elapsed: 1653s, ETA:   906s[> ] 1293/2000, 0.8 task/s, elapsed: 1654s, ETA:   904s[> ] 1294/2000, 0.8 task/s, elapsed: 1655s, ETA:   903s[> ] 1295/2000, 0.8 task/s, elapsed: 1656s, ETA:   902s[> ] 1296/2000, 0.8 task/s, elapsed: 1658s, ETA:   901s[> ] 1297/2000, 0.8 task/s, elapsed: 1659s, ETA:   899s[> ] 1298/2000, 0.8 task/s, elapsed: 1660s, ETA:   898s[> ] 1299/2000, 0.8 task/s, elapsed: 1662s, ETA:   897s[> ] 1300/2000, 0.8 task/s, elapsed: 1663s, ETA:   895s[> ] 1301/2000, 0.8 task/s, elapsed: 1664s, ETA:   894s[> ] 1302/2000, 0.8 task/s, elapsed: 1666s, ETA:   893s[> ] 1303/2000, 0.8 task/s, elapsed: 1667s, ETA:   892s[> ] 1304/2000, 0.8 task/s, elapsed: 1668s, ETA:   890s[> ] 1305/2000, 0.8 task/s, elapsed: 1669s, ETA:   889s[> ] 1306/2000, 0.8 task/s, elapsed: 1670s, ETA:   888s[> ] 1307/2000, 0.8 task/s, elapsed: 1672s, ETA:   886s[> ] 1308/2000, 0.8 task/s, elapsed: 1673s, ETA:   885s[> ] 1309/2000, 0.8 task/s, elapsed: 1674s, ETA:   884s[> ] 1310/2000, 0.8 task/s, elapsed: 1675s, ETA:   882s[> ] 1311/2000, 0.8 task/s, elapsed: 1676s, ETA:   881s[> ] 1312/2000, 0.8 task/s, elapsed: 1677s, ETA:   880s[> ] 1313/2000, 0.8 task/s, elapsed: 1679s, ETA:   878s[> ] 1314/2000, 0.8 task/s, elapsed: 1680s, ETA:   877s[> ] 1315/2000, 0.8 task/s, elapsed: 1681s, ETA:   876s[> ] 1316/2000, 0.8 task/s, elapsed: 1682s, ETA:   874s[> ] 1317/2000, 0.8 task/s, elapsed: 1684s, ETA:   873s[> ] 1318/2000, 0.8 task/s, elapsed: 1685s, ETA:   872s[> ] 1319/2000, 0.8 task/s, elapsed: 1687s, ETA:   871s[> ] 1320/2000, 0.8 task/s, elapsed: 1688s, ETA:   870s[> ] 1321/2000, 0.8 task/s, elapsed: 1689s, ETA:   868s[> ] 1322/2000, 0.8 task/s, elapsed: 1690s, ETA:   867s[> ] 1323/2000, 0.8 task/s, elapsed: 1692s, ETA:   866s[> ] 1324/2000, 0.8 task/s, elapsed: 1693s, ETA:   864s[> ] 1325/2000, 0.8 task/s, elapsed: 1694s, ETA:   863s[> ] 1326/2000, 0.8 task/s, elapsed: 1695s, ETA:   862s[> ] 1327/2000, 0.8 task/s, elapsed: 1697s, ETA:   860s[> ] 1328/2000, 0.8 task/s, elapsed: 1698s, ETA:   859s[> ] 1329/2000, 0.8 task/s, elapsed: 1699s, ETA:   858s[> ] 1330/2000, 0.8 task/s, elapsed: 1700s, ETA:   857s[> ] 1331/2000, 0.8 task/s, elapsed: 1702s, ETA:   855s[> ] 1332/2000, 0.8 task/s, elapsed: 1703s, ETA:   854s[> ] 1333/2000, 0.8 task/s, elapsed: 1704s, ETA:   853s[> ] 1334/2000, 0.8 task/s, elapsed: 1706s, ETA:   852s[> ] 1335/2000, 0.8 task/s, elapsed: 1707s, ETA:   850s[> ] 1336/2000, 0.8 task/s, elapsed: 1708s, ETA:   849s[> ] 1337/2000, 0.8 task/s, elapsed: 1710s, ETA:   848s[> ] 1338/2000, 0.8 task/s, elapsed: 1710s, ETA:   846s[> ] 1339/2000, 0.8 task/s, elapsed: 1712s, ETA:   845s[> ] 1340/2000, 0.8 task/s, elapsed: 1713s, ETA:   844s[> ] 1341/2000, 0.8 task/s, elapsed: 1714s, ETA:   842s[> ] 1342/2000, 0.8 task/s, elapsed: 1715s, ETA:   841s[> ] 1343/2000, 0.8 task/s, elapsed: 1716s, ETA:   840s[> ] 1344/2000, 0.8 task/s, elapsed: 1718s, ETA:   838s[> ] 1345/2000, 0.8 task/s, elapsed: 1719s, ETA:   837s[> ] 1346/2000, 0.8 task/s, elapsed: 1720s, ETA:   836s[> ] 1347/2000, 0.8 task/s, elapsed: 1721s, ETA:   835s[> ] 1348/2000, 0.8 task/s, elapsed: 1723s, ETA:   833s[> ] 1349/2000, 0.8 task/s, elapsed: 1724s, ETA:   832s[> ] 1350/2000, 0.8 task/s, elapsed: 1725s, ETA:   831s[> ] 1351/2000, 0.8 task/s, elapsed: 1727s, ETA:   829s[> ] 1352/2000, 0.8 task/s, elapsed: 1728s, ETA:   828s[> ] 1353/2000, 0.8 task/s, elapsed: 1729s, ETA:   827s[> ] 1354/2000, 0.8 task/s, elapsed: 1730s, ETA:   826s[> ] 1355/2000, 0.8 task/s, elapsed: 1732s, ETA:   824s[> ] 1356/2000, 0.8 task/s, elapsed: 1733s, ETA:   823s[> ] 1357/2000, 0.8 task/s, elapsed: 1734s, ETA:   822s[> ] 1358/2000, 0.8 task/s, elapsed: 1735s, ETA:   820s[> ] 1359/2000, 0.8 task/s, elapsed: 1736s, ETA:   819s[> ] 1360/2000, 0.8 task/s, elapsed: 1738s, ETA:   818s[> ] 1361/2000, 0.8 task/s, elapsed: 1739s, ETA:   816s[> ] 1362/2000, 0.8 task/s, elapsed: 1740s, ETA:   815s[> ] 1363/2000, 0.8 task/s, elapsed: 1741s, ETA:   814s[> ] 1364/2000, 0.8 task/s, elapsed: 1743s, ETA:   813s[> ] 1365/2000, 0.8 task/s, elapsed: 1744s, ETA:   811s[> ] 1366/2000, 0.8 task/s, elapsed: 1745s, ETA:   810s[> ] 1367/2000, 0.8 task/s, elapsed: 1746s, ETA:   809s[> ] 1368/2000, 0.8 task/s, elapsed: 1749s, ETA:   808s[> ] 1369/2000, 0.8 task/s, elapsed: 1751s, ETA:   807s[> ] 1370/2000, 0.8 task/s, elapsed: 1753s, ETA:   806s[> ] 1371/2000, 0.8 task/s, elapsed: 1754s, ETA:   805s[> ] 1372/2000, 0.8 task/s, elapsed: 1755s, ETA:   803s[> ] 1373/2000, 0.8 task/s, elapsed: 1756s, ETA:   802s[> ] 1374/2000, 0.8 task/s, elapsed: 1758s, ETA:   801s[> ] 1375/2000, 0.8 task/s, elapsed: 1759s, ETA:   799s[> ] 1376/2000, 0.8 task/s, elapsed: 1760s, ETA:   798s[> ] 1377/2000, 0.8 task/s, elapsed: 1762s, ETA:   797s[> ] 1378/2000, 0.8 task/s, elapsed: 1764s, ETA:   796s[> ] 1379/2000, 0.8 task/s, elapsed: 1765s, ETA:   795s[> ] 1380/2000, 0.8 task/s, elapsed: 1767s, ETA:   794s[> ] 1381/2000, 0.8 task/s, elapsed: 1768s, ETA:   792s[> ] 1382/2000, 0.8 task/s, elapsed: 1769s, ETA:   791s[> ] 1383/2000, 0.8 task/s, elapsed: 1771s, ETA:   790s[> ] 1384/2000, 0.8 task/s, elapsed: 1772s, ETA:   789s[> ] 1385/2000, 0.8 task/s, elapsed: 1773s, ETA:   787s[> ] 1386/2000, 0.8 task/s, elapsed: 1774s, ETA:   786s[> ] 1387/2000, 0.8 task/s, elapsed: 1776s, ETA:   785s[> ] 1388/2000, 0.8 task/s, elapsed: 1777s, ETA:   783s[> ] 1389/2000, 0.8 task/s, elapsed: 1778s, ETA:   782s[> ] 1390/2000, 0.8 task/s, elapsed: 1779s, ETA:   781s[> ] 1391/2000, 0.8 task/s, elapsed: 1781s, ETA:   780s[> ] 1392/2000, 0.8 task/s, elapsed: 1782s, ETA:   778s[> ] 1393/2000, 0.8 task/s, elapsed: 1783s, ETA:   777s[> ] 1394/2000, 0.8 task/s, elapsed: 1784s, ETA:   776s[> ] 1395/2000, 0.8 task/s, elapsed: 1786s, ETA:   774s[> ] 1396/2000, 0.8 task/s, elapsed: 1787s, ETA:   773s[> ] 1397/2000, 0.8 task/s, elapsed: 1788s, ETA:   772s[> ] 1398/2000, 0.8 task/s, elapsed: 1790s, ETA:   771s[> ] 1399/2000, 0.8 task/s, elapsed: 1792s, ETA:   770s[> ] 1400/2000, 0.8 task/s, elapsed: 1793s, ETA:   768s[> ] 1401/2000, 0.8 task/s, elapsed: 1795s, ETA:   767s[> ] 1402/2000, 0.8 task/s, elapsed: 1796s, ETA:   766s[> ] 1403/2000, 0.8 task/s, elapsed: 1797s, ETA:   765s[> ] 1404/2000, 0.8 task/s, elapsed: 1799s, ETA:   763s[> ] 1405/2000, 0.8 task/s, elapsed: 1800s, ETA:   762s[> ] 1406/2000, 0.8 task/s, elapsed: 1801s, ETA:   761s[> ] 1407/2000, 0.8 task/s, elapsed: 1802s, ETA:   760s[> ] 1408/2000, 0.8 task/s, elapsed: 1804s, ETA:   758s[> ] 1409/2000, 0.8 task/s, elapsed: 1805s, ETA:   757s[> ] 1410/2000, 0.8 task/s, elapsed: 1806s, ETA:   756s[> ] 1411/2000, 0.8 task/s, elapsed: 1808s, ETA:   755s[> ] 1412/2000, 0.8 task/s, elapsed: 1809s, ETA:   753s[> ] 1413/2000, 0.8 task/s, elapsed: 1810s, ETA:   752s[> ] 1414/2000, 0.8 task/s, elapsed: 1812s, ETA:   751s[> ] 1415/2000, 0.8 task/s, elapsed: 1813s, ETA:   749s[> ] 1416/2000, 0.8 task/s, elapsed: 1814s, ETA:   748s[> ] 1417/2000, 0.8 task/s, elapsed: 1815s, ETA:   747s[> ] 1418/2000, 0.8 task/s, elapsed: 1817s, ETA:   746s[> ] 1419/2000, 0.8 task/s, elapsed: 1818s, ETA:   744s[> ] 1420/2000, 0.8 task/s, elapsed: 1819s, ETA:   743s[> ] 1421/2000, 0.8 task/s, elapsed: 1820s, ETA:   742s[> ] 1422/2000, 0.8 task/s, elapsed: 1822s, ETA:   740s[> ] 1423/2000, 0.8 task/s, elapsed: 1823s, ETA:   739s[> ] 1424/2000, 0.8 task/s, elapsed: 1824s, ETA:   738s[> ] 1425/2000, 0.8 task/s, elapsed: 1825s, ETA:   737s[> ] 1426/2000, 0.8 task/s, elapsed: 1827s, ETA:   735s[> ] 1427/2000, 0.8 task/s, elapsed: 1828s, ETA:   734s[> ] 1428/2000, 0.8 task/s, elapsed: 1829s, ETA:   733s[> ] 1429/2000, 0.8 task/s, elapsed: 1830s, ETA:   731s[> ] 1430/2000, 0.8 task/s, elapsed: 1832s, ETA:   730s[> ] 1431/2000, 0.8 task/s, elapsed: 1833s, ETA:   729s[> ] 1432/2000, 0.8 task/s, elapsed: 1834s, ETA:   727s[> ] 1433/2000, 0.8 task/s, elapsed: 1835s, ETA:   726s[> ] 1434/2000, 0.8 task/s, elapsed: 1837s, ETA:   725s[> ] 1435/2000, 0.8 task/s, elapsed: 1838s, ETA:   724s[> ] 1436/2000, 0.8 task/s, elapsed: 1839s, ETA:   722s[> ] 1437/2000, 0.8 task/s, elapsed: 1840s, ETA:   721s[> ] 1438/2000, 0.8 task/s, elapsed: 1842s, ETA:   720s[> ] 1439/2000, 0.8 task/s, elapsed: 1843s, ETA:   718s[> ] 1440/2000, 0.8 task/s, elapsed: 1845s, ETA:   717s[> ] 1441/2000, 0.8 task/s, elapsed: 1846s, ETA:   716s[> ] 1442/2000, 0.8 task/s, elapsed: 1847s, ETA:   715s[> ] 1443/2000, 0.8 task/s, elapsed: 1849s, ETA:   714s[> ] 1444/2000, 0.8 task/s, elapsed: 1850s, ETA:   713s[> ] 1445/2000, 0.8 task/s, elapsed: 1852s, ETA:   711s[> ] 1446/2000, 0.8 task/s, elapsed: 1853s, ETA:   710s[> ] 1447/2000, 0.8 task/s, elapsed: 1854s, ETA:   709s[> ] 1448/2000, 0.8 task/s, elapsed: 1855s, ETA:   707s[> ] 1449/2000, 0.8 task/s, elapsed: 1857s, ETA:   706s[> ] 1450/2000, 0.8 task/s, elapsed: 1858s, ETA:   705s[> ] 1451/2000, 0.8 task/s, elapsed: 1859s, ETA:   703s[> ] 1452/2000, 0.8 task/s, elapsed: 1861s, ETA:   702s[> ] 1453/2000, 0.8 task/s, elapsed: 1862s, ETA:   701s[> ] 1454/2000, 0.8 task/s, elapsed: 1863s, ETA:   700s[> ] 1455/2000, 0.8 task/s, elapsed: 1865s, ETA:   698s[> ] 1456/2000, 0.8 task/s, elapsed: 1866s, ETA:   697s[> ] 1457/2000, 0.8 task/s, elapsed: 1868s, ETA:   696s[> ] 1458/2000, 0.8 task/s, elapsed: 1869s, ETA:   695s[> ] 1459/2000, 0.8 task/s, elapsed: 1870s, ETA:   694s[> ] 1460/2000, 0.8 task/s, elapsed: 1872s, ETA:   692s[> ] 1461/2000, 0.8 task/s, elapsed: 1873s, ETA:   691s[> ] 1462/2000, 0.8 task/s, elapsed: 1874s, ETA:   690s[> ] 1463/2000, 0.8 task/s, elapsed: 1876s, ETA:   688s[> ] 1464/2000, 0.8 task/s, elapsed: 1877s, ETA:   687s[> ] 1465/2000, 0.8 task/s, elapsed: 1878s, ETA:   686s[> ] 1466/2000, 0.8 task/s, elapsed: 1879s, ETA:   685s[> ] 1467/2000, 0.8 task/s, elapsed: 1881s, ETA:   683s[> ] 1468/2000, 0.8 task/s, elapsed: 1882s, ETA:   682s[> ] 1469/2000, 0.8 task/s, elapsed: 1883s, ETA:   681s[> ] 1470/2000, 0.8 task/s, elapsed: 1884s, ETA:   679s[> ] 1471/2000, 0.8 task/s, elapsed: 1886s, ETA:   678s[> ] 1472/2000, 0.8 task/s, elapsed: 1887s, ETA:   677s[> ] 1473/2000, 0.8 task/s, elapsed: 1888s, ETA:   676s[> ] 1474/2000, 0.8 task/s, elapsed: 1889s, ETA:   674s[> ] 1475/2000, 0.8 task/s, elapsed: 1891s, ETA:   673s[> ] 1476/2000, 0.8 task/s, elapsed: 1892s, ETA:   672s[> ] 1477/2000, 0.8 task/s, elapsed: 1893s, ETA:   670s[> ] 1478/2000, 0.8 task/s, elapsed: 1894s, ETA:   669s[> ] 1479/2000, 0.8 task/s, elapsed: 1895s, ETA:   668s[> ] 1480/2000, 0.8 task/s, elapsed: 1897s, ETA:   666s[> ] 1481/2000, 0.8 task/s, elapsed: 1898s, ETA:   665s[> ] 1482/2000, 0.8 task/s, elapsed: 1899s, ETA:   664s[> ] 1483/2000, 0.8 task/s, elapsed: 1900s, ETA:   662s[> ] 1484/2000, 0.8 task/s, elapsed: 1901s, ETA:   661s[> ] 1485/2000, 0.8 task/s, elapsed: 1902s, ETA:   660s[> ] 1486/2000, 0.8 task/s, elapsed: 1903s, ETA:   658s[> ] 1487/2000, 0.8 task/s, elapsed: 1905s, ETA:   657s[> ] 1488/2000, 0.8 task/s, elapsed: 1906s, ETA:   656s[> ] 1489/2000, 0.8 task/s, elapsed: 1907s, ETA:   655s[> ] 1490/2000, 0.8 task/s, elapsed: 1908s, ETA:   653s[> ] 1491/2000, 0.8 task/s, elapsed: 1909s, ETA:   652s[> ] 1492/2000, 0.8 task/s, elapsed: 1911s, ETA:   651s[> ] 1493/2000, 0.8 task/s, elapsed: 1912s, ETA:   649s[> ] 1494/2000, 0.8 task/s, elapsed: 1913s, ETA:   648s[> ] 1495/2000, 0.8 task/s, elapsed: 1914s, ETA:   647s[> ] 1496/2000, 0.8 task/s, elapsed: 1916s, ETA:   646s[> ] 1497/2000, 0.8 task/s, elapsed: 1918s, ETA:   644s[> ] 1498/2000, 0.8 task/s, elapsed: 1919s, ETA:   643s[> ] 1499/2000, 0.8 task/s, elapsed: 1921s, ETA:   642s[> ] 1500/2000, 0.8 task/s, elapsed: 1922s, ETA:   641s[> ] 1501/2000, 0.8 task/s, elapsed: 1923s, ETA:   639s[> ] 1502/2000, 0.8 task/s, elapsed: 1924s, ETA:   638s[> ] 1503/2000, 0.8 task/s, elapsed: 1926s, ETA:   637s[> ] 1504/2000, 0.8 task/s, elapsed: 1927s, ETA:   636s[> ] 1505/2000, 0.8 task/s, elapsed: 1929s, ETA:   634s[> ] 1506/2000, 0.8 task/s, elapsed: 1930s, ETA:   633s[> ] 1507/2000, 0.8 task/s, elapsed: 1932s, ETA:   632s[> ] 1508/2000, 0.8 task/s, elapsed: 1933s, ETA:   631s[> ] 1509/2000, 0.8 task/s, elapsed: 1934s, ETA:   629s[> ] 1510/2000, 0.8 task/s, elapsed: 1936s, ETA:   628s[> ] 1511/2000, 0.8 task/s, elapsed: 1938s, ETA:   627s[> ] 1512/2000, 0.8 task/s, elapsed: 1939s, ETA:   626s[> ] 1513/2000, 0.8 task/s, elapsed: 1940s, ETA:   625s[> ] 1514/2000, 0.8 task/s, elapsed: 1942s, ETA:   623s[> ] 1515/2000, 0.8 task/s, elapsed: 1943s, ETA:   622s[> ] 1516/2000, 0.8 task/s, elapsed: 1944s, ETA:   621s[> ] 1517/2000, 0.8 task/s, elapsed: 1945s, ETA:   619s[> ] 1518/2000, 0.8 task/s, elapsed: 1946s, ETA:   618s[> ] 1519/2000, 0.8 task/s, elapsed: 1948s, ETA:   617s[> ] 1520/2000, 0.8 task/s, elapsed: 1949s, ETA:   615s[> ] 1521/2000, 0.8 task/s, elapsed: 1950s, ETA:   614s[> ] 1522/2000, 0.8 task/s, elapsed: 1951s, ETA:   613s[> ] 1523/2000, 0.8 task/s, elapsed: 1953s, ETA:   612s[> ] 1524/2000, 0.8 task/s, elapsed: 1954s, ETA:   610s[> ] 1525/2000, 0.8 task/s, elapsed: 1955s, ETA:   609s[> ] 1526/2000, 0.8 task/s, elapsed: 1956s, ETA:   608s[> ] 1527/2000, 0.8 task/s, elapsed: 1957s, ETA:   606s[> ] 1528/2000, 0.8 task/s, elapsed: 1959s, ETA:   605s[> ] 1529/2000, 0.8 task/s, elapsed: 1960s, ETA:   604s[> ] 1530/2000, 0.8 task/s, elapsed: 1961s, ETA:   603s[> ] 1531/2000, 0.8 task/s, elapsed: 1963s, ETA:   601s[> ] 1532/2000, 0.8 task/s, elapsed: 1964s, ETA:   600s[> ] 1533/2000, 0.8 task/s, elapsed: 1965s, ETA:   599s[> ] 1534/2000, 0.8 task/s, elapsed: 1966s, ETA:   597s[> ] 1535/2000, 0.8 task/s, elapsed: 1967s, ETA:   596s[> ] 1536/2000, 0.8 task/s, elapsed: 1968s, ETA:   595s[> ] 1537/2000, 0.8 task/s, elapsed: 1970s, ETA:   593s[> ] 1538/2000, 0.8 task/s, elapsed: 1971s, ETA:   592s[> ] 1539/2000, 0.8 task/s, elapsed: 1972s, ETA:   591s[> ] 1540/2000, 0.8 task/s, elapsed: 1973s, ETA:   589s[> ] 1541/2000, 0.8 task/s, elapsed: 1975s, ETA:   588s[> ] 1542/2000, 0.8 task/s, elapsed: 1976s, ETA:   587s[> ] 1543/2000, 0.8 task/s, elapsed: 1977s, ETA:   586s[> ] 1544/2000, 0.8 task/s, elapsed: 1978s, ETA:   584s[> ] 1545/2000, 0.8 task/s, elapsed: 1979s, ETA:   583s[> ] 1546/2000, 0.8 task/s, elapsed: 1980s, ETA:   582s[> ] 1547/2000, 0.8 task/s, elapsed: 1981s, ETA:   580s[> ] 1548/2000, 0.8 task/s, elapsed: 1982s, ETA:   579s[> ] 1549/2000, 0.8 task/s, elapsed: 1983s, ETA:   577s[> ] 1550/2000, 0.8 task/s, elapsed: 1985s, ETA:   576s[> ] 1551/2000, 0.8 task/s, elapsed: 1986s, ETA:   575s[> ] 1552/2000, 0.8 task/s, elapsed: 1987s, ETA:   574s[> ] 1553/2000, 0.8 task/s, elapsed: 1988s, ETA:   572s[> ] 1554/2000, 0.8 task/s, elapsed: 1989s, ETA:   571s[> ] 1555/2000, 0.8 task/s, elapsed: 1990s, ETA:   570s[> ] 1556/2000, 0.8 task/s, elapsed: 1991s, ETA:   568s[> ] 1557/2000, 0.8 task/s, elapsed: 1993s, ETA:   567s[> ] 1558/2000, 0.8 task/s, elapsed: 1994s, ETA:   566s[> ] 1559/2000, 0.8 task/s, elapsed: 1995s, ETA:   564s[> ] 1560/2000, 0.8 task/s, elapsed: 1996s, ETA:   563s[> ] 1561/2000, 0.8 task/s, elapsed: 1997s, ETA:   562s[> ] 1562/2000, 0.8 task/s, elapsed: 1998s, ETA:   560s[> ] 1563/2000, 0.8 task/s, elapsed: 2000s, ETA:   559s[> ] 1564/2000, 0.8 task/s, elapsed: 2001s, ETA:   558s[> ] 1565/2000, 0.8 task/s, elapsed: 2002s, ETA:   556s[> ] 1566/2000, 0.8 task/s, elapsed: 2003s, ETA:   555s[> ] 1567/2000, 0.8 task/s, elapsed: 2004s, ETA:   554s[> ] 1568/2000, 0.8 task/s, elapsed: 2005s, ETA:   553s[> ] 1569/2000, 0.8 task/s, elapsed: 2007s, ETA:   551s[> ] 1570/2000, 0.8 task/s, elapsed: 2008s, ETA:   550s[> ] 1571/2000, 0.8 task/s, elapsed: 2009s, ETA:   549s[> ] 1572/2000, 0.8 task/s, elapsed: 2010s, ETA:   547s[> ] 1573/2000, 0.8 task/s, elapsed: 2011s, ETA:   546s[> ] 1574/2000, 0.8 task/s, elapsed: 2013s, ETA:   545s[> ] 1575/2000, 0.8 task/s, elapsed: 2014s, ETA:   543s[> ] 1576/2000, 0.8 task/s, elapsed: 2015s, ETA:   542s[> ] 1577/2000, 0.8 task/s, elapsed: 2016s, ETA:   541s[> ] 1578/2000, 0.8 task/s, elapsed: 2017s, ETA:   539s[> ] 1579/2000, 0.8 task/s, elapsed: 2018s, ETA:   538s[> ] 1580/2000, 0.8 task/s, elapsed: 2019s, ETA:   537s[> ] 1581/2000, 0.8 task/s, elapsed: 2021s, ETA:   535s[> ] 1582/2000, 0.8 task/s, elapsed: 2022s, ETA:   534s[> ] 1583/2000, 0.8 task/s, elapsed: 2023s, ETA:   533s[> ] 1584/2000, 0.8 task/s, elapsed: 2024s, ETA:   532s[> ] 1585/2000, 0.8 task/s, elapsed: 2025s, ETA:   530s[> ] 1586/2000, 0.8 task/s, elapsed: 2026s, ETA:   529s[> ] 1587/2000, 0.8 task/s, elapsed: 2028s, ETA:   528s[> ] 1588/2000, 0.8 task/s, elapsed: 2029s, ETA:   526s[> ] 1589/2000, 0.8 task/s, elapsed: 2030s, ETA:   525s[> ] 1590/2000, 0.8 task/s, elapsed: 2031s, ETA:   524s[> ] 1591/2000, 0.8 task/s, elapsed: 2032s, ETA:   522s[> ] 1592/2000, 0.8 task/s, elapsed: 2033s, ETA:   521s[> ] 1593/2000, 0.8 task/s, elapsed: 2035s, ETA:   520s[> ] 1594/2000, 0.8 task/s, elapsed: 2036s, ETA:   519s[> ] 1595/2000, 0.8 task/s, elapsed: 2038s, ETA:   517s[> ] 1596/2000, 0.8 task/s, elapsed: 2039s, ETA:   516s[> ] 1597/2000, 0.8 task/s, elapsed: 2040s, ETA:   515s[> ] 1598/2000, 0.8 task/s, elapsed: 2041s, ETA:   514s[> ] 1599/2000, 0.8 task/s, elapsed: 2043s, ETA:   512s[> ] 1600/2000, 0.8 task/s, elapsed: 2044s, ETA:   511s[> ] 1601/2000, 0.8 task/s, elapsed: 2046s, ETA:   510s[> ] 1602/2000, 0.8 task/s, elapsed: 2047s, ETA:   509s[> ] 1603/2000, 0.8 task/s, elapsed: 2048s, ETA:   507s[> ] 1604/2000, 0.8 task/s, elapsed: 2049s, ETA:   506s[> ] 1605/2000, 0.8 task/s, elapsed: 2051s, ETA:   505s[> ] 1606/2000, 0.8 task/s, elapsed: 2053s, ETA:   504s[> ] 1607/2000, 0.8 task/s, elapsed: 2054s, ETA:   502s[> ] 1608/2000, 0.8 task/s, elapsed: 2055s, ETA:   501s[> ] 1609/2000, 0.8 task/s, elapsed: 2056s, ETA:   500s[> ] 1610/2000, 0.8 task/s, elapsed: 2058s, ETA:   498s[> ] 1611/2000, 0.8 task/s, elapsed: 2059s, ETA:   497s[> ] 1612/2000, 0.8 task/s, elapsed: 2060s, ETA:   496s[> ] 1613/2000, 0.8 task/s, elapsed: 2061s, ETA:   495s[> ] 1614/2000, 0.8 task/s, elapsed: 2062s, ETA:   493s[> ] 1615/2000, 0.8 task/s, elapsed: 2064s, ETA:   492s[> ] 1616/2000, 0.8 task/s, elapsed: 2065s, ETA:   491s[> ] 1617/2000, 0.8 task/s, elapsed: 2066s, ETA:   489s[> ] 1618/2000, 0.8 task/s, elapsed: 2067s, ETA:   488s[> ] 1619/2000, 0.8 task/s, elapsed: 2068s, ETA:   487s[> ] 1620/2000, 0.8 task/s, elapsed: 2069s, ETA:   485s[> ] 1621/2000, 0.8 task/s, elapsed: 2070s, ETA:   484s[> ] 1622/2000, 0.8 task/s, elapsed: 2072s, ETA:   483s[> ] 1623/2000, 0.8 task/s, elapsed: 2073s, ETA:   482s[> ] 1624/2000, 0.8 task/s, elapsed: 2074s, ETA:   480s[> ] 1625/2000, 0.8 task/s, elapsed: 2075s, ETA:   479s[> ] 1626/2000, 0.8 task/s, elapsed: 2077s, ETA:   478s[> ] 1627/2000, 0.8 task/s, elapsed: 2078s, ETA:   476s[> ] 1628/2000, 0.8 task/s, elapsed: 2079s, ETA:   475s[> ] 1629/2000, 0.8 task/s, elapsed: 2080s, ETA:   474s[> ] 1630/2000, 0.8 task/s, elapsed: 2082s, ETA:   472s[> ] 1631/2000, 0.8 task/s, elapsed: 2083s, ETA:   471s[> ] 1632/2000, 0.8 task/s, elapsed: 2085s, ETA:   470s[> ] 1633/2000, 0.8 task/s, elapsed: 2086s, ETA:   469s[> ] 1634/2000, 0.8 task/s, elapsed: 2087s, ETA:   468s[> ] 1635/2000, 0.8 task/s, elapsed: 2089s, ETA:   466s[> ] 1636/2000, 0.8 task/s, elapsed: 2090s, ETA:   465s[> ] 1637/2000, 0.8 task/s, elapsed: 2091s, ETA:   464s[> ] 1638/2000, 0.8 task/s, elapsed: 2092s, ETA:   462s[> ] 1639/2000, 0.8 task/s, elapsed: 2094s, ETA:   461s[> ] 1640/2000, 0.8 task/s, elapsed: 2095s, ETA:   460s[> ] 1641/2000, 0.8 task/s, elapsed: 2096s, ETA:   459s[> ] 1642/2000, 0.8 task/s, elapsed: 2097s, ETA:   457s[> ] 1643/2000, 0.8 task/s, elapsed: 2098s, ETA:   456s[> ] 1644/2000, 0.8 task/s, elapsed: 2099s, ETA:   455s[> ] 1645/2000, 0.8 task/s, elapsed: 2101s, ETA:   453s[> ] 1646/2000, 0.8 task/s, elapsed: 2102s, ETA:   452s[> ] 1647/2000, 0.8 task/s, elapsed: 2103s, ETA:   451s[> ] 1648/2000, 0.8 task/s, elapsed: 2104s, ETA:   449s[> ] 1649/2000, 0.8 task/s, elapsed: 2105s, ETA:   448s[> ] 1650/2000, 0.8 task/s, elapsed: 2106s, ETA:   447s[> ] 1651/2000, 0.8 task/s, elapsed: 2108s, ETA:   446s[> ] 1652/2000, 0.8 task/s, elapsed: 2109s, ETA:   444s[> ] 1653/2000, 0.8 task/s, elapsed: 2110s, ETA:   443s[> ] 1654/2000, 0.8 task/s, elapsed: 2111s, ETA:   442s[> ] 1655/2000, 0.8 task/s, elapsed: 2112s, ETA:   440s[> ] 1656/2000, 0.8 task/s, elapsed: 2114s, ETA:   439s[> ] 1657/2000, 0.8 task/s, elapsed: 2115s, ETA:   438s[> ] 1658/2000, 0.8 task/s, elapsed: 2116s, ETA:   436s[> ] 1659/2000, 0.8 task/s, elapsed: 2117s, ETA:   435s[> ] 1660/2000, 0.8 task/s, elapsed: 2118s, ETA:   434s[> ] 1661/2000, 0.8 task/s, elapsed: 2119s, ETA:   433s[> ] 1662/2000, 0.8 task/s, elapsed: 2120s, ETA:   431s[> ] 1663/2000, 0.8 task/s, elapsed: 2122s, ETA:   430s[> ] 1664/2000, 0.8 task/s, elapsed: 2123s, ETA:   429s[> ] 1665/2000, 0.8 task/s, elapsed: 2124s, ETA:   427s[> ] 1666/2000, 0.8 task/s, elapsed: 2125s, ETA:   426s[> ] 1667/2000, 0.8 task/s, elapsed: 2126s, ETA:   425s[> ] 1668/2000, 0.8 task/s, elapsed: 2128s, ETA:   423s[> ] 1669/2000, 0.8 task/s, elapsed: 2129s, ETA:   422s[> ] 1670/2000, 0.8 task/s, elapsed: 2130s, ETA:   421s[> ] 1671/2000, 0.8 task/s, elapsed: 2131s, ETA:   420s[> ] 1672/2000, 0.8 task/s, elapsed: 2132s, ETA:   418s[> ] 1673/2000, 0.8 task/s, elapsed: 2133s, ETA:   417s[> ] 1674/2000, 0.8 task/s, elapsed: 2134s, ETA:   416s[> ] 1675/2000, 0.8 task/s, elapsed: 2136s, ETA:   414s[> ] 1676/2000, 0.8 task/s, elapsed: 2137s, ETA:   413s[> ] 1677/2000, 0.8 task/s, elapsed: 2138s, ETA:   412s[> ] 1678/2000, 0.8 task/s, elapsed: 2139s, ETA:   410s[> ] 1679/2000, 0.8 task/s, elapsed: 2140s, ETA:   409s[> ] 1680/2000, 0.8 task/s, elapsed: 2141s, ETA:   408s[> ] 1681/2000, 0.8 task/s, elapsed: 2142s, ETA:   406s[> ] 1682/2000, 0.8 task/s, elapsed: 2143s, ETA:   405s[> ] 1683/2000, 0.8 task/s, elapsed: 2145s, ETA:   404s[> ] 1684/2000, 0.8 task/s, elapsed: 2146s, ETA:   403s[> ] 1685/2000, 0.8 task/s, elapsed: 2147s, ETA:   401s[> ] 1686/2000, 0.8 task/s, elapsed: 2149s, ETA:   400s[> ] 1687/2000, 0.8 task/s, elapsed: 2150s, ETA:   399s[> ] 1688/2000, 0.8 task/s, elapsed: 2151s, ETA:   398s[> ] 1689/2000, 0.8 task/s, elapsed: 2152s, ETA:   396s[> ] 1690/2000, 0.8 task/s, elapsed: 2154s, ETA:   395s[> ] 1691/2000, 0.8 task/s, elapsed: 2156s, ETA:   394s[> ] 1692/2000, 0.8 task/s, elapsed: 2157s, ETA:   393s[> ] 1693/2000, 0.8 task/s, elapsed: 2158s, ETA:   391s[> ] 1694/2000, 0.8 task/s, elapsed: 2160s, ETA:   390s[> ] 1695/2000, 0.8 task/s, elapsed: 2161s, ETA:   389s[> ] 1696/2000, 0.8 task/s, elapsed: 2162s, ETA:   388s[> ] 1697/2000, 0.8 task/s, elapsed: 2163s, ETA:   386s[> ] 1698/2000, 0.8 task/s, elapsed: 2165s, ETA:   385s[> ] 1699/2000, 0.8 task/s, elapsed: 2166s, ETA:   384s[> ] 1700/2000, 0.8 task/s, elapsed: 2167s, ETA:   382s[> ] 1701/2000, 0.8 task/s, elapsed: 2168s, ETA:   381s[> ] 1702/2000, 0.8 task/s, elapsed: 2170s, ETA:   380s[> ] 1703/2000, 0.8 task/s, elapsed: 2171s, ETA:   379s[> ] 1704/2000, 0.8 task/s, elapsed: 2173s, ETA:   377s[> ] 1705/2000, 0.8 task/s, elapsed: 2174s, ETA:   376s[> ] 1706/2000, 0.8 task/s, elapsed: 2176s, ETA:   375s[> ] 1707/2000, 0.8 task/s, elapsed: 2177s, ETA:   374s[> ] 1708/2000, 0.8 task/s, elapsed: 2178s, ETA:   372s[> ] 1709/2000, 0.8 task/s, elapsed: 2180s, ETA:   371s[> ] 1710/2000, 0.8 task/s, elapsed: 2181s, ETA:   370s[> ] 1711/2000, 0.8 task/s, elapsed: 2182s, ETA:   369s[> ] 1712/2000, 0.8 task/s, elapsed: 2184s, ETA:   367s[> ] 1713/2000, 0.8 task/s, elapsed: 2185s, ETA:   366s[> ] 1714/2000, 0.8 task/s, elapsed: 2186s, ETA:   365s[> ] 1715/2000, 0.8 task/s, elapsed: 2187s, ETA:   363s[> ] 1716/2000, 0.8 task/s, elapsed: 2188s, ETA:   362s[> ] 1717/2000, 0.8 task/s, elapsed: 2190s, ETA:   361s[> ] 1718/2000, 0.8 task/s, elapsed: 2191s, ETA:   360s[> ] 1719/2000, 0.8 task/s, elapsed: 2192s, ETA:   358s[> ] 1720/2000, 0.8 task/s, elapsed: 2193s, ETA:   357s[> ] 1721/2000, 0.8 task/s, elapsed: 2195s, ETA:   356s[> ] 1722/2000, 0.8 task/s, elapsed: 2196s, ETA:   354s[> ] 1723/2000, 0.8 task/s, elapsed: 2197s, ETA:   353s[> ] 1724/2000, 0.8 task/s, elapsed: 2198s, ETA:   352s[> ] 1725/2000, 0.8 task/s, elapsed: 2199s, ETA:   351s[> ] 1726/2000, 0.8 task/s, elapsed: 2201s, ETA:   349s[> ] 1727/2000, 0.8 task/s, elapsed: 2202s, ETA:   348s[> ] 1728/2000, 0.8 task/s, elapsed: 2203s, ETA:   347s[> ] 1729/2000, 0.8 task/s, elapsed: 2204s, ETA:   346s[> ] 1730/2000, 0.8 task/s, elapsed: 2206s, ETA:   344s[> ] 1731/2000, 0.8 task/s, elapsed: 2207s, ETA:   343s[> ] 1732/2000, 0.8 task/s, elapsed: 2208s, ETA:   342s[> ] 1733/2000, 0.8 task/s, elapsed: 2209s, ETA:   340s[> ] 1734/2000, 0.8 task/s, elapsed: 2210s, ETA:   339s[> ] 1735/2000, 0.8 task/s, elapsed: 2211s, ETA:   338s[> ] 1736/2000, 0.8 task/s, elapsed: 2213s, ETA:   336s[> ] 1737/2000, 0.8 task/s, elapsed: 2214s, ETA:   335s[> ] 1738/2000, 0.8 task/s, elapsed: 2215s, ETA:   334s[> ] 1739/2000, 0.8 task/s, elapsed: 2216s, ETA:   333s[> ] 1740/2000, 0.8 task/s, elapsed: 2217s, ETA:   331s[> ] 1741/2000, 0.8 task/s, elapsed: 2219s, ETA:   330s[> ] 1742/2000, 0.8 task/s, elapsed: 2220s, ETA:   329s[> ] 1743/2000, 0.8 task/s, elapsed: 2221s, ETA:   328s[> ] 1744/2000, 0.8 task/s, elapsed: 2223s, ETA:   326s[> ] 1745/2000, 0.8 task/s, elapsed: 2224s, ETA:   325s[> ] 1746/2000, 0.8 task/s, elapsed: 2225s, ETA:   324s[> ] 1747/2000, 0.8 task/s, elapsed: 2226s, ETA:   322s[> ] 1748/2000, 0.8 task/s, elapsed: 2228s, ETA:   321s[> ] 1749/2000, 0.8 task/s, elapsed: 2229s, ETA:   320s[> ] 1750/2000, 0.8 task/s, elapsed: 2230s, ETA:   319s[> ] 1751/2000, 0.8 task/s, elapsed: 2231s, ETA:   317s[> ] 1752/2000, 0.8 task/s, elapsed: 2233s, ETA:   316s[> ] 1753/2000, 0.8 task/s, elapsed: 2234s, ETA:   315s[> ] 1754/2000, 0.8 task/s, elapsed: 2235s, ETA:   313s[> ] 1755/2000, 0.8 task/s, elapsed: 2237s, ETA:   312s[> ] 1756/2000, 0.8 task/s, elapsed: 2238s, ETA:   311s[> ] 1757/2000, 0.8 task/s, elapsed: 2239s, ETA:   310s[> ] 1758/2000, 0.8 task/s, elapsed: 2240s, ETA:   308s[> ] 1759/2000, 0.8 task/s, elapsed: 2241s, ETA:   307s[> ] 1760/2000, 0.8 task/s, elapsed: 2242s, ETA:   306s[> ] 1761/2000, 0.8 task/s, elapsed: 2243s, ETA:   304s[> ] 1762/2000, 0.8 task/s, elapsed: 2245s, ETA:   303s[> ] 1763/2000, 0.8 task/s, elapsed: 2246s, ETA:   302s[> ] 1764/2000, 0.8 task/s, elapsed: 2247s, ETA:   301s[> ] 1765/2000, 0.8 task/s, elapsed: 2248s, ETA:   299s[> ] 1766/2000, 0.8 task/s, elapsed: 2249s, ETA:   298s[> ] 1767/2000, 0.8 task/s, elapsed: 2251s, ETA:   297s[> ] 1768/2000, 0.8 task/s, elapsed: 2252s, ETA:   296s[> ] 1769/2000, 0.8 task/s, elapsed: 2253s, ETA:   294s[> ] 1770/2000, 0.8 task/s, elapsed: 2254s, ETA:   293s[> ] 1771/2000, 0.8 task/s, elapsed: 2256s, ETA:   292s[> ] 1772/2000, 0.8 task/s, elapsed: 2257s, ETA:   290s[> ] 1773/2000, 0.8 task/s, elapsed: 2258s, ETA:   289s[> ] 1774/2000, 0.8 task/s, elapsed: 2260s, ETA:   288s[> ] 1775/2000, 0.8 task/s, elapsed: 2261s, ETA:   287s[> ] 1776/2000, 0.8 task/s, elapsed: 2262s, ETA:   285s[> ] 1777/2000, 0.8 task/s, elapsed: 2263s, ETA:   284s[> ] 1778/2000, 0.8 task/s, elapsed: 2264s, ETA:   283s[> ] 1779/2000, 0.8 task/s, elapsed: 2265s, ETA:   281s[> ] 1780/2000, 0.8 task/s, elapsed: 2266s, ETA:   280s[> ] 1781/2000, 0.8 task/s, elapsed: 2268s, ETA:   279s[> ] 1782/2000, 0.8 task/s, elapsed: 2269s, ETA:   278s[> ] 1783/2000, 0.8 task/s, elapsed: 2270s, ETA:   276s[> ] 1784/2000, 0.8 task/s, elapsed: 2272s, ETA:   275s[> ] 1785/2000, 0.8 task/s, elapsed: 2273s, ETA:   274s[> ] 1786/2000, 0.8 task/s, elapsed: 2274s, ETA:   272s[> ] 1787/2000, 0.8 task/s, elapsed: 2275s, ETA:   271s[> ] 1788/2000, 0.8 task/s, elapsed: 2277s, ETA:   270s[> ] 1789/2000, 0.8 task/s, elapsed: 2278s, ETA:   269s[> ] 1790/2000, 0.8 task/s, elapsed: 2279s, ETA:   267s[> ] 1791/2000, 0.8 task/s, elapsed: 2281s, ETA:   266s[> ] 1792/2000, 0.8 task/s, elapsed: 2282s, ETA:   265s[> ] 1793/2000, 0.8 task/s, elapsed: 2283s, ETA:   264s[> ] 1794/2000, 0.8 task/s, elapsed: 2285s, ETA:   262s[> ] 1795/2000, 0.8 task/s, elapsed: 2286s, ETA:   261s[> ] 1796/2000, 0.8 task/s, elapsed: 2287s, ETA:   260s[> ] 1797/2000, 0.8 task/s, elapsed: 2288s, ETA:   258s[> ] 1798/2000, 0.8 task/s, elapsed: 2289s, ETA:   257s[> ] 1799/2000, 0.8 task/s, elapsed: 2291s, ETA:   256s[> ] 1800/2000, 0.8 task/s, elapsed: 2292s, ETA:   255s[> ] 1801/2000, 0.8 task/s, elapsed: 2293s, ETA:   253s[> ] 1802/2000, 0.8 task/s, elapsed: 2295s, ETA:   252s[> ] 1803/2000, 0.8 task/s, elapsed: 2296s, ETA:   251s[> ] 1804/2000, 0.8 task/s, elapsed: 2297s, ETA:   250s[> ] 1805/2000, 0.8 task/s, elapsed: 2299s, ETA:   248s[> ] 1806/2000, 0.8 task/s, elapsed: 2300s, ETA:   247s[> ] 1807/2000, 0.8 task/s, elapsed: 2301s, ETA:   246s[> ] 1808/2000, 0.8 task/s, elapsed: 2303s, ETA:   245s[> ] 1809/2000, 0.8 task/s, elapsed: 2304s, ETA:   243s[> ] 1810/2000, 0.8 task/s, elapsed: 2305s, ETA:   242s[> ] 1811/2000, 0.8 task/s, elapsed: 2306s, ETA:   241s[> ] 1812/2000, 0.8 task/s, elapsed: 2307s, ETA:   239s[> ] 1813/2000, 0.8 task/s, elapsed: 2308s, ETA:   238s[> ] 1814/2000, 0.8 task/s, elapsed: 2310s, ETA:   237s[> ] 1815/2000, 0.8 task/s, elapsed: 2311s, ETA:   236s[> ] 1816/2000, 0.8 task/s, elapsed: 2312s, ETA:   234s[> ] 1817/2000, 0.8 task/s, elapsed: 2313s, ETA:   233s[> ] 1818/2000, 0.8 task/s, elapsed: 2315s, ETA:   232s[> ] 1819/2000, 0.8 task/s, elapsed: 2316s, ETA:   230s[> ] 1820/2000, 0.8 task/s, elapsed: 2317s, ETA:   229s[> ] 1821/2000, 0.8 task/s, elapsed: 2318s, ETA:   228s[> ] 1822/2000, 0.8 task/s, elapsed: 2320s, ETA:   227s[> ] 1823/2000, 0.8 task/s, elapsed: 2321s, ETA:   225s[> ] 1824/2000, 0.8 task/s, elapsed: 2322s, ETA:   224s[> ] 1825/2000, 0.8 task/s, elapsed: 2323s, ETA:   223s[> ] 1826/2000, 0.8 task/s, elapsed: 2324s, ETA:   221s[> ] 1827/2000, 0.8 task/s, elapsed: 2325s, ETA:   220s[> ] 1828/2000, 0.8 task/s, elapsed: 2327s, ETA:   219s[> ] 1829/2000, 0.8 task/s, elapsed: 2328s, ETA:   218s[> ] 1830/2000, 0.8 task/s, elapsed: 2329s, ETA:   216s[> ] 1831/2000, 0.8 task/s, elapsed: 2330s, ETA:   215s[> ] 1832/2000, 0.8 task/s, elapsed: 2331s, ETA:   214s[> ] 1833/2000, 0.8 task/s, elapsed: 2333s, ETA:   213s[> ] 1834/2000, 0.8 task/s, elapsed: 2334s, ETA:   211s[> ] 1835/2000, 0.8 task/s, elapsed: 2335s, ETA:   210s[> ] 1836/2000, 0.8 task/s, elapsed: 2336s, ETA:   209s[> ] 1837/2000, 0.8 task/s, elapsed: 2337s, ETA:   207s[> ] 1838/2000, 0.8 task/s, elapsed: 2339s, ETA:   206s[> ] 1839/2000, 0.8 task/s, elapsed: 2340s, ETA:   205s[> ] 1840/2000, 0.8 task/s, elapsed: 2341s, ETA:   204s[> ] 1841/2000, 0.8 task/s, elapsed: 2342s, ETA:   202s[> ] 1842/2000, 0.8 task/s, elapsed: 2343s, ETA:   201s[> ] 1843/2000, 0.8 task/s, elapsed: 2344s, ETA:   200s[> ] 1844/2000, 0.8 task/s, elapsed: 2345s, ETA:   198s[> ] 1845/2000, 0.8 task/s, elapsed: 2347s, ETA:   197s[> ] 1846/2000, 0.8 task/s, elapsed: 2348s, ETA:   196s[> ] 1847/2000, 0.8 task/s, elapsed: 2349s, ETA:   195s[> ] 1848/2000, 0.8 task/s, elapsed: 2350s, ETA:   193s[> ] 1849/2000, 0.8 task/s, elapsed: 2351s, ETA:   192s[> ] 1850/2000, 0.8 task/s, elapsed: 2353s, ETA:   191s[> ] 1851/2000, 0.8 task/s, elapsed: 2354s, ETA:   189s[> ] 1852/2000, 0.8 task/s, elapsed: 2355s, ETA:   188s[> ] 1853/2000, 0.8 task/s, elapsed: 2357s, ETA:   187s[> ] 1854/2000, 0.8 task/s, elapsed: 2358s, ETA:   186s[> ] 1855/2000, 0.8 task/s, elapsed: 2359s, ETA:   184s[> ] 1856/2000, 0.8 task/s, elapsed: 2360s, ETA:   183s[> ] 1857/2000, 0.8 task/s, elapsed: 2361s, ETA:   182s[> ] 1858/2000, 0.8 task/s, elapsed: 2363s, ETA:   181s[> ] 1859/2000, 0.8 task/s, elapsed: 2364s, ETA:   179s[> ] 1860/2000, 0.8 task/s, elapsed: 2366s, ETA:   178s[> ] 1861/2000, 0.8 task/s, elapsed: 2367s, ETA:   177s[> ] 1862/2000, 0.8 task/s, elapsed: 2369s, ETA:   176s[> ] 1863/2000, 0.8 task/s, elapsed: 2370s, ETA:   174s[> ] 1864/2000, 0.8 task/s, elapsed: 2371s, ETA:   173s[> ] 1865/2000, 0.8 task/s, elapsed: 2372s, ETA:   172s[> ] 1866/2000, 0.8 task/s, elapsed: 2373s, ETA:   170s[> ] 1867/2000, 0.8 task/s, elapsed: 2375s, ETA:   169s[> ] 1868/2000, 0.8 task/s, elapsed: 2376s, ETA:   168s[> ] 1869/2000, 0.8 task/s, elapsed: 2378s, ETA:   167s[> ] 1870/2000, 0.8 task/s, elapsed: 2379s, ETA:   165s[> ] 1871/2000, 0.8 task/s, elapsed: 2380s, ETA:   164s[> ] 1872/2000, 0.8 task/s, elapsed: 2382s, ETA:   163s[> ] 1873/2000, 0.8 task/s, elapsed: 2383s, ETA:   162s[> ] 1874/2000, 0.8 task/s, elapsed: 2384s, ETA:   160s[> ] 1875/2000, 0.8 task/s, elapsed: 2386s, ETA:   159s[> ] 1876/2000, 0.8 task/s, elapsed: 2391s, ETA:   158s[> ] 1877/2000, 0.8 task/s, elapsed: 2392s, ETA:   157s[> ] 1878/2000, 0.8 task/s, elapsed: 2393s, ETA:   155s[> ] 1879/2000, 0.8 task/s, elapsed: 2394s, ETA:   154s[> ] 1880/2000, 0.8 task/s, elapsed: 2396s, ETA:   153s[> ] 1881/2000, 0.8 task/s, elapsed: 2397s, ETA:   152s[> ] 1882/2000, 0.8 task/s, elapsed: 2399s, ETA:   150s[> ] 1883/2000, 0.8 task/s, elapsed: 2400s, ETA:   149s[> ] 1884/2000, 0.8 task/s, elapsed: 2401s, ETA:   148s[> ] 1885/2000, 0.8 task/s, elapsed: 2402s, ETA:   147s[> ] 1886/2000, 0.8 task/s, elapsed: 2403s, ETA:   145s[> ] 1887/2000, 0.8 task/s, elapsed: 2405s, ETA:   144s[> ] 1888/2000, 0.8 task/s, elapsed: 2406s, ETA:   143s[> ] 1889/2000, 0.8 task/s, elapsed: 2407s, ETA:   141s[> ] 1890/2000, 0.8 task/s, elapsed: 2408s, ETA:   140s[> ] 1891/2000, 0.8 task/s, elapsed: 2410s, ETA:   139s[> ] 1892/2000, 0.8 task/s, elapsed: 2411s, ETA:   138s[> ] 1893/2000, 0.8 task/s, elapsed: 2412s, ETA:   136s[> ] 1894/2000, 0.8 task/s, elapsed: 2413s, ETA:   135s[> ] 1895/2000, 0.8 task/s, elapsed: 2414s, ETA:   134s[> ] 1896/2000, 0.8 task/s, elapsed: 2416s, ETA:   133s[> ] 1897/2000, 0.8 task/s, elapsed: 2417s, ETA:   131s[> ] 1898/2000, 0.8 task/s, elapsed: 2418s, ETA:   130s[> ] 1899/2000, 0.8 task/s, elapsed: 2419s, ETA:   129s[> ] 1900/2000, 0.8 task/s, elapsed: 2420s, ETA:   127s[> ] 1901/2000, 0.8 task/s, elapsed: 2422s, ETA:   126s[> ] 1902/2000, 0.8 task/s, elapsed: 2423s, ETA:   125s[> ] 1903/2000, 0.8 task/s, elapsed: 2424s, ETA:   124s[> ] 1904/2000, 0.8 task/s, elapsed: 2426s, ETA:   122s[> ] 1905/2000, 0.8 task/s, elapsed: 2428s, ETA:   121s[> ] 1906/2000, 0.8 task/s, elapsed: 2429s, ETA:   120s[> ] 1907/2000, 0.8 task/s, elapsed: 2430s, ETA:   119s[> ] 1908/2000, 0.8 task/s, elapsed: 2432s, ETA:   117s[> ] 1909/2000, 0.8 task/s, elapsed: 2433s, ETA:   116s[> ] 1910/2000, 0.8 task/s, elapsed: 2435s, ETA:   115s[> ] 1911/2000, 0.8 task/s, elapsed: 2436s, ETA:   113s[> ] 1912/2000, 0.8 task/s, elapsed: 2438s, ETA:   112s[> ] 1913/2000, 0.8 task/s, elapsed: 2439s, ETA:   111s[> ] 1914/2000, 0.8 task/s, elapsed: 2441s, ETA:   110s[> ] 1915/2000, 0.8 task/s, elapsed: 2442s, ETA:   108s[> ] 1916/2000, 0.8 task/s, elapsed: 2444s, ETA:   107s[> ] 1917/2000, 0.8 task/s, elapsed: 2445s, ETA:   106s[> ] 1918/2000, 0.8 task/s, elapsed: 2447s, ETA:   105s[> ] 1919/2000, 0.8 task/s, elapsed: 2449s, ETA:   103s[> ] 1920/2000, 0.8 task/s, elapsed: 2450s, ETA:   102s[> ] 1921/2000, 0.8 task/s, elapsed: 2452s, ETA:   101s[> ] 1922/2000, 0.8 task/s, elapsed: 2454s, ETA:   100s[> ] 1923/2000, 0.8 task/s, elapsed: 2455s, ETA:    98s[> ] 1924/2000, 0.8 task/s, elapsed: 2457s, ETA:    97s[> ] 1925/2000, 0.8 task/s, elapsed: 2458s, ETA:    96s[> ] 1926/2000, 0.8 task/s, elapsed: 2460s, ETA:    95s[> ] 1927/2000, 0.8 task/s, elapsed: 2461s, ETA:    93s[> ] 1928/2000, 0.8 task/s, elapsed: 2463s, ETA:    92s[> ] 1929/2000, 0.8 task/s, elapsed: 2464s, ETA:    91s[> ] 1930/2000, 0.8 task/s, elapsed: 2466s, ETA:    89s[> ] 1931/2000, 0.8 task/s, elapsed: 2468s, ETA:    88s[> ] 1932/2000, 0.8 task/s, elapsed: 2470s, ETA:    87s[> ] 1933/2000, 0.8 task/s, elapsed: 2471s, ETA:    86s[> ] 1934/2000, 0.8 task/s, elapsed: 2473s, ETA:    84s[> ] 1935/2000, 0.8 task/s, elapsed: 2474s, ETA:    83s[> ] 1936/2000, 0.8 task/s, elapsed: 2475s, ETA:    82s[> ] 1937/2000, 0.8 task/s, elapsed: 2476s, ETA:    81s[> ] 1938/2000, 0.8 task/s, elapsed: 2477s, ETA:    79s[> ] 1939/2000, 0.8 task/s, elapsed: 2479s, ETA:    78s[> ] 1940/2000, 0.8 task/s, elapsed: 2480s, ETA:    77s[> ] 1941/2000, 0.8 task/s, elapsed: 2481s, ETA:    75s[> ] 1942/2000, 0.8 task/s, elapsed: 2482s, ETA:    74s[> ] 1943/2000, 0.8 task/s, elapsed: 2484s, ETA:    73s[> ] 1944/2000, 0.8 task/s, elapsed: 2485s, ETA:    72s[> ] 1945/2000, 0.8 task/s, elapsed: 2486s, ETA:    70s[> ] 1946/2000, 0.8 task/s, elapsed: 2487s, ETA:    69s[> ] 1947/2000, 0.8 task/s, elapsed: 2489s, ETA:    68s[> ] 1948/2000, 0.8 task/s, elapsed: 2490s, ETA:    66s[> ] 1949/2000, 0.8 task/s, elapsed: 2491s, ETA:    65s[> ] 1950/2000, 0.8 task/s, elapsed: 2493s, ETA:    64s[> ] 1951/2000, 0.8 task/s, elapsed: 2494s, ETA:    63s[> ] 1952/2000, 0.8 task/s, elapsed: 2496s, ETA:    61s[> ] 1953/2000, 0.8 task/s, elapsed: 2497s, ETA:    60s[> ] 1954/2000, 0.8 task/s, elapsed: 2498s, ETA:    59s[> ] 1955/2000, 0.8 task/s, elapsed: 2500s, ETA:    58s[> ] 1956/2000, 0.8 task/s, elapsed: 2501s, ETA:    56s[> ] 1957/2000, 0.8 task/s, elapsed: 2502s, ETA:    55s[> ] 1958/2000, 0.8 task/s, elapsed: 2504s, ETA:    54s[> ] 1959/2000, 0.8 task/s, elapsed: 2505s, ETA:    52s[> ] 1960/2000, 0.8 task/s, elapsed: 2506s, ETA:    51s[> ] 1961/2000, 0.8 task/s, elapsed: 2507s, ETA:    50s[> ] 1962/2000, 0.8 task/s, elapsed: 2509s, ETA:    49s[> ] 1963/2000, 0.8 task/s, elapsed: 2510s, ETA:    47s[> ] 1964/2000, 0.8 task/s, elapsed: 2511s, ETA:    46s[> ] 1965/2000, 0.8 task/s, elapsed: 2513s, ETA:    45s[> ] 1966/2000, 0.8 task/s, elapsed: 2514s, ETA:    43s[> ] 1967/2000, 0.8 task/s, elapsed: 2515s, ETA:    42s[> ] 1968/2000, 0.8 task/s, elapsed: 2516s, ETA:    41s[> ] 1969/2000, 0.8 task/s, elapsed: 2517s, ETA:    40s[> ] 1970/2000, 0.8 task/s, elapsed: 2518s, ETA:    38s[> ] 1971/2000, 0.8 task/s, elapsed: 2520s, ETA:    37s[> ] 1972/2000, 0.8 task/s, elapsed: 2521s, ETA:    36s[> ] 1973/2000, 0.8 task/s, elapsed: 2522s, ETA:    35s[> ] 1974/2000, 0.8 task/s, elapsed: 2524s, ETA:    33s[> ] 1975/2000, 0.8 task/s, elapsed: 2525s, ETA:    32s[> ] 1976/2000, 0.8 task/s, elapsed: 2526s, ETA:    31s[> ] 1977/2000, 0.8 task/s, elapsed: 2528s, ETA:    29s[> ] 1978/2000, 0.8 task/s, elapsed: 2529s, ETA:    28s[> ] 1979/2000, 0.8 task/s, elapsed: 2530s, ETA:    27s[> ] 1980/2000, 0.8 task/s, elapsed: 2531s, ETA:    26s[> ] 1981/2000, 0.8 task/s, elapsed: 2532s, ETA:    24s[> ] 1982/2000, 0.8 task/s, elapsed: 2533s, ETA:    23s[> ] 1983/2000, 0.8 task/s, elapsed: 2534s, ETA:    22s[> ] 1984/2000, 0.8 task/s, elapsed: 2536s, ETA:    20s[> ] 1985/2000, 0.8 task/s, elapsed: 2537s, ETA:    19s[> ] 1986/2000, 0.8 task/s, elapsed: 2538s, ETA:    18s[> ] 1987/2000, 0.8 task/s, elapsed: 2539s, ETA:    17s[> ] 1988/2000, 0.8 task/s, elapsed: 2541s, ETA:    15s[> ] 1989/2000, 0.8 task/s, elapsed: 2542s, ETA:    14s[> ] 1990/2000, 0.8 task/s, elapsed: 2543s, ETA:    13s[> ] 1991/2000, 0.8 task/s, elapsed: 2545s, ETA:    12s[> ] 1992/2000, 0.8 task/s, elapsed: 2546s, ETA:    10s[> ] 1993/2000, 0.8 task/s, elapsed: 2548s, ETA:     9s[> ] 1994/2000, 0.8 task/s, elapsed: 2548s, ETA:     8s[> ] 1995/2000, 0.8 task/s, elapsed: 2549s, ETA:     6s[> ] 1996/2000, 0.8 task/s, elapsed: 2551s, ETA:     5s[> ] 1997/2000, 0.8 task/s, elapsed: 2552s, ETA:     4s[> ] 1998/2000, 0.8 task/s, elapsed: 2553s, ETA:     3s[> ] 1999/2000, 0.8 task/s, elapsed: 2555s, ETA:     1s[>>] 2000/2000, 0.8 task/s, elapsed: 2556s, ETA:     0s

Start to convert detection format...
[                                                  ] 0/2000, elapsed: 0s, ETA:[  ] 1/2000, 45.8 task/s, elapsed: 0s, ETA:    44s[  ] 2/2000, 43.1 task/s, elapsed: 0s, ETA:    46s[  ] 3/2000, 43.3 task/s, elapsed: 0s, ETA:    46s[  ] 4/2000, 44.5 task/s, elapsed: 0s, ETA:    45s[  ] 5/2000, 45.6 task/s, elapsed: 0s, ETA:    44s[  ] 6/2000, 46.3 task/s, elapsed: 0s, ETA:    43s[  ] 7/2000, 46.8 task/s, elapsed: 0s, ETA:    43s[  ] 8/2000, 47.4 task/s, elapsed: 0s, ETA:    42s[  ] 9/2000, 47.8 task/s, elapsed: 0s, ETA:    42s[  ] 10/2000, 48.0 task/s, elapsed: 0s, ETA:    41s[  ] 11/2000, 48.1 task/s, elapsed: 0s, ETA:    41s[  ] 12/2000, 48.2 task/s, elapsed: 0s, ETA:    41s[  ] 13/2000, 48.3 task/s, elapsed: 0s, ETA:    41s[  ] 14/2000, 48.4 task/s, elapsed: 0s, ETA:    41s[  ] 15/2000, 48.5 task/s, elapsed: 0s, ETA:    41s[  ] 16/2000, 48.7 task/s, elapsed: 0s, ETA:    41s[  ] 17/2000, 48.8 task/s, elapsed: 0s, ETA:    41s[  ] 18/2000, 48.9 task/s, elapsed: 0s, ETA:    41s[  ] 19/2000, 48.9 task/s, elapsed: 0s, ETA:    41s[  ] 20/2000, 48.9 task/s, elapsed: 0s, ETA:    40s[  ] 21/2000, 48.9 task/s, elapsed: 0s, ETA:    40s[  ] 22/2000, 49.0 task/s, elapsed: 0s, ETA:    40s[  ] 23/2000, 49.1 task/s, elapsed: 0s, ETA:    40s[  ] 24/2000, 49.2 task/s, elapsed: 0s, ETA:    40s[  ] 25/2000, 49.2 task/s, elapsed: 1s, ETA:    40s[  ] 26/2000, 49.3 task/s, elapsed: 1s, ETA:    40s[  ] 27/2000, 49.4 task/s, elapsed: 1s, ETA:    40s[  ] 28/2000, 49.4 task/s, elapsed: 1s, ETA:    40s[  ] 29/2000, 49.4 task/s, elapsed: 1s, ETA:    40s[  ] 30/2000, 49.4 task/s, elapsed: 1s, ETA:    40s[  ] 31/2000, 49.5 task/s, elapsed: 1s, ETA:    40s[  ] 32/2000, 49.5 task/s, elapsed: 1s, ETA:    40s[  ] 33/2000, 49.6 task/s, elapsed: 1s, ETA:    40s[  ] 34/2000, 49.6 task/s, elapsed: 1s, ETA:    40s[  ] 35/2000, 49.7 task/s, elapsed: 1s, ETA:    40s[  ] 36/2000, 49.7 task/s, elapsed: 1s, ETA:    40s[  ] 37/2000, 49.7 task/s, elapsed: 1s, ETA:    39s[  ] 38/2000, 49.8 task/s, elapsed: 1s, ETA:    39s[  ] 39/2000, 49.8 task/s, elapsed: 1s, ETA:    39s[  ] 40/2000, 49.8 task/s, elapsed: 1s, ETA:    39s[  ] 41/2000, 33.0 task/s, elapsed: 1s, ETA:    59s[  ] 42/2000, 33.3 task/s, elapsed: 1s, ETA:    59s[  ] 43/2000, 33.5 task/s, elapsed: 1s, ETA:    58s[  ] 44/2000, 33.8 task/s, elapsed: 1s, ETA:    58s[  ] 45/2000, 34.1 task/s, elapsed: 1s, ETA:    57s[  ] 46/2000, 34.3 task/s, elapsed: 1s, ETA:    57s[  ] 47/2000, 34.5 task/s, elapsed: 1s, ETA:    57s[  ] 48/2000, 34.8 task/s, elapsed: 1s, ETA:    56s[  ] 49/2000, 35.0 task/s, elapsed: 1s, ETA:    56s[  ] 50/2000, 35.2 task/s, elapsed: 1s, ETA:    55s[  ] 51/2000, 35.4 task/s, elapsed: 1s, ETA:    55s[  ] 52/2000, 35.6 task/s, elapsed: 1s, ETA:    55s[  ] 53/2000, 35.7 task/s, elapsed: 1s, ETA:    54s[  ] 54/2000, 35.9 task/s, elapsed: 2s, ETA:    54s[  ] 55/2000, 36.1 task/s, elapsed: 2s, ETA:    54s[  ] 56/2000, 36.3 task/s, elapsed: 2s, ETA:    54s[  ] 57/2000, 36.5 task/s, elapsed: 2s, ETA:    53s[  ] 58/2000, 36.7 task/s, elapsed: 2s, ETA:    53s[  ] 59/2000, 36.8 task/s, elapsed: 2s, ETA:    53s[  ] 60/2000, 37.0 task/s, elapsed: 2s, ETA:    52s[  ] 61/2000, 37.2 task/s, elapsed: 2s, ETA:    52s[  ] 62/2000, 37.4 task/s, elapsed: 2s, ETA:    52s[  ] 63/2000, 37.5 task/s, elapsed: 2s, ETA:    52s[  ] 64/2000, 37.7 task/s, elapsed: 2s, ETA:    51s[  ] 65/2000, 37.9 task/s, elapsed: 2s, ETA:    51s[  ] 66/2000, 38.0 task/s, elapsed: 2s, ETA:    51s[  ] 67/2000, 38.2 task/s, elapsed: 2s, ETA:    51s[  ] 68/2000, 38.3 task/s, elapsed: 2s, ETA:    50s[  ] 69/2000, 38.5 task/s, elapsed: 2s, ETA:    50s[  ] 70/2000, 38.6 task/s, elapsed: 2s, ETA:    50s[  ] 71/2000, 38.7 task/s, elapsed: 2s, ETA:    50s[  ] 72/2000, 38.9 task/s, elapsed: 2s, ETA:    50s[  ] 73/2000, 39.0 task/s, elapsed: 2s, ETA:    49s[  ] 74/2000, 39.1 task/s, elapsed: 2s, ETA:    49s[  ] 75/2000, 39.3 task/s, elapsed: 2s, ETA:    49s[  ] 76/2000, 39.4 task/s, elapsed: 2s, ETA:    49s[  ] 77/2000, 39.5 task/s, elapsed: 2s, ETA:    49s[  ] 78/2000, 39.7 task/s, elapsed: 2s, ETA:    48s[  ] 79/2000, 39.8 task/s, elapsed: 2s, ETA:    48s[  ] 80/2000, 39.9 task/s, elapsed: 2s, ETA:    48s[  ] 81/2000, 40.0 task/s, elapsed: 2s, ETA:    48s[  ] 82/2000, 40.2 task/s, elapsed: 2s, ETA:    48s[  ] 83/2000, 40.3 task/s, elapsed: 2s, ETA:    48s[  ] 84/2000, 40.4 task/s, elapsed: 2s, ETA:    47s[  ] 85/2000, 40.5 task/s, elapsed: 2s, ETA:    47s[  ] 86/2000, 40.6 task/s, elapsed: 2s, ETA:    47s[  ] 87/2000, 40.7 task/s, elapsed: 2s, ETA:    47s[  ] 88/2000, 40.8 task/s, elapsed: 2s, ETA:    47s[  ] 89/2000, 40.9 task/s, elapsed: 2s, ETA:    47s[  ] 90/2000, 41.0 task/s, elapsed: 2s, ETA:    47s[  ] 91/2000, 41.1 task/s, elapsed: 2s, ETA:    46s[  ] 92/2000, 41.2 task/s, elapsed: 2s, ETA:    46s[  ] 93/2000, 41.3 task/s, elapsed: 2s, ETA:    46s[  ] 94/2000, 41.4 task/s, elapsed: 2s, ETA:    46s[  ] 95/2000, 41.4 task/s, elapsed: 2s, ETA:    46s[  ] 96/2000, 41.5 task/s, elapsed: 2s, ETA:    46s[  ] 97/2000, 41.6 task/s, elapsed: 2s, ETA:    46s[  ] 98/2000, 41.7 task/s, elapsed: 2s, ETA:    46s[  ] 99/2000, 41.8 task/s, elapsed: 2s, ETA:    46s[  ] 100/2000, 41.8 task/s, elapsed: 2s, ETA:    45s[  ] 101/2000, 41.9 task/s, elapsed: 2s, ETA:    45s[  ] 102/2000, 42.0 task/s, elapsed: 2s, ETA:    45s[  ] 103/2000, 42.1 task/s, elapsed: 2s, ETA:    45s[  ] 104/2000, 42.2 task/s, elapsed: 2s, ETA:    45s[  ] 105/2000, 42.3 task/s, elapsed: 2s, ETA:    45s[  ] 106/2000, 42.3 task/s, elapsed: 3s, ETA:    45s[  ] 107/2000, 42.4 task/s, elapsed: 3s, ETA:    45s[  ] 108/2000, 42.5 task/s, elapsed: 3s, ETA:    45s[  ] 109/2000, 42.5 task/s, elapsed: 3s, ETA:    44s[  ] 110/2000, 42.6 task/s, elapsed: 3s, ETA:    44s[  ] 111/2000, 42.6 task/s, elapsed: 3s, ETA:    44s[  ] 112/2000, 42.7 task/s, elapsed: 3s, ETA:    44s[  ] 113/2000, 42.7 task/s, elapsed: 3s, ETA:    44s[  ] 114/2000, 42.7 task/s, elapsed: 3s, ETA:    44s[  ] 115/2000, 42.8 task/s, elapsed: 3s, ETA:    44s[  ] 116/2000, 42.9 task/s, elapsed: 3s, ETA:    44s[  ] 117/2000, 42.9 task/s, elapsed: 3s, ETA:    44s[  ] 118/2000, 43.0 task/s, elapsed: 3s, ETA:    44s[  ] 119/2000, 43.0 task/s, elapsed: 3s, ETA:    44s[  ] 120/2000, 43.0 task/s, elapsed: 3s, ETA:    44s[  ] 121/2000, 43.1 task/s, elapsed: 3s, ETA:    44s[  ] 122/2000, 43.1 task/s, elapsed: 3s, ETA:    44s[  ] 123/2000, 43.2 task/s, elapsed: 3s, ETA:    43s[  ] 124/2000, 43.2 task/s, elapsed: 3s, ETA:    43s[  ] 125/2000, 43.3 task/s, elapsed: 3s, ETA:    43s[  ] 126/2000, 43.3 task/s, elapsed: 3s, ETA:    43s[  ] 127/2000, 43.4 task/s, elapsed: 3s, ETA:    43s[  ] 128/2000, 43.4 task/s, elapsed: 3s, ETA:    43s[  ] 129/2000, 43.5 task/s, elapsed: 3s, ETA:    43s[  ] 130/2000, 43.5 task/s, elapsed: 3s, ETA:    43s[  ] 131/2000, 43.6 task/s, elapsed: 3s, ETA:    43s[  ] 132/2000, 43.6 task/s, elapsed: 3s, ETA:    43s[  ] 133/2000, 43.7 task/s, elapsed: 3s, ETA:    43s[  ] 134/2000, 43.7 task/s, elapsed: 3s, ETA:    43s[  ] 135/2000, 43.8 task/s, elapsed: 3s, ETA:    43s[  ] 136/2000, 43.8 task/s, elapsed: 3s, ETA:    43s[  ] 137/2000, 43.9 task/s, elapsed: 3s, ETA:    42s[  ] 138/2000, 43.9 task/s, elapsed: 3s, ETA:    42s[  ] 139/2000, 44.0 task/s, elapsed: 3s, ETA:    42s[  ] 140/2000, 44.0 task/s, elapsed: 3s, ETA:    42s[  ] 141/2000, 44.1 task/s, elapsed: 3s, ETA:    42s[  ] 142/2000, 44.1 task/s, elapsed: 3s, ETA:    42s[  ] 143/2000, 44.2 task/s, elapsed: 3s, ETA:    42s[  ] 144/2000, 44.2 task/s, elapsed: 3s, ETA:    42s[  ] 145/2000, 44.3 task/s, elapsed: 3s, ETA:    42s[  ] 146/2000, 44.3 task/s, elapsed: 3s, ETA:    42s[  ] 147/2000, 44.3 task/s, elapsed: 3s, ETA:    42s[  ] 148/2000, 44.4 task/s, elapsed: 3s, ETA:    42s[  ] 149/2000, 44.4 task/s, elapsed: 3s, ETA:    42s[  ] 150/2000, 44.5 task/s, elapsed: 3s, ETA:    42s[  ] 151/2000, 44.5 task/s, elapsed: 3s, ETA:    42s[  ] 152/2000, 44.5 task/s, elapsed: 3s, ETA:    41s[  ] 153/2000, 44.6 task/s, elapsed: 3s, ETA:    41s[  ] 154/2000, 44.6 task/s, elapsed: 3s, ETA:    41s[  ] 155/2000, 44.7 task/s, elapsed: 3s, ETA:    41s[  ] 156/2000, 44.7 task/s, elapsed: 3s, ETA:    41s[  ] 157/2000, 44.7 task/s, elapsed: 4s, ETA:    41s[  ] 158/2000, 44.8 task/s, elapsed: 4s, ETA:    41s[  ] 159/2000, 44.8 task/s, elapsed: 4s, ETA:    41s[  ] 160/2000, 44.8 task/s, elapsed: 4s, ETA:    41s[  ] 161/2000, 44.8 task/s, elapsed: 4s, ETA:    41s[  ] 162/2000, 44.9 task/s, elapsed: 4s, ETA:    41s[  ] 163/2000, 44.9 task/s, elapsed: 4s, ETA:    41s[  ] 164/2000, 44.9 task/s, elapsed: 4s, ETA:    41s[  ] 165/2000, 44.9 task/s, elapsed: 4s, ETA:    41s[  ] 166/2000, 44.9 task/s, elapsed: 4s, ETA:    41s[  ] 167/2000, 45.0 task/s, elapsed: 4s, ETA:    41s[  ] 168/2000, 45.0 task/s, elapsed: 4s, ETA:    41s[  ] 169/2000, 45.0 task/s, elapsed: 4s, ETA:    41s[  ] 170/2000, 45.0 task/s, elapsed: 4s, ETA:    41s[  ] 171/2000, 45.0 task/s, elapsed: 4s, ETA:    41s[  ] 172/2000, 45.0 task/s, elapsed: 4s, ETA:    41s[  ] 173/2000, 45.1 task/s, elapsed: 4s, ETA:    41s[  ] 174/2000, 45.1 task/s, elapsed: 4s, ETA:    41s[  ] 175/2000, 45.1 task/s, elapsed: 4s, ETA:    40s[  ] 176/2000, 45.1 task/s, elapsed: 4s, ETA:    40s[  ] 177/2000, 45.1 task/s, elapsed: 4s, ETA:    40s[  ] 178/2000, 45.2 task/s, elapsed: 4s, ETA:    40s[  ] 179/2000, 45.2 task/s, elapsed: 4s, ETA:    40s[  ] 180/2000, 45.2 task/s, elapsed: 4s, ETA:    40s[  ] 181/2000, 45.2 task/s, elapsed: 4s, ETA:    40s[  ] 182/2000, 45.2 task/s, elapsed: 4s, ETA:    40s[  ] 183/2000, 45.2 task/s, elapsed: 4s, ETA:    40s[  ] 184/2000, 45.3 task/s, elapsed: 4s, ETA:    40s[  ] 185/2000, 45.3 task/s, elapsed: 4s, ETA:    40s[  ] 186/2000, 45.3 task/s, elapsed: 4s, ETA:    40s[  ] 187/2000, 45.3 task/s, elapsed: 4s, ETA:    40s[  ] 188/2000, 45.3 task/s, elapsed: 4s, ETA:    40s[  ] 189/2000, 45.3 task/s, elapsed: 4s, ETA:    40s[  ] 190/2000, 45.4 task/s, elapsed: 4s, ETA:    40s[  ] 191/2000, 45.4 task/s, elapsed: 4s, ETA:    40s[  ] 192/2000, 45.4 task/s, elapsed: 4s, ETA:    40s[  ] 193/2000, 45.5 task/s, elapsed: 4s, ETA:    40s[  ] 194/2000, 45.5 task/s, elapsed: 4s, ETA:    40s[  ] 195/2000, 45.5 task/s, elapsed: 4s, ETA:    40s[  ] 196/2000, 45.5 task/s, elapsed: 4s, ETA:    40s[  ] 197/2000, 45.5 task/s, elapsed: 4s, ETA:    40s[  ] 198/2000, 45.6 task/s, elapsed: 4s, ETA:    40s[  ] 199/2000, 45.6 task/s, elapsed: 4s, ETA:    40s[  ] 200/2000, 45.6 task/s, elapsed: 4s, ETA:    39s[  ] 201/2000, 45.7 task/s, elapsed: 4s, ETA:    39s[  ] 202/2000, 45.7 task/s, elapsed: 4s, ETA:    39s[  ] 203/2000, 45.7 task/s, elapsed: 4s, ETA:    39s[  ] 204/2000, 45.8 task/s, elapsed: 4s, ETA:    39s[  ] 205/2000, 45.8 task/s, elapsed: 4s, ETA:    39s[  ] 206/2000, 45.8 task/s, elapsed: 4s, ETA:    39s[  ] 207/2000, 45.9 task/s, elapsed: 5s, ETA:    39s[  ] 208/2000, 45.9 task/s, elapsed: 5s, ETA:    39s[  ] 209/2000, 45.9 task/s, elapsed: 5s, ETA:    39s[  ] 210/2000, 45.9 task/s, elapsed: 5s, ETA:    39s[  ] 211/2000, 46.0 task/s, elapsed: 5s, ETA:    39s[  ] 212/2000, 46.0 task/s, elapsed: 5s, ETA:    39s[  ] 213/2000, 46.0 task/s, elapsed: 5s, ETA:    39s[  ] 214/2000, 46.1 task/s, elapsed: 5s, ETA:    39s[  ] 215/2000, 46.1 task/s, elapsed: 5s, ETA:    39s[  ] 216/2000, 46.1 task/s, elapsed: 5s, ETA:    39s[  ] 217/2000, 46.1 task/s, elapsed: 5s, ETA:    39s[  ] 218/2000, 46.2 task/s, elapsed: 5s, ETA:    39s[  ] 219/2000, 46.2 task/s, elapsed: 5s, ETA:    39s[  ] 220/2000, 46.2 task/s, elapsed: 5s, ETA:    39s[  ] 221/2000, 46.2 task/s, elapsed: 5s, ETA:    38s[  ] 222/2000, 46.3 task/s, elapsed: 5s, ETA:    38s[  ] 223/2000, 46.3 task/s, elapsed: 5s, ETA:    38s[  ] 224/2000, 46.3 task/s, elapsed: 5s, ETA:    38s[  ] 225/2000, 46.3 task/s, elapsed: 5s, ETA:    38s[  ] 226/2000, 46.4 task/s, elapsed: 5s, ETA:    38s[  ] 227/2000, 46.4 task/s, elapsed: 5s, ETA:    38s[  ] 228/2000, 46.4 task/s, elapsed: 5s, ETA:    38s[  ] 229/2000, 46.4 task/s, elapsed: 5s, ETA:    38s[  ] 230/2000, 46.5 task/s, elapsed: 5s, ETA:    38s[  ] 231/2000, 46.5 task/s, elapsed: 5s, ETA:    38s[  ] 232/2000, 46.5 task/s, elapsed: 5s, ETA:    38s[  ] 233/2000, 46.5 task/s, elapsed: 5s, ETA:    38s[  ] 234/2000, 46.6 task/s, elapsed: 5s, ETA:    38s[  ] 235/2000, 46.6 task/s, elapsed: 5s, ETA:    38s[  ] 236/2000, 46.6 task/s, elapsed: 5s, ETA:    38s[  ] 237/2000, 46.6 task/s, elapsed: 5s, ETA:    38s[  ] 238/2000, 46.6 task/s, elapsed: 5s, ETA:    38s[  ] 239/2000, 46.7 task/s, elapsed: 5s, ETA:    38s[  ] 240/2000, 46.7 task/s, elapsed: 5s, ETA:    38s[  ] 241/2000, 46.7 task/s, elapsed: 5s, ETA:    38s[  ] 242/2000, 46.7 task/s, elapsed: 5s, ETA:    38s[  ] 243/2000, 46.8 task/s, elapsed: 5s, ETA:    38s[  ] 244/2000, 46.8 task/s, elapsed: 5s, ETA:    38s[  ] 245/2000, 46.8 task/s, elapsed: 5s, ETA:    37s[  ] 246/2000, 46.8 task/s, elapsed: 5s, ETA:    37s[  ] 247/2000, 46.8 task/s, elapsed: 5s, ETA:    37s[  ] 248/2000, 46.9 task/s, elapsed: 5s, ETA:    37s[  ] 249/2000, 46.9 task/s, elapsed: 5s, ETA:    37s[  ] 250/2000, 46.9 task/s, elapsed: 5s, ETA:    37s[  ] 251/2000, 46.9 task/s, elapsed: 5s, ETA:    37s[  ] 252/2000, 46.9 task/s, elapsed: 5s, ETA:    37s[  ] 253/2000, 47.0 task/s, elapsed: 5s, ETA:    37s[  ] 254/2000, 47.0 task/s, elapsed: 5s, ETA:    37s[  ] 255/2000, 47.0 task/s, elapsed: 5s, ETA:    37s[  ] 256/2000, 47.0 task/s, elapsed: 5s, ETA:    37s[  ] 257/2000, 47.1 task/s, elapsed: 5s, ETA:    37s[  ] 258/2000, 47.1 task/s, elapsed: 5s, ETA:    37s[  ] 259/2000, 47.1 task/s, elapsed: 5s, ETA:    37s[  ] 260/2000, 47.1 task/s, elapsed: 6s, ETA:    37s[  ] 261/2000, 47.1 task/s, elapsed: 6s, ETA:    37s[  ] 262/2000, 47.2 task/s, elapsed: 6s, ETA:    37s[  ] 263/2000, 47.2 task/s, elapsed: 6s, ETA:    37s[  ] 264/2000, 47.2 task/s, elapsed: 6s, ETA:    37s[  ] 265/2000, 47.2 task/s, elapsed: 6s, ETA:    37s[  ] 266/2000, 47.2 task/s, elapsed: 6s, ETA:    37s[  ] 267/2000, 47.3 task/s, elapsed: 6s, ETA:    37s[  ] 268/2000, 47.3 task/s, elapsed: 6s, ETA:    37s[  ] 269/2000, 47.3 task/s, elapsed: 6s, ETA:    37s[  ] 270/2000, 47.3 task/s, elapsed: 6s, ETA:    37s[  ] 271/2000, 47.3 task/s, elapsed: 6s, ETA:    37s[  ] 272/2000, 47.4 task/s, elapsed: 6s, ETA:    36s[  ] 273/2000, 47.4 task/s, elapsed: 6s, ETA:    36s[  ] 274/2000, 47.4 task/s, elapsed: 6s, ETA:    36s[  ] 275/2000, 47.4 task/s, elapsed: 6s, ETA:    36s[  ] 276/2000, 47.4 task/s, elapsed: 6s, ETA:    36s[  ] 277/2000, 47.4 task/s, elapsed: 6s, ETA:    36s[  ] 278/2000, 47.5 task/s, elapsed: 6s, ETA:    36s[  ] 279/2000, 47.5 task/s, elapsed: 6s, ETA:    36s[  ] 280/2000, 47.5 task/s, elapsed: 6s, ETA:    36s[  ] 281/2000, 47.5 task/s, elapsed: 6s, ETA:    36s[  ] 282/2000, 47.5 task/s, elapsed: 6s, ETA:    36s[  ] 283/2000, 47.5 task/s, elapsed: 6s, ETA:    36s[  ] 284/2000, 47.5 task/s, elapsed: 6s, ETA:    36s[  ] 285/2000, 47.6 task/s, elapsed: 6s, ETA:    36s[  ] 286/2000, 47.6 task/s, elapsed: 6s, ETA:    36s[  ] 287/2000, 47.6 task/s, elapsed: 6s, ETA:    36s[  ] 288/2000, 47.6 task/s, elapsed: 6s, ETA:    36s[  ] 289/2000, 47.6 task/s, elapsed: 6s, ETA:    36s[  ] 290/2000, 47.6 task/s, elapsed: 6s, ETA:    36s[  ] 291/2000, 47.6 task/s, elapsed: 6s, ETA:    36s[  ] 292/2000, 47.7 task/s, elapsed: 6s, ETA:    36s[  ] 293/2000, 47.7 task/s, elapsed: 6s, ETA:    36s[  ] 294/2000, 47.7 task/s, elapsed: 6s, ETA:    36s[  ] 295/2000, 47.7 task/s, elapsed: 6s, ETA:    36s[  ] 296/2000, 47.7 task/s, elapsed: 6s, ETA:    36s[  ] 297/2000, 47.7 task/s, elapsed: 6s, ETA:    36s[  ] 298/2000, 47.7 task/s, elapsed: 6s, ETA:    36s[  ] 299/2000, 47.7 task/s, elapsed: 6s, ETA:    36s[  ] 300/2000, 47.8 task/s, elapsed: 6s, ETA:    36s[  ] 301/2000, 47.8 task/s, elapsed: 6s, ETA:    36s[  ] 302/2000, 47.8 task/s, elapsed: 6s, ETA:    36s[  ] 303/2000, 47.8 task/s, elapsed: 6s, ETA:    36s[  ] 304/2000, 47.8 task/s, elapsed: 6s, ETA:    36s[  ] 305/2000, 47.8 task/s, elapsed: 6s, ETA:    35s[  ] 306/2000, 47.8 task/s, elapsed: 6s, ETA:    35s[  ] 307/2000, 47.8 task/s, elapsed: 6s, ETA:    35s[  ] 308/2000, 47.8 task/s, elapsed: 6s, ETA:    35s[  ] 309/2000, 47.8 task/s, elapsed: 6s, ETA:    35s[  ] 310/2000, 47.8 task/s, elapsed: 6s, ETA:    35s[  ] 311/2000, 47.8 task/s, elapsed: 7s, ETA:    35s[  ] 312/2000, 47.8 task/s, elapsed: 7s, ETA:    35s[  ] 313/2000, 47.9 task/s, elapsed: 7s, ETA:    35s[  ] 314/2000, 47.9 task/s, elapsed: 7s, ETA:    35s[  ] 315/2000, 47.9 task/s, elapsed: 7s, ETA:    35s[  ] 316/2000, 47.9 task/s, elapsed: 7s, ETA:    35s[  ] 317/2000, 47.9 task/s, elapsed: 7s, ETA:    35s[  ] 318/2000, 47.9 task/s, elapsed: 7s, ETA:    35s[  ] 319/2000, 47.9 task/s, elapsed: 7s, ETA:    35s[  ] 320/2000, 48.0 task/s, elapsed: 7s, ETA:    35s[  ] 321/2000, 48.0 task/s, elapsed: 7s, ETA:    35s[  ] 322/2000, 48.0 task/s, elapsed: 7s, ETA:    35s[  ] 323/2000, 48.0 task/s, elapsed: 7s, ETA:    35s[  ] 324/2000, 48.0 task/s, elapsed: 7s, ETA:    35s[  ] 325/2000, 48.0 task/s, elapsed: 7s, ETA:    35s[  ] 326/2000, 48.0 task/s, elapsed: 7s, ETA:    35s[  ] 327/2000, 48.1 task/s, elapsed: 7s, ETA:    35s[  ] 328/2000, 48.1 task/s, elapsed: 7s, ETA:    35s[  ] 329/2000, 48.1 task/s, elapsed: 7s, ETA:    35s[  ] 330/2000, 48.1 task/s, elapsed: 7s, ETA:    35s[  ] 331/2000, 48.1 task/s, elapsed: 7s, ETA:    35s[  ] 332/2000, 48.1 task/s, elapsed: 7s, ETA:    35s[  ] 333/2000, 48.2 task/s, elapsed: 7s, ETA:    35s[  ] 334/2000, 48.2 task/s, elapsed: 7s, ETA:    35s[  ] 335/2000, 48.2 task/s, elapsed: 7s, ETA:    35s[  ] 336/2000, 48.2 task/s, elapsed: 7s, ETA:    35s[  ] 337/2000, 48.2 task/s, elapsed: 7s, ETA:    34s[  ] 338/2000, 48.2 task/s, elapsed: 7s, ETA:    34s[  ] 339/2000, 48.3 task/s, elapsed: 7s, ETA:    34s[  ] 340/2000, 48.3 task/s, elapsed: 7s, ETA:    34s[  ] 341/2000, 48.3 task/s, elapsed: 7s, ETA:    34s[  ] 342/2000, 48.3 task/s, elapsed: 7s, ETA:    34s[  ] 343/2000, 48.3 task/s, elapsed: 7s, ETA:    34s[  ] 344/2000, 48.3 task/s, elapsed: 7s, ETA:    34s[  ] 345/2000, 48.3 task/s, elapsed: 7s, ETA:    34s[  ] 346/2000, 48.4 task/s, elapsed: 7s, ETA:    34s[  ] 347/2000, 48.4 task/s, elapsed: 7s, ETA:    34s[  ] 348/2000, 48.4 task/s, elapsed: 7s, ETA:    34s[  ] 349/2000, 48.4 task/s, elapsed: 7s, ETA:    34s[  ] 350/2000, 48.4 task/s, elapsed: 7s, ETA:    34s[  ] 351/2000, 48.4 task/s, elapsed: 7s, ETA:    34s[  ] 352/2000, 48.5 task/s, elapsed: 7s, ETA:    34s[  ] 353/2000, 48.5 task/s, elapsed: 7s, ETA:    34s[  ] 354/2000, 48.5 task/s, elapsed: 7s, ETA:    34s[  ] 355/2000, 48.5 task/s, elapsed: 7s, ETA:    34s[  ] 356/2000, 48.5 task/s, elapsed: 7s, ETA:    34s[  ] 357/2000, 48.5 task/s, elapsed: 7s, ETA:    34s[  ] 358/2000, 48.5 task/s, elapsed: 7s, ETA:    34s[  ] 359/2000, 48.6 task/s, elapsed: 7s, ETA:    34s[  ] 360/2000, 48.6 task/s, elapsed: 7s, ETA:    34s[  ] 361/2000, 48.6 task/s, elapsed: 7s, ETA:    34s[  ] 362/2000, 48.6 task/s, elapsed: 7s, ETA:    34s[  ] 363/2000, 48.6 task/s, elapsed: 7s, ETA:    34s[  ] 364/2000, 45.8 task/s, elapsed: 8s, ETA:    36s[  ] 365/2000, 45.8 task/s, elapsed: 8s, ETA:    36s[  ] 366/2000, 45.8 task/s, elapsed: 8s, ETA:    36s[  ] 367/2000, 45.8 task/s, elapsed: 8s, ETA:    36s[  ] 368/2000, 45.8 task/s, elapsed: 8s, ETA:    36s[  ] 369/2000, 45.8 task/s, elapsed: 8s, ETA:    36s[  ] 370/2000, 45.9 task/s, elapsed: 8s, ETA:    36s[  ] 371/2000, 45.9 task/s, elapsed: 8s, ETA:    36s[  ] 372/2000, 45.9 task/s, elapsed: 8s, ETA:    35s[  ] 373/2000, 45.9 task/s, elapsed: 8s, ETA:    35s[  ] 374/2000, 45.9 task/s, elapsed: 8s, ETA:    35s[  ] 375/2000, 46.0 task/s, elapsed: 8s, ETA:    35s[  ] 376/2000, 46.0 task/s, elapsed: 8s, ETA:    35s[  ] 377/2000, 46.0 task/s, elapsed: 8s, ETA:    35s[  ] 378/2000, 46.0 task/s, elapsed: 8s, ETA:    35s[  ] 379/2000, 46.0 task/s, elapsed: 8s, ETA:    35s[  ] 380/2000, 46.1 task/s, elapsed: 8s, ETA:    35s[  ] 381/2000, 46.1 task/s, elapsed: 8s, ETA:    35s[  ] 382/2000, 46.1 task/s, elapsed: 8s, ETA:    35s[  ] 383/2000, 46.1 task/s, elapsed: 8s, ETA:    35s[  ] 384/2000, 46.1 task/s, elapsed: 8s, ETA:    35s[  ] 385/2000, 46.1 task/s, elapsed: 8s, ETA:    35s[  ] 386/2000, 46.2 task/s, elapsed: 8s, ETA:    35s[  ] 387/2000, 46.2 task/s, elapsed: 8s, ETA:    35s[  ] 388/2000, 46.2 task/s, elapsed: 8s, ETA:    35s[  ] 389/2000, 46.2 task/s, elapsed: 8s, ETA:    35s[  ] 390/2000, 46.2 task/s, elapsed: 8s, ETA:    35s[  ] 391/2000, 46.3 task/s, elapsed: 8s, ETA:    35s[  ] 392/2000, 46.3 task/s, elapsed: 8s, ETA:    35s[  ] 393/2000, 46.3 task/s, elapsed: 8s, ETA:    35s[  ] 394/2000, 46.3 task/s, elapsed: 9s, ETA:    35s[  ] 395/2000, 46.3 task/s, elapsed: 9s, ETA:    35s[  ] 396/2000, 46.3 task/s, elapsed: 9s, ETA:    35s[  ] 397/2000, 46.4 task/s, elapsed: 9s, ETA:    35s[  ] 398/2000, 46.4 task/s, elapsed: 9s, ETA:    35s[  ] 399/2000, 46.4 task/s, elapsed: 9s, ETA:    35s[  ] 400/2000, 46.4 task/s, elapsed: 9s, ETA:    34s[  ] 401/2000, 46.4 task/s, elapsed: 9s, ETA:    34s[  ] 402/2000, 46.4 task/s, elapsed: 9s, ETA:    34s[  ] 403/2000, 46.4 task/s, elapsed: 9s, ETA:    34s[  ] 404/2000, 46.4 task/s, elapsed: 9s, ETA:    34s[  ] 405/2000, 46.4 task/s, elapsed: 9s, ETA:    34s[  ] 406/2000, 46.5 task/s, elapsed: 9s, ETA:    34s[  ] 407/2000, 46.5 task/s, elapsed: 9s, ETA:    34s[  ] 408/2000, 46.5 task/s, elapsed: 9s, ETA:    34s[  ] 409/2000, 46.5 task/s, elapsed: 9s, ETA:    34s[  ] 410/2000, 46.5 task/s, elapsed: 9s, ETA:    34s[  ] 411/2000, 46.5 task/s, elapsed: 9s, ETA:    34s[  ] 412/2000, 46.5 task/s, elapsed: 9s, ETA:    34s[  ] 413/2000, 46.5 task/s, elapsed: 9s, ETA:    34s[  ] 414/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 415/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 416/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 417/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 418/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 419/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 420/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 421/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 422/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 423/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 424/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 425/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 426/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 427/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 428/2000, 46.6 task/s, elapsed: 9s, ETA:    34s[  ] 429/2000, 46.7 task/s, elapsed: 9s, ETA:    34s[  ] 430/2000, 46.7 task/s, elapsed: 9s, ETA:    34s[  ] 431/2000, 46.7 task/s, elapsed: 9s, ETA:    34s[  ] 432/2000, 46.7 task/s, elapsed: 9s, ETA:    34s[  ] 433/2000, 46.7 task/s, elapsed: 9s, ETA:    34s[  ] 434/2000, 46.7 task/s, elapsed: 9s, ETA:    34s[  ] 435/2000, 46.7 task/s, elapsed: 9s, ETA:    34s[  ] 436/2000, 46.7 task/s, elapsed: 9s, ETA:    33s[  ] 437/2000, 46.7 task/s, elapsed: 9s, ETA:    33s[  ] 438/2000, 46.7 task/s, elapsed: 9s, ETA:    33s[  ] 439/2000, 46.7 task/s, elapsed: 9s, ETA:    33s[  ] 440/2000, 46.7 task/s, elapsed: 9s, ETA:    33s[  ] 441/2000, 46.7 task/s, elapsed: 9s, ETA:    33s[  ] 442/2000, 46.8 task/s, elapsed: 9s, ETA:    33s[  ] 443/2000, 46.8 task/s, elapsed: 9s, ETA:    33s[  ] 444/2000, 46.8 task/s, elapsed: 9s, ETA:    33s[  ] 445/2000, 46.8 task/s, elapsed: 10s, ETA:    33s[  ] 446/2000, 46.8 task/s, elapsed: 10s, ETA:    33s[  ] 447/2000, 46.8 task/s, elapsed: 10s, ETA:    33s[  ] 448/2000, 46.8 task/s, elapsed: 10s, ETA:    33s[  ] 449/2000, 46.9 task/s, elapsed: 10s, ETA:    33s[  ] 450/2000, 46.9 task/s, elapsed: 10s, ETA:    33s[  ] 451/2000, 46.9 task/s, elapsed: 10s, ETA:    33s[  ] 452/2000, 46.9 task/s, elapsed: 10s, ETA:    33s[  ] 453/2000, 46.9 task/s, elapsed: 10s, ETA:    33s[  ] 454/2000, 46.9 task/s, elapsed: 10s, ETA:    33s[  ] 455/2000, 46.9 task/s, elapsed: 10s, ETA:    33s[  ] 456/2000, 46.9 task/s, elapsed: 10s, ETA:    33s[  ] 457/2000, 47.0 task/s, elapsed: 10s, ETA:    33s[  ] 458/2000, 47.0 task/s, elapsed: 10s, ETA:    33s[  ] 459/2000, 47.0 task/s, elapsed: 10s, ETA:    33s[  ] 460/2000, 47.0 task/s, elapsed: 10s, ETA:    33s[  ] 461/2000, 47.0 task/s, elapsed: 10s, ETA:    33s[  ] 462/2000, 47.0 task/s, elapsed: 10s, ETA:    33s[  ] 463/2000, 47.0 task/s, elapsed: 10s, ETA:    33s[  ] 464/2000, 47.1 task/s, elapsed: 10s, ETA:    33s[  ] 465/2000, 47.1 task/s, elapsed: 10s, ETA:    33s[  ] 466/2000, 47.1 task/s, elapsed: 10s, ETA:    33s[  ] 467/2000, 47.1 task/s, elapsed: 10s, ETA:    33s[  ] 468/2000, 47.1 task/s, elapsed: 10s, ETA:    33s[  ] 469/2000, 47.1 task/s, elapsed: 10s, ETA:    32s[  ] 470/2000, 47.1 task/s, elapsed: 10s, ETA:    32s[  ] 471/2000, 47.1 task/s, elapsed: 10s, ETA:    32s[  ] 472/2000, 47.1 task/s, elapsed: 10s, ETA:    32s[  ] 473/2000, 47.2 task/s, elapsed: 10s, ETA:    32s[  ] 474/2000, 47.2 task/s, elapsed: 10s, ETA:    32s[  ] 475/2000, 47.2 task/s, elapsed: 10s, ETA:    32s[  ] 476/2000, 47.2 task/s, elapsed: 10s, ETA:    32s[  ] 477/2000, 47.2 task/s, elapsed: 10s, ETA:    32s[  ] 478/2000, 47.2 task/s, elapsed: 10s, ETA:    32s[  ] 479/2000, 47.2 task/s, elapsed: 10s, ETA:    32s[  ] 480/2000, 47.2 task/s, elapsed: 10s, ETA:    32s[  ] 481/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 482/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 483/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 484/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 485/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 486/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 487/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 488/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 489/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 490/2000, 47.3 task/s, elapsed: 10s, ETA:    32s[  ] 491/2000, 47.4 task/s, elapsed: 10s, ETA:    32s[  ] 492/2000, 47.4 task/s, elapsed: 10s, ETA:    32s[  ] 493/2000, 47.4 task/s, elapsed: 10s, ETA:    32s[  ] 494/2000, 47.4 task/s, elapsed: 10s, ETA:    32s[  ] 495/2000, 47.4 task/s, elapsed: 10s, ETA:    32s[  ] 496/2000, 47.4 task/s, elapsed: 10s, ETA:    32s[  ] 497/2000, 47.4 task/s, elapsed: 10s, ETA:    32s[  ] 498/2000, 47.4 task/s, elapsed: 11s, ETA:    32s[  ] 499/2000, 47.4 task/s, elapsed: 11s, ETA:    32s[  ] 500/2000, 47.4 task/s, elapsed: 11s, ETA:    32s[  ] 501/2000, 47.4 task/s, elapsed: 11s, ETA:    32s[  ] 502/2000, 47.5 task/s, elapsed: 11s, ETA:    32s[  ] 503/2000, 47.5 task/s, elapsed: 11s, ETA:    32s[  ] 504/2000, 47.5 task/s, elapsed: 11s, ETA:    32s[  ] 505/2000, 47.5 task/s, elapsed: 11s, ETA:    31s[  ] 506/2000, 47.5 task/s, elapsed: 11s, ETA:    31s[  ] 507/2000, 47.5 task/s, elapsed: 11s, ETA:    31s[  ] 508/2000, 47.5 task/s, elapsed: 11s, ETA:    31s[  ] 509/2000, 47.5 task/s, elapsed: 11s, ETA:    31s[  ] 510/2000, 47.5 task/s, elapsed: 11s, ETA:    31s[  ] 511/2000, 47.5 task/s, elapsed: 11s, ETA:    31s[  ] 512/2000, 47.5 task/s, elapsed: 11s, ETA:    31s[  ] 513/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 514/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 515/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 516/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 517/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 518/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 519/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 520/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 521/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 522/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 523/2000, 47.6 task/s, elapsed: 11s, ETA:    31s[  ] 524/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 525/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 526/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 527/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 528/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 529/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 530/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 531/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 532/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 533/2000, 47.7 task/s, elapsed: 11s, ETA:    31s[  ] 534/2000, 47.8 task/s, elapsed: 11s, ETA:    31s[  ] 535/2000, 47.8 task/s, elapsed: 11s, ETA:    31s[  ] 536/2000, 47.8 task/s, elapsed: 11s, ETA:    31s[  ] 537/2000, 47.8 task/s, elapsed: 11s, ETA:    31s[  ] 538/2000, 47.8 task/s, elapsed: 11s, ETA:    31s[  ] 539/2000, 47.8 task/s, elapsed: 11s, ETA:    31s[  ] 540/2000, 47.8 task/s, elapsed: 11s, ETA:    31s[  ] 541/2000, 47.8 task/s, elapsed: 11s, ETA:    31s[  ] 542/2000, 47.8 task/s, elapsed: 11s, ETA:    30s[  ] 543/2000, 47.8 task/s, elapsed: 11s, ETA:    30s[  ] 544/2000, 47.8 task/s, elapsed: 11s, ETA:    30s[  ] 545/2000, 47.8 task/s, elapsed: 11s, ETA:    30s[  ] 546/2000, 47.8 task/s, elapsed: 11s, ETA:    30s[  ] 547/2000, 47.9 task/s, elapsed: 11s, ETA:    30s[  ] 548/2000, 47.9 task/s, elapsed: 11s, ETA:    30s[  ] 549/2000, 47.9 task/s, elapsed: 11s, ETA:    30s[  ] 550/2000, 47.9 task/s, elapsed: 11s, ETA:    30s[  ] 551/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 552/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 553/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 554/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 555/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 556/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 557/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 558/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 559/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 560/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 561/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 562/2000, 47.9 task/s, elapsed: 12s, ETA:    30s[  ] 563/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 564/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 565/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 566/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 567/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 568/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 569/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 570/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 571/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 572/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 573/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 574/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 575/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 576/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 577/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 578/2000, 48.0 task/s, elapsed: 12s, ETA:    30s[  ] 579/2000, 48.1 task/s, elapsed: 12s, ETA:    30s[  ] 580/2000, 48.1 task/s, elapsed: 12s, ETA:    30s[  ] 581/2000, 48.1 task/s, elapsed: 12s, ETA:    30s[  ] 582/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 583/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 584/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 585/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 586/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 587/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 588/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 589/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 590/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 591/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 592/2000, 48.1 task/s, elapsed: 12s, ETA:    29s[  ] 593/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 594/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 595/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 596/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 597/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 598/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 599/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 600/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 601/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 602/2000, 48.2 task/s, elapsed: 12s, ETA:    29s[  ] 603/2000, 48.2 task/s, elapsed: 13s, ETA:    29s[  ] 604/2000, 48.2 task/s, elapsed: 13s, ETA:    29s[  ] 605/2000, 48.2 task/s, elapsed: 13s, ETA:    29s[  ] 606/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 607/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 608/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 609/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 610/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 611/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 612/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 613/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 614/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 615/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 616/2000, 48.3 task/s, elapsed: 13s, ETA:    29s[  ] 617/2000, 48.4 task/s, elapsed: 13s, ETA:    29s[  ] 618/2000, 48.4 task/s, elapsed: 13s, ETA:    29s[  ] 619/2000, 48.4 task/s, elapsed: 13s, ETA:    29s[  ] 620/2000, 48.4 task/s, elapsed: 13s, ETA:    29s[  ] 621/2000, 48.4 task/s, elapsed: 13s, ETA:    28s[  ] 622/2000, 48.4 task/s, elapsed: 13s, ETA:    28s[  ] 623/2000, 48.4 task/s, elapsed: 13s, ETA:    28s[  ] 624/2000, 48.4 task/s, elapsed: 13s, ETA:    28s[  ] 625/2000, 48.4 task/s, elapsed: 13s, ETA:    28s[  ] 626/2000, 48.4 task/s, elapsed: 13s, ETA:    28s[  ] 627/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 628/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 629/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 630/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 631/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 632/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 633/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 634/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 635/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 636/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 637/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 638/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 639/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 640/2000, 48.5 task/s, elapsed: 13s, ETA:    28s[  ] 641/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 642/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 643/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 644/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 645/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 646/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 647/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 648/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 649/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 650/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 651/2000, 48.6 task/s, elapsed: 13s, ETA:    28s[  ] 652/2000, 48.7 task/s, elapsed: 13s, ETA:    28s[  ] 653/2000, 48.7 task/s, elapsed: 13s, ETA:    28s[  ] 654/2000, 48.7 task/s, elapsed: 13s, ETA:    28s[  ] 655/2000, 48.7 task/s, elapsed: 13s, ETA:    28s[  ] 656/2000, 48.7 task/s, elapsed: 13s, ETA:    28s[  ] 657/2000, 48.7 task/s, elapsed: 13s, ETA:    28s[  ] 658/2000, 48.7 task/s, elapsed: 14s, ETA:    28s[  ] 659/2000, 48.7 task/s, elapsed: 14s, ETA:    28s[  ] 660/2000, 48.7 task/s, elapsed: 14s, ETA:    27s[  ] 661/2000, 48.7 task/s, elapsed: 14s, ETA:    27s[  ] 662/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 663/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 664/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 665/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 666/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 667/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 668/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 669/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 670/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 671/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 672/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 673/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 674/2000, 48.8 task/s, elapsed: 14s, ETA:    27s[  ] 675/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 676/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 677/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 678/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 679/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 680/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 681/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 682/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 683/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 684/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 685/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 686/2000, 48.9 task/s, elapsed: 14s, ETA:    27s[  ] 687/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 688/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 689/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 690/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 691/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 692/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 693/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 694/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 695/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 696/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 697/2000, 49.0 task/s, elapsed: 14s, ETA:    27s[  ] 698/2000, 49.1 task/s, elapsed: 14s, ETA:    27s[  ] 699/2000, 49.1 task/s, elapsed: 14s, ETA:    27s[  ] 700/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 701/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 702/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 703/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 704/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 705/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 706/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 707/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 708/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 709/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 710/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 711/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 712/2000, 49.1 task/s, elapsed: 14s, ETA:    26s[  ] 713/2000, 49.1 task/s, elapsed: 15s, ETA:    26s[  ] 714/2000, 49.1 task/s, elapsed: 15s, ETA:    26s[  ] 715/2000, 49.1 task/s, elapsed: 15s, ETA:    26s[  ] 716/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 717/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 718/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 719/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 720/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 721/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 722/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 723/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 724/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 725/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 726/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 727/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 728/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 729/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 730/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 731/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 732/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 733/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 734/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 735/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 736/2000, 49.2 task/s, elapsed: 15s, ETA:    26s[  ] 737/2000, 49.3 task/s, elapsed: 15s, ETA:    26s[  ] 738/2000, 49.3 task/s, elapsed: 15s, ETA:    26s[  ] 739/2000, 49.3 task/s, elapsed: 15s, ETA:    26s[  ] 740/2000, 49.3 task/s, elapsed: 15s, ETA:    26s[  ] 741/2000, 49.3 task/s, elapsed: 15s, ETA:    26s[  ] 742/2000, 49.3 task/s, elapsed: 15s, ETA:    26s[  ] 743/2000, 49.3 task/s, elapsed: 15s, ETA:    26s[  ] 744/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 745/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 746/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 747/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 748/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 749/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 750/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 751/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 752/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 753/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 754/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 755/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 756/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 757/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 758/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 759/2000, 49.3 task/s, elapsed: 15s, ETA:    25s[  ] 760/2000, 49.4 task/s, elapsed: 15s, ETA:    25s[  ] 761/2000, 49.4 task/s, elapsed: 15s, ETA:    25s[  ] 762/2000, 49.4 task/s, elapsed: 15s, ETA:    25s[  ] 763/2000, 49.4 task/s, elapsed: 15s, ETA:    25s[  ] 764/2000, 49.4 task/s, elapsed: 15s, ETA:    25s[  ] 765/2000, 49.4 task/s, elapsed: 15s, ETA:    25s[  ] 766/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 767/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 768/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 769/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 770/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 771/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 772/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 773/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 774/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 775/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 776/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 777/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 778/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 779/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 780/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 781/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 782/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 783/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 784/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 785/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 786/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 787/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 788/2000, 49.4 task/s, elapsed: 16s, ETA:    25s[  ] 789/2000, 49.4 task/s, elapsed: 16s, ETA:    24s[  ] 790/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 791/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 792/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 793/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 794/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 795/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 796/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 797/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 798/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 799/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 800/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 801/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 802/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 803/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 804/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 805/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 806/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 807/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 808/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 809/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 810/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 811/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 812/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 813/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 814/2000, 49.5 task/s, elapsed: 16s, ETA:    24s[  ] 815/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 816/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 817/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 818/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 819/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 820/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 821/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 822/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 823/2000, 48.0 task/s, elapsed: 17s, ETA:    25s[  ] 824/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 825/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 826/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 827/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 828/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 829/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 830/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 831/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 832/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 833/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 834/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 835/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 836/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 837/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 838/2000, 48.0 task/s, elapsed: 17s, ETA:    24s[  ] 839/2000, 48.1 task/s, elapsed: 17s, ETA:    24s[  ] 840/2000, 48.1 task/s, elapsed: 17s, ETA:    24s[  ] 841/2000, 48.1 task/s, elapsed: 17s, ETA:    24s[  ] 842/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 843/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 844/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 845/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 846/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 847/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 848/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 849/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 850/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 851/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 852/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 853/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 854/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 855/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 856/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 857/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 858/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 859/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 860/2000, 48.1 task/s, elapsed: 18s, ETA:    24s[  ] 861/2000, 48.2 task/s, elapsed: 18s, ETA:    24s[  ] 862/2000, 48.2 task/s, elapsed: 18s, ETA:    24s[  ] 863/2000, 48.2 task/s, elapsed: 18s, ETA:    24s[  ] 864/2000, 48.2 task/s, elapsed: 18s, ETA:    24s[  ] 865/2000, 48.2 task/s, elapsed: 18s, ETA:    24s[  ] 866/2000, 48.2 task/s, elapsed: 18s, ETA:    24s[  ] 867/2000, 48.2 task/s, elapsed: 18s, ETA:    24s[  ] 868/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 869/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 870/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 871/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 872/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 873/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 874/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 875/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 876/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 877/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 878/2000, 48.2 task/s, elapsed: 18s, ETA:    23s[  ] 879/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 880/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 881/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 882/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 883/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 884/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 885/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 886/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 887/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 888/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 889/2000, 48.3 task/s, elapsed: 18s, ETA:    23s[  ] 890/2000, 48.4 task/s, elapsed: 18s, ETA:    23s[  ] 891/2000, 48.4 task/s, elapsed: 18s, ETA:    23s[  ] 892/2000, 48.4 task/s, elapsed: 18s, ETA:    23s[  ] 893/2000, 48.4 task/s, elapsed: 18s, ETA:    23s[  ] 894/2000, 48.4 task/s, elapsed: 18s, ETA:    23s[  ] 895/2000, 48.4 task/s, elapsed: 18s, ETA:    23s[  ] 896/2000, 48.4 task/s, elapsed: 19s, ETA:    23s[  ] 897/2000, 48.4 task/s, elapsed: 19s, ETA:    23s[  ] 898/2000, 48.4 task/s, elapsed: 19s, ETA:    23s[  ] 899/2000, 48.4 task/s, elapsed: 19s, ETA:    23s[  ] 900/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 901/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 902/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 903/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 904/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 905/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 906/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 907/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 908/2000, 48.5 task/s, elapsed: 19s, ETA:    23s[  ] 909/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 910/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 911/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 912/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 913/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 914/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 915/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 916/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 917/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 918/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 919/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 920/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 921/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 922/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 923/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 924/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 925/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 926/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 927/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 928/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 929/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 930/2000, 48.5 task/s, elapsed: 19s, ETA:    22s[  ] 931/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 932/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 933/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 934/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 935/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 936/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 937/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 938/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 939/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 940/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 941/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 942/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 943/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 944/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 945/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 946/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 947/2000, 48.6 task/s, elapsed: 19s, ETA:    22s[  ] 948/2000, 48.6 task/s, elapsed: 20s, ETA:    22s[  ] 949/2000, 48.6 task/s, elapsed: 20s, ETA:    22s[  ] 950/2000, 48.6 task/s, elapsed: 20s, ETA:    22s[  ] 951/2000, 48.6 task/s, elapsed: 20s, ETA:    22s[  ] 952/2000, 48.6 task/s, elapsed: 20s, ETA:    22s[  ] 953/2000, 48.6 task/s, elapsed: 20s, ETA:    22s[  ] 954/2000, 48.6 task/s, elapsed: 20s, ETA:    22s[  ] 955/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 956/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 957/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 958/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 959/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 960/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 961/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 962/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 963/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 964/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 965/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 966/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 967/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 968/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 969/2000, 48.6 task/s, elapsed: 20s, ETA:    21s[  ] 970/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 971/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 972/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 973/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 974/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 975/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 976/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 977/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 978/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 979/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 980/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 981/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 982/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 983/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 984/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 985/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 986/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 987/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 988/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 989/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 990/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 991/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 992/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 993/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 994/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 995/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 996/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 997/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 998/2000, 48.7 task/s, elapsed: 20s, ETA:    21s[  ] 999/2000, 48.7 task/s, elapsed: 21s, ETA:    21s[> ] 1000/2000, 48.7 task/s, elapsed: 21s, ETA:    21s[> ] 1001/2000, 48.7 task/s, elapsed: 21s, ETA:    21s[> ] 1002/2000, 48.7 task/s, elapsed: 21s, ETA:    20s[> ] 1003/2000, 48.7 task/s, elapsed: 21s, ETA:    20s[> ] 1004/2000, 48.7 task/s, elapsed: 21s, ETA:    20s[> ] 1005/2000, 48.7 task/s, elapsed: 21s, ETA:    20s[> ] 1006/2000, 48.7 task/s, elapsed: 21s, ETA:    20s[> ] 1007/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1008/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1009/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1010/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1011/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1012/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1013/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1014/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1015/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1016/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1017/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1018/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1019/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1020/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1021/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1022/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1023/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1024/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1025/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1026/2000, 48.8 task/s, elapsed: 21s, ETA:    20s[> ] 1027/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1028/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1029/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1030/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1031/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1032/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1033/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1034/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1035/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1036/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1037/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1038/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1039/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1040/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1041/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1042/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1043/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1044/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1045/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1046/2000, 48.9 task/s, elapsed: 21s, ETA:    20s[> ] 1047/2000, 48.9 task/s, elapsed: 21s, ETA:    19s[> ] 1048/2000, 48.9 task/s, elapsed: 21s, ETA:    19s[> ] 1049/2000, 48.9 task/s, elapsed: 21s, ETA:    19s[> ] 1050/2000, 48.9 task/s, elapsed: 21s, ETA:    19s[> ] 1051/2000, 48.9 task/s, elapsed: 21s, ETA:    19s[> ] 1052/2000, 48.9 task/s, elapsed: 21s, ETA:    19s[> ] 1053/2000, 48.9 task/s, elapsed: 22s, ETA:    19s[> ] 1054/2000, 48.9 task/s, elapsed: 22s, ETA:    19s[> ] 1055/2000, 48.9 task/s, elapsed: 22s, ETA:    19s[> ] 1056/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1057/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1058/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1059/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1060/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1061/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1062/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1063/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1064/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1065/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1066/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1067/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1068/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1069/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1070/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1071/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1072/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1073/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1074/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1075/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1076/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1077/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1078/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1079/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1080/2000, 49.0 task/s, elapsed: 22s, ETA:    19s[> ] 1081/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1082/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1083/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1084/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1085/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1086/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1087/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1088/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1089/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1090/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1091/2000, 49.1 task/s, elapsed: 22s, ETA:    19s[> ] 1092/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1093/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1094/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1095/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1096/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1097/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1098/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1099/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1100/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1101/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1102/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1103/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1104/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1105/2000, 49.1 task/s, elapsed: 22s, ETA:    18s[> ] 1106/2000, 49.1 task/s, elapsed: 23s, ETA:    18s[> ] 1107/2000, 49.1 task/s, elapsed: 23s, ETA:    18s[> ] 1108/2000, 49.1 task/s, elapsed: 23s, ETA:    18s[> ] 1109/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1110/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1111/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1112/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1113/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1114/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1115/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1116/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1117/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1118/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1119/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1120/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1121/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1122/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1123/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1124/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1125/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1126/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1127/2000, 49.2 task/s, elapsed: 23s, ETA:    18s[> ] 1128/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1129/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1130/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1131/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1132/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1133/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1134/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1135/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1136/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1137/2000, 49.3 task/s, elapsed: 23s, ETA:    18s[> ] 1138/2000, 49.3 task/s, elapsed: 23s, ETA:    17s[> ] 1139/2000, 49.3 task/s, elapsed: 23s, ETA:    17s[> ] 1140/2000, 49.3 task/s, elapsed: 23s, ETA:    17s[> ] 1141/2000, 49.3 task/s, elapsed: 23s, ETA:    17s[> ] 1142/2000, 49.3 task/s, elapsed: 23s, ETA:    17s[> ] 1143/2000, 49.3 task/s, elapsed: 23s, ETA:    17s[> ] 1144/2000, 49.3 task/s, elapsed: 23s, ETA:    17s[> ] 1145/2000, 49.3 task/s, elapsed: 23s, ETA:    17s[> ] 1146/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1147/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1148/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1149/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1150/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1151/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1152/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1153/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1154/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1155/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1156/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1157/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1158/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1159/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1160/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1161/2000, 49.4 task/s, elapsed: 23s, ETA:    17s[> ] 1162/2000, 49.4 task/s, elapsed: 24s, ETA:    17s[> ] 1163/2000, 49.4 task/s, elapsed: 24s, ETA:    17s[> ] 1164/2000, 49.4 task/s, elapsed: 24s, ETA:    17s[> ] 1165/2000, 49.4 task/s, elapsed: 24s, ETA:    17s[> ] 1166/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1167/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1168/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1169/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1170/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1171/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1172/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1173/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1174/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1175/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1176/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1177/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1178/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1179/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1180/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1181/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1182/2000, 49.5 task/s, elapsed: 24s, ETA:    17s[> ] 1183/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1184/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1185/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1186/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1187/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1188/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1189/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1190/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1191/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1192/2000, 49.5 task/s, elapsed: 24s, ETA:    16s[> ] 1193/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1194/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1195/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1196/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1197/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1198/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1199/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1200/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1201/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1202/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1203/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1204/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1205/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1206/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1207/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1208/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1209/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1210/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1211/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1212/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1213/2000, 49.6 task/s, elapsed: 24s, ETA:    16s[> ] 1214/2000, 49.7 task/s, elapsed: 24s, ETA:    16s[> ] 1215/2000, 49.7 task/s, elapsed: 24s, ETA:    16s[> ] 1216/2000, 49.7 task/s, elapsed: 24s, ETA:    16s[> ] 1217/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1218/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1219/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1220/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1221/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1222/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1223/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1224/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1225/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1226/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1227/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1228/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1229/2000, 49.7 task/s, elapsed: 25s, ETA:    16s[> ] 1230/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1231/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1232/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1233/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1234/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1235/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1236/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1237/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1238/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1239/2000, 49.7 task/s, elapsed: 25s, ETA:    15s[> ] 1240/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1241/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1242/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1243/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1244/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1245/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1246/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1247/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1248/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1249/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1250/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1251/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1252/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1253/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1254/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1255/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1256/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1257/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1258/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1259/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1260/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1261/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1262/2000, 49.8 task/s, elapsed: 25s, ETA:    15s[> ] 1263/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1264/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1265/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1266/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1267/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1268/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1269/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1270/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1271/2000, 49.9 task/s, elapsed: 25s, ETA:    15s[> ] 1272/2000, 49.9 task/s, elapsed: 26s, ETA:    15s[> ] 1273/2000, 49.9 task/s, elapsed: 26s, ETA:    15s[> ] 1274/2000, 49.9 task/s, elapsed: 26s, ETA:    15s[> ] 1275/2000, 49.9 task/s, elapsed: 26s, ETA:    15s[> ] 1276/2000, 49.9 task/s, elapsed: 26s, ETA:    15s[> ] 1277/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1278/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1279/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1280/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1281/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1282/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1283/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1284/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1285/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1286/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1287/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1288/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1289/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1290/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1291/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1292/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1293/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1294/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1295/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1296/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1297/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1298/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1299/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1300/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1301/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1302/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1303/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1304/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1305/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1306/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1307/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1308/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1309/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1310/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1311/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1312/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1313/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1314/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1315/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1316/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1317/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1318/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1319/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1320/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1321/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1322/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1323/2000, 49.9 task/s, elapsed: 26s, ETA:    14s[> ] 1324/2000, 49.9 task/s, elapsed: 27s, ETA:    14s[> ] 1325/2000, 49.9 task/s, elapsed: 27s, ETA:    14s[> ] 1326/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1327/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1328/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1329/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1330/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1331/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1332/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1333/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1334/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1335/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1336/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1337/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1338/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1339/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1340/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1341/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1342/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1343/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1344/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1345/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1346/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1347/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1348/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1349/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1350/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1351/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1352/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1353/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1354/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1355/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1356/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1357/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1358/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1359/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1360/2000, 49.9 task/s, elapsed: 27s, ETA:    13s[> ] 1361/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1362/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1363/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1364/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1365/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1366/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1367/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1368/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1369/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1370/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1371/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1372/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1373/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1374/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1375/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1376/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1377/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1378/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1379/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1380/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1381/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1382/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1383/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1384/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1385/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1386/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1387/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1388/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1389/2000, 48.8 task/s, elapsed: 28s, ETA:    13s[> ] 1390/2000, 48.8 task/s, elapsed: 28s, ETA:    12s[> ] 1391/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1392/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1393/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1394/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1395/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1396/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1397/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1398/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1399/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1400/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1401/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1402/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1403/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1404/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1405/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1406/2000, 48.8 task/s, elapsed: 29s, ETA:    12s[> ] 1407/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1408/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1409/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1410/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1411/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1412/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1413/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1414/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1415/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1416/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1417/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1418/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1419/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1420/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1421/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1422/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1423/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1424/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1425/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1426/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1427/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1428/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1429/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1430/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1431/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1432/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1433/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1434/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1435/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1436/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1437/2000, 48.9 task/s, elapsed: 29s, ETA:    12s[> ] 1438/2000, 48.9 task/s, elapsed: 29s, ETA:    11s[> ] 1439/2000, 48.9 task/s, elapsed: 29s, ETA:    11s[> ] 1440/2000, 48.9 task/s, elapsed: 29s, ETA:    11s[> ] 1441/2000, 48.9 task/s, elapsed: 29s, ETA:    11s[> ] 1442/2000, 48.9 task/s, elapsed: 29s, ETA:    11s[> ] 1443/2000, 48.9 task/s, elapsed: 29s, ETA:    11s[> ] 1444/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1445/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1446/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1447/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1448/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1449/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1450/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1451/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1452/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1453/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1454/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1455/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1456/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1457/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1458/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1459/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1460/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1461/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1462/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1463/2000, 48.9 task/s, elapsed: 30s, ETA:    11s[> ] 1464/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1465/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1466/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1467/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1468/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1469/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1470/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1471/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1472/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1473/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1474/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1475/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1476/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1477/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1478/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1479/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1480/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1481/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1482/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1483/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1484/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1485/2000, 49.0 task/s, elapsed: 30s, ETA:    11s[> ] 1486/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1487/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1488/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1489/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1490/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1491/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1492/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1493/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1494/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1495/2000, 49.0 task/s, elapsed: 30s, ETA:    10s[> ] 1496/2000, 49.0 task/s, elapsed: 31s, ETA:    10s[> ] 1497/2000, 49.0 task/s, elapsed: 31s, ETA:    10s[> ] 1498/2000, 49.0 task/s, elapsed: 31s, ETA:    10s[> ] 1499/2000, 49.0 task/s, elapsed: 31s, ETA:    10s[> ] 1500/2000, 49.0 task/s, elapsed: 31s, ETA:    10s[> ] 1501/2000, 49.0 task/s, elapsed: 31s, ETA:    10s[> ] 1502/2000, 49.0 task/s, elapsed: 31s, ETA:    10s[> ] 1503/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1504/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1505/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1506/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1507/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1508/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1509/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1510/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1511/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1512/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1513/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1514/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1515/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1516/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1517/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1518/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1519/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1520/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1521/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1522/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1523/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1524/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1525/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1526/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1527/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1528/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1529/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1530/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1531/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1532/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1533/2000, 49.1 task/s, elapsed: 31s, ETA:    10s[> ] 1534/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1535/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1536/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1537/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1538/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1539/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1540/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1541/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1542/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1543/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1544/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1545/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1546/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1547/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1548/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1549/2000, 49.2 task/s, elapsed: 31s, ETA:     9s[> ] 1550/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1551/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1552/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1553/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1554/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1555/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1556/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1557/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1558/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1559/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1560/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1561/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1562/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1563/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1564/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1565/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1566/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1567/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1568/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1569/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1570/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1571/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1572/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1573/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1574/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1575/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1576/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1577/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1578/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1579/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1580/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1581/2000, 49.2 task/s, elapsed: 32s, ETA:     9s[> ] 1582/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1583/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1584/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1585/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1586/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1587/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1588/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1589/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1590/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1591/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1592/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1593/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1594/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1595/2000, 49.2 task/s, elapsed: 32s, ETA:     8s[> ] 1596/2000, 49.3 task/s, elapsed: 32s, ETA:     8s[> ] 1597/2000, 49.3 task/s, elapsed: 32s, ETA:     8s[> ] 1598/2000, 49.3 task/s, elapsed: 32s, ETA:     8s[> ] 1599/2000, 49.3 task/s, elapsed: 32s, ETA:     8s[> ] 1600/2000, 49.3 task/s, elapsed: 32s, ETA:     8s[> ] 1601/2000, 49.3 task/s, elapsed: 32s, ETA:     8s[> ] 1602/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1603/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1604/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1605/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1606/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1607/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1608/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1609/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1610/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1611/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1612/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1613/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1614/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1615/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1616/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1617/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1618/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1619/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1620/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1621/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1622/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1623/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1624/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1625/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1626/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1627/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1628/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1629/2000, 49.3 task/s, elapsed: 33s, ETA:     8s[> ] 1630/2000, 49.3 task/s, elapsed: 33s, ETA:     7s[> ] 1631/2000, 49.3 task/s, elapsed: 33s, ETA:     7s[> ] 1632/2000, 49.3 task/s, elapsed: 33s, ETA:     7s[> ] 1633/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1634/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1635/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1636/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1637/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1638/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1639/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1640/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1641/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1642/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1643/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1644/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1645/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1646/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1647/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1648/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1649/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1650/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1651/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1652/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1653/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1654/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1655/2000, 49.4 task/s, elapsed: 33s, ETA:     7s[> ] 1656/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1657/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1658/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1659/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1660/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1661/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1662/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1663/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1664/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1665/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1666/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1667/2000, 49.4 task/s, elapsed: 34s, ETA:     7s[> ] 1668/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1669/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1670/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1671/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1672/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1673/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1674/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1675/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1676/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1677/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1678/2000, 49.5 task/s, elapsed: 34s, ETA:     7s[> ] 1679/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1680/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1681/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1682/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1683/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1684/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1685/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1686/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1687/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1688/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1689/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1690/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1691/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1692/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1693/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1694/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1695/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1696/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1697/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1698/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1699/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1700/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1701/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1702/2000, 49.5 task/s, elapsed: 34s, ETA:     6s[> ] 1703/2000, 49.6 task/s, elapsed: 34s, ETA:     6s[> ] 1704/2000, 49.6 task/s, elapsed: 34s, ETA:     6s[> ] 1705/2000, 49.6 task/s, elapsed: 34s, ETA:     6s[> ] 1706/2000, 49.6 task/s, elapsed: 34s, ETA:     6s[> ] 1707/2000, 49.6 task/s, elapsed: 34s, ETA:     6s[> ] 1708/2000, 49.6 task/s, elapsed: 34s, ETA:     6s[> ] 1709/2000, 49.6 task/s, elapsed: 34s, ETA:     6s[> ] 1710/2000, 49.6 task/s, elapsed: 34s, ETA:     6s[> ] 1711/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1712/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1713/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1714/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1715/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1716/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1717/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1718/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1719/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1720/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1721/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1722/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1723/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1724/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1725/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1726/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1727/2000, 49.6 task/s, elapsed: 35s, ETA:     6s[> ] 1728/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1729/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1730/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1731/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1732/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1733/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1734/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1735/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1736/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1737/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1738/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1739/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1740/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1741/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1742/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1743/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1744/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1745/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1746/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1747/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1748/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1749/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1750/2000, 49.6 task/s, elapsed: 35s, ETA:     5s[> ] 1751/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1752/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1753/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1754/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1755/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1756/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1757/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1758/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1759/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1760/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1761/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1762/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1763/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1764/2000, 49.7 task/s, elapsed: 35s, ETA:     5s[> ] 1765/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1766/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1767/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1768/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1769/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1770/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1771/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1772/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1773/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1774/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1775/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1776/2000, 49.7 task/s, elapsed: 36s, ETA:     5s[> ] 1777/2000, 49.7 task/s, elapsed: 36s, ETA:     4s[> ] 1778/2000, 49.7 task/s, elapsed: 36s, ETA:     4s[> ] 1779/2000, 49.7 task/s, elapsed: 36s, ETA:     4s[> ] 1780/2000, 49.7 task/s, elapsed: 36s, ETA:     4s[> ] 1781/2000, 49.7 task/s, elapsed: 36s, ETA:     4s[> ] 1782/2000, 49.7 task/s, elapsed: 36s, ETA:     4s[> ] 1783/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1784/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1785/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1786/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1787/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1788/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1789/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1790/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1791/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1792/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1793/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1794/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1795/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1796/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1797/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1798/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1799/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1800/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1801/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1802/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1803/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1804/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1805/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1806/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1807/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1808/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1809/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1810/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1811/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1812/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1813/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1814/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1815/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1816/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1817/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1818/2000, 49.8 task/s, elapsed: 36s, ETA:     4s[> ] 1819/2000, 49.8 task/s, elapsed: 37s, ETA:     4s[> ] 1820/2000, 49.8 task/s, elapsed: 37s, ETA:     4s[> ] 1821/2000, 49.8 task/s, elapsed: 37s, ETA:     4s[> ] 1822/2000, 49.8 task/s, elapsed: 37s, ETA:     4s[> ] 1823/2000, 49.8 task/s, elapsed: 37s, ETA:     4s[> ] 1824/2000, 49.8 task/s, elapsed: 37s, ETA:     4s[> ] 1825/2000, 49.8 task/s, elapsed: 37s, ETA:     4s[> ] 1826/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1827/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1828/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1829/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1830/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1831/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1832/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1833/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1834/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1835/2000, 49.8 task/s, elapsed: 37s, ETA:     3s[> ] 1836/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1837/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1838/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1839/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1840/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1841/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1842/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1843/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1844/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1845/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1846/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1847/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1848/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1849/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1850/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1851/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1852/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1853/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1854/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1855/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1856/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1857/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1858/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1859/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1860/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1861/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1862/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1863/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1864/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1865/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1866/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1867/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1868/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1869/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1870/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1871/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1872/2000, 49.9 task/s, elapsed: 37s, ETA:     3s[> ] 1873/2000, 49.9 task/s, elapsed: 38s, ETA:     3s[> ] 1874/2000, 49.9 task/s, elapsed: 38s, ETA:     3s[> ] 1875/2000, 49.9 task/s, elapsed: 38s, ETA:     3s[> ] 1876/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1877/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1878/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1879/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1880/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1881/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1882/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1883/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1884/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1885/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1886/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1887/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1888/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1889/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1890/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1891/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1892/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1893/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1894/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1895/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1896/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1897/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1898/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1899/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1900/2000, 49.9 task/s, elapsed: 38s, ETA:     2s[> ] 1901/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1902/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1903/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1904/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1905/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1906/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1907/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1908/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1909/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1910/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1911/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1912/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1913/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1914/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1915/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1916/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1917/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1918/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1919/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1920/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1921/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1922/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1923/2000, 50.0 task/s, elapsed: 38s, ETA:     2s[> ] 1924/2000, 50.0 task/s, elapsed: 39s, ETA:     2s[> ] 1925/2000, 50.0 task/s, elapsed: 39s, ETA:     2s[> ] 1926/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1927/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1928/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1929/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1930/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1931/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1932/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1933/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1934/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1935/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1936/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1937/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1938/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1939/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1940/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1941/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1942/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1943/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1944/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1945/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1946/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1947/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1948/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1949/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1950/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1951/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1952/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1953/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1954/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1955/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1956/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1957/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1958/2000, 50.0 task/s, elapsed: 39s, ETA:     1s[> ] 1959/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1960/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1961/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1962/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1963/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1964/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1965/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1966/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1967/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1968/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1969/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1970/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1971/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1972/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1973/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1974/2000, 50.1 task/s, elapsed: 39s, ETA:     1s[> ] 1975/2000, 50.1 task/s, elapsed: 39s, ETA:     0s[> ] 1976/2000, 50.1 task/s, elapsed: 39s, ETA:     0s[> ] 1977/2000, 50.1 task/s, elapsed: 39s, ETA:     0s[> ] 1978/2000, 50.1 task/s, elapsed: 39s, ETA:     0s[> ] 1979/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1980/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1981/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1982/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1983/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1984/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1985/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1986/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1987/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1988/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1989/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1990/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1991/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1992/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1993/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1994/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1995/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1996/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1997/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1998/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[> ] 1999/2000, 50.1 task/s, elapsed: 40s, ETA:     0s[>>] 2000/2000, 50.1 task/s, elapsed: 40s, ETA:     0s
Results writes to /tmp/tmp2gzig3cz/results/results_nusc.json
/bin/sh: line 1: 1661565 Killed                  python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.camera.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-det.pth --run-dir train_result_infra_short_full 2>&1
--------------------------------------------------------------------------
Primary job  terminated normally, but 1 process returned
a non-zero exit code. Per user-direction, the job has been aborted.
--------------------------------------------------------------------------
--------------------------------------------------------------------------
mpirun detected that one or more processes exited with non-zero status, thus causing
the job to be terminated. The first process to do so was:

  Process name: [[43502,1],0]
  Exit code:    137
--------------------------------------------------------------------------
]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.camera.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-det.pth --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ torchpack dist-run -np 1 python tools/train.py connfigs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.cameraa.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-deet.pth --run-dir train_result_infra_short_full
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/core/bbox/box_np_ops.py:781: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.
  def points_in_convex_polygon_jit(points, polygon, clockwise=True):
2024-09-04 09:20:37,648 - mmdet3d - INFO - Config:
seed = 0
deterministic = False
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
load_from = 'pretrained/lidar-only-det.pth'
resume_from = None
cudnn_benchmark = False
fp16 = dict(loss_scale=dict(growth_interval=2000))
max_epochs = 10
runner = dict(type='CustomEpochBasedRunner', max_epochs=10)
dataset_type = 'NuScenesDataset'
dataset_root = '/scratch/jmeng18/V2X-SIM/'
gt_paste_stop_epoch = -1
reduce_beams = 32
load_dim = 5
use_dim = 5
load_augmented = None
point_cloud_range = [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
voxel_size = [0.075, 0.075, 0.2]
image_size = [256, 704]
augment2d = dict(
    resize=[[0.38, 0.55], [0.48, 0.48]],
    rotate=[-5.4, 5.4],
    gridmask=dict(prob=0.0, fixed_prob=True))
augment3d = dict(
    scale=[0.9, 1.1], rotate=[-0.78539816, 0.78539816], translate=0.5)
object_classes = ['car']
map_classes = [
    'drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area'
]
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=0,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ObjectPaste',
        stop_epoch=-1,
        db_sampler=dict(
            dataset_root='/scratch/jmeng18/V2X-SIM/',
            info_path='/scratch/jmeng18/V2X-SIM/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1], filter_by_min_points=dict(car=5)),
            classes=['car'],
            sample_groups=dict(car=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32))),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.38, 0.55],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[-5.4, 5.4],
        rand_flip=True,
        is_train=True),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[0.9, 1.1],
        rot_lim=[-0.78539816, 0.78539816],
        trans_lim=0.5,
        is_train=True),
    dict(type='RandomFlip3D'),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(type='ObjectNameFilter', classes=['car']),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='GridMask',
        use_h=True,
        use_w=True,
        max_epoch=10,
        rotate=1,
        offset=False,
        ratio=0.5,
        mode=1,
        prob=0.0,
        fixed_prob=True),
    dict(type='PointShuffle'),
    dict(type='DefaultFormatBundle3D', classes=['car']),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.48, 0.48],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[0.0, 0.0],
        rand_flip=False,
        is_train=False),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[1.0, 1.0],
        rot_lim=[0.0, 0.0],
        trans_lim=0.0,
        is_train=False),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(type='DefaultFormatBundle3D', classes=['car']),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='CBGSDataset',
        dataset=dict(
            type='NuScenesDataset',
            dataset_root='/scratch/jmeng18/V2X-SIM/',
            ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_train.pkl',
            pipeline=[
                dict(type='LoadMultiViewImageFromFiles', to_float32=True),
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    load_augmented=None),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=0,
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    load_augmented=None),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True,
                    with_attr_label=False),
                dict(
                    type='ObjectPaste',
                    stop_epoch=-1,
                    db_sampler=dict(
                        dataset_root='/scratch/jmeng18/V2X-SIM/',
                        info_path=
                        '/scratch/jmeng18/V2X-SIM/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(car=5)),
                        classes=['car'],
                        sample_groups=dict(car=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=5,
                            reduce_beams=32))),
                dict(
                    type='ImageAug3D',
                    final_dim=[256, 704],
                    resize_lim=[0.38, 0.55],
                    bot_pct_lim=[0.0, 0.0],
                    rot_lim=[-5.4, 5.4],
                    rand_flip=True,
                    is_train=True),
                dict(
                    type='GlobalRotScaleTrans',
                    resize_lim=[0.9, 1.1],
                    rot_lim=[-0.78539816, 0.78539816],
                    trans_lim=0.5,
                    is_train=True),
                dict(type='RandomFlip3D'),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(type='ObjectNameFilter', classes=['car']),
                dict(
                    type='ImageNormalize',
                    mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225]),
                dict(
                    type='GridMask',
                    use_h=True,
                    use_w=True,
                    max_epoch=10,
                    rotate=1,
                    offset=False,
                    ratio=0.5,
                    mode=1,
                    prob=0.0,
                    fixed_prob=True),
                dict(type='PointShuffle'),
                dict(type='DefaultFormatBundle3D', classes=['car']),
                dict(
                    type='Collect3D',
                    keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                    meta_keys=[
                        'camera_intrinsics', 'camera2ego', 'lidar2ego',
                        'lidar2camera', 'lidar2image', 'camera2lidar',
                        'img_aug_matrix', 'lidar_aug_matrix'
                    ]),
                dict(type='GTDepth', keyframe_only=True)
            ],
            object_classes=['car'],
            map_classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area'
            ],
            modality=dict(
                use_lidar=True,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False),
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        dataset_root='/scratch/jmeng18/V2X-SIM/',
        ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='DefaultFormatBundle3D', classes=['car']),
            dict(
                type='Collect3D',
                keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=['car'],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        dataset_root='/scratch/jmeng18/V2X-SIM/',
        ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='DefaultFormatBundle3D', classes=['car']),
            dict(
                type='Collect3D',
                keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=['car'],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            load_augmented=None),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            pad_empty_sweeps=True,
            remove_close=True,
            load_augmented=None),
        dict(
            type='LoadAnnotations3D',
            with_bbox_3d=True,
            with_label_3d=True,
            with_attr_label=False),
        dict(
            type='ImageAug3D',
            final_dim=[256, 704],
            resize_lim=[0.48, 0.48],
            bot_pct_lim=[0.0, 0.0],
            rot_lim=[0.0, 0.0],
            rand_flip=False,
            is_train=False),
        dict(
            type='GlobalRotScaleTrans',
            resize_lim=[1.0, 1.0],
            rot_lim=[0.0, 0.0],
            trans_lim=0.0,
            is_train=False),
        dict(
            type='PointsRangeFilter',
            point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
        dict(
            type='ImageNormalize',
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]),
        dict(type='DefaultFormatBundle3D', classes=['car']),
        dict(
            type='Collect3D',
            keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
            meta_keys=[
                'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
                'lidar2image', 'camera2lidar', 'img_aug_matrix',
                'lidar_aug_matrix'
            ]),
        dict(type='GTDepth', keyframe_only=True)
    ])
radar_sweeps = 6
radar_max_points = 2500
radar_use_dims = [
    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 55, 56
]
radar_compensate_velocity = True
radar_filtering = 'none'
radar_voxel_size = [0.8, 0.8, 8]
radar_jitter = 0
radar_normalize = False
model = dict(
    type='BEVFusion',
    encoders=dict(
        camera=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='SwinTransformer',
                embed_dims=96,
                depths=[2, 2, 6, 2],
                num_heads=[3, 6, 12, 24],
                window_size=7,
                mlp_ratio=4,
                qkv_bias=True,
                qk_scale=None,
                drop_rate=0.0,
                attn_drop_rate=0.0,
                drop_path_rate=0.2,
                patch_norm=True,
                out_indices=[1, 2, 3],
                with_cp=False,
                convert_weights=True,
                init_cfg=dict(
                    type='Pretrained',
                    checkpoint='pretrained/swint-nuimages-pretrained.pth'))),
        lidar=dict(
            voxelize=dict(
                max_num_points=10,
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                voxel_size=[0.075, 0.075, 0.2],
                max_voxels=[120000, 160000]),
            backbone=dict(
                type='SparseEncoder',
                in_channels=5,
                sparse_shape=[1440, 1440, 41],
                output_channels=128,
                order=['conv', 'norm', 'act'],
                encoder_channels=[[16, 16, 32], [32, 32, 64], [64, 64, 128],
                                  [128, 128]],
                encoder_paddings=[[0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]],
                                  [0, 0]],
                block_type='basicblock')),
        infra=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='SwinTransformer',
                embed_dims=96,
                depths=[2, 2, 6, 2],
                num_heads=[3, 6, 12, 24],
                window_size=7,
                mlp_ratio=4,
                qkv_bias=True,
                qk_scale=None,
                drop_rate=0.0,
                attn_drop_rate=0.0,
                drop_path_rate=0.2,
                patch_norm=True,
                out_indices=[1, 2, 3],
                with_cp=False,
                convert_weights=True,
                init_cfg=dict(
                    type='Pretrained',
                    checkpoint=
                    'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'
                )))),
    fuser=dict(type='ConvFuser', in_channels=[80, 256, 80], out_channels=256),
    heads=dict(
        map=None,
        object=dict(
            type='TransFusionHead',
            num_proposals=200,
            auxiliary=True,
            in_channels=512,
            hidden_channel=128,
            num_classes=1,
            num_decoder_layers=1,
            num_heads=8,
            nms_kernel_size=3,
            ffn_channel=256,
            dropout=0.1,
            bn_momentum=0.1,
            activation='relu',
            train_cfg=dict(
                dataset='nuScenes',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                grid_size=[1440, 1440, 41],
                voxel_size=[0.075, 0.075, 0.2],
                out_size_factor=8,
                gaussian_overlap=0.1,
                min_radius=2,
                pos_weight=-1,
                code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                assigner=dict(
                    type='HungarianAssigner3D',
                    iou_calculator=dict(
                        type='BboxOverlaps3D', coordinate='lidar'),
                    cls_cost=dict(
                        type='FocalLossCost',
                        gamma=2.0,
                        alpha=0.25,
                        weight=0.15),
                    reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                    iou_cost=dict(type='IoU3DCost', weight=0.25))),
            test_cfg=dict(
                dataset='nuScenes',
                grid_size=[1440, 1440, 41],
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                pc_range=[-54.0, -54.0],
                nms_type=None),
            common_heads=dict(
                center=[2, 2],
                height=[1, 2],
                dim=[3, 2],
                rot=[2, 2],
                vel=[2, 2]),
            bbox_coder=dict(
                type='TransFusionBBoxCoder',
                pc_range=[-54.0, -54.0],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                score_threshold=0.0,
                out_size_factor=8,
                voxel_size=[0.075, 0.075]),
            loss_cls=dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                reduction='mean',
                loss_weight=1.0),
            loss_heatmap=dict(
                type='GaussianFocalLoss', reduction='mean', loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', reduction='mean',
                           loss_weight=0.25))),
    decoder=dict(
        backbone=dict(
            type='SECOND',
            in_channels=256,
            out_channels=[128, 256],
            layer_nums=[5, 5],
            layer_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            conv_cfg=dict(type='Conv2d', bias=False)),
        neck=dict(
            type='SECONDFPN',
            in_channels=[128, 256],
            out_channels=[256, 256],
            upsample_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            upsample_cfg=dict(type='deconv', bias=False),
            use_conv_for_no_stride=True)))
optimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.33333333,
    min_lr_ratio=1e-07)
momentum_config = dict(policy='cyclic')
run_dir = 'train_result_infra_short_full'

2024-09-04 09:20:37,649 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2024-09-04 09:20:44,711 - mmdet3d - INFO - load 349483 car database infos
2024-09-04 09:20:44,712 - mmdet3d - INFO - load 157002 bicycle database infos
2024-09-04 09:20:44,712 - mmdet3d - INFO - load 40210 motorcycle database infos
2024-09-04 09:20:44,712 - mmdet3d - INFO - load 16943 vehicle.emergency.police database infos
2024-09-04 09:20:45,541 - mmdet3d - INFO - After filter database:
2024-09-04 09:20:45,554 - mmdet3d - INFO - load 170227 car database infos
2024-09-04 09:20:45,555 - mmdet3d - INFO - load 157002 bicycle database infos
2024-09-04 09:20:45,556 - mmdet3d - INFO - load 40210 motorcycle database infos
2024-09-04 09:20:45,557 - mmdet3d - INFO - load 16943 vehicle.emergency.police database infos
/home/jmeng18/.conda/envs/bevfusion/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1639180588308/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
2024-09-04 09:20:46,425 - mmdet - INFO - load checkpoint from local path: pretrained/swint-nuimages-pretrained.pth
2024-09-04 09:20:48,274 - mmdet - INFO - load checkpoint from local path: pretrained/swint-nuimages-pretrained.pth
2024-09-04 09:20:48,348 - mmdet3d - INFO - Model:
BEVFusion(
  (encoders): ModuleDict(
    (camera): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'pretrained/swint-nuimages-pretrained.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
    (lidar): ModuleDict(
      (voxelize): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
      (backbone): SparseEncoder(
        (conv_input): SparseSequential(
          (0): SubMConv3d()
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (encoder_layers): SparseSequential(
          (encoder_layer1): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer2): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer3): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer4): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
        (conv_out): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    (infra): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
  )
  (fuser): ConvFuser(
    (0): Conv2d(416, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (decoder): ModuleDict(
    (backbone): SECOND(
      (blocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    (neck): SECONDFPN(
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  )
  (heads): ModuleDict(
    (object): TransFusionHead(
      (loss_cls): FocalLoss()
      (loss_bbox): L1Loss()
      (loss_iou): VarifocalLoss()
      (loss_heatmap): GaussianFocalLoss()
      (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (heatmap_head): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (class_encoding): Conv1d(1, 128, kernel_size=(1,), stride=(1,))
      (decoder): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (linear1): Linear(in_features=128, out_features=256, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=256, out_features=128, bias=True)
          (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
          (self_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
          (cross_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (prediction_heads): ModuleList(
        (0): FFN(
          (center): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
        )
      )
    )
  )
)
2024-09-04 09:21:03,070 - mmdet3d - INFO - load checkpoint from local path: pretrained/lidar-only-det.pth
2024-09-04 09:21:04,049 - mmdet3d - WARNING - The model and loaded state dict do not match exactly

size mismatch for heads.object.heatmap_head.1.weight: copying a param with shape torch.Size([10, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([1, 128, 3, 3]).
size mismatch for heads.object.heatmap_head.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([1]).
size mismatch for heads.object.class_encoding.weight: copying a param with shape torch.Size([128, 10, 1]) from checkpoint, the shape in current model is torch.Size([128, 1, 1]).
size mismatch for heads.object.prediction_heads.0.heatmap.1.weight: copying a param with shape torch.Size([10, 64, 1]) from checkpoint, the shape in current model is torch.Size([1, 64, 1]).
size mismatch for heads.object.prediction_heads.0.heatmap.1.bias: copying a param with shape torch.Size([10]) from checkpoint, the shape in current model is torch.Size([1]).
missing keys in source state_dict: encoders.camera.backbone.patch_embed.projection.weight, encoders.camera.backbone.patch_embed.projection.bias, encoders.camera.backbone.patch_embed.norm.weight, encoders.camera.backbone.patch_embed.norm.bias, encoders.camera.backbone.stages.0.blocks.0.norm1.weight, encoders.camera.backbone.stages.0.blocks.0.norm1.bias, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.0.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.0.blocks.0.norm2.weight, encoders.camera.backbone.stages.0.blocks.0.norm2.bias, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.0.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.0.blocks.1.norm1.weight, encoders.camera.backbone.stages.0.blocks.1.norm1.bias, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.0.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.0.blocks.1.norm2.weight, encoders.camera.backbone.stages.0.blocks.1.norm2.bias, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.0.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.0.downsample.norm.weight, encoders.camera.backbone.stages.0.downsample.norm.bias, encoders.camera.backbone.stages.0.downsample.reduction.weight, encoders.camera.backbone.stages.1.blocks.0.norm1.weight, encoders.camera.backbone.stages.1.blocks.0.norm1.bias, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.1.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.1.blocks.0.norm2.weight, encoders.camera.backbone.stages.1.blocks.0.norm2.bias, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.1.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.1.blocks.1.norm1.weight, encoders.camera.backbone.stages.1.blocks.1.norm1.bias, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.1.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.1.blocks.1.norm2.weight, encoders.camera.backbone.stages.1.blocks.1.norm2.bias, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.1.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.1.downsample.norm.weight, encoders.camera.backbone.stages.1.downsample.norm.bias, encoders.camera.backbone.stages.1.downsample.reduction.weight, encoders.camera.backbone.stages.2.blocks.0.norm1.weight, encoders.camera.backbone.stages.2.blocks.0.norm1.bias, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.0.norm2.weight, encoders.camera.backbone.stages.2.blocks.0.norm2.bias, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.1.norm1.weight, encoders.camera.backbone.stages.2.blocks.1.norm1.bias, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.1.norm2.weight, encoders.camera.backbone.stages.2.blocks.1.norm2.bias, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.2.norm1.weight, encoders.camera.backbone.stages.2.blocks.2.norm1.bias, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.2.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.2.norm2.weight, encoders.camera.backbone.stages.2.blocks.2.norm2.bias, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.2.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.3.norm1.weight, encoders.camera.backbone.stages.2.blocks.3.norm1.bias, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.3.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.3.norm2.weight, encoders.camera.backbone.stages.2.blocks.3.norm2.bias, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.3.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.4.norm1.weight, encoders.camera.backbone.stages.2.blocks.4.norm1.bias, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.4.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.4.norm2.weight, encoders.camera.backbone.stages.2.blocks.4.norm2.bias, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.4.ffn.layers.1.bias, encoders.camera.backbone.stages.2.blocks.5.norm1.weight, encoders.camera.backbone.stages.2.blocks.5.norm1.bias, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.proj.weight, encoders.camera.backbone.stages.2.blocks.5.attn.w_msa.proj.bias, encoders.camera.backbone.stages.2.blocks.5.norm2.weight, encoders.camera.backbone.stages.2.blocks.5.norm2.bias, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.0.0.weight, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.0.0.bias, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.1.weight, encoders.camera.backbone.stages.2.blocks.5.ffn.layers.1.bias, encoders.camera.backbone.stages.2.downsample.norm.weight, encoders.camera.backbone.stages.2.downsample.norm.bias, encoders.camera.backbone.stages.2.downsample.reduction.weight, encoders.camera.backbone.stages.3.blocks.0.norm1.weight, encoders.camera.backbone.stages.3.blocks.0.norm1.bias, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.proj.weight, encoders.camera.backbone.stages.3.blocks.0.attn.w_msa.proj.bias, encoders.camera.backbone.stages.3.blocks.0.norm2.weight, encoders.camera.backbone.stages.3.blocks.0.norm2.bias, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.0.0.weight, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.0.0.bias, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.1.weight, encoders.camera.backbone.stages.3.blocks.0.ffn.layers.1.bias, encoders.camera.backbone.stages.3.blocks.1.norm1.weight, encoders.camera.backbone.stages.3.blocks.1.norm1.bias, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.relative_position_index, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.qkv.weight, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.qkv.bias, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.proj.weight, encoders.camera.backbone.stages.3.blocks.1.attn.w_msa.proj.bias, encoders.camera.backbone.stages.3.blocks.1.norm2.weight, encoders.camera.backbone.stages.3.blocks.1.norm2.bias, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.0.0.weight, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.0.0.bias, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.1.weight, encoders.camera.backbone.stages.3.blocks.1.ffn.layers.1.bias, encoders.camera.backbone.norm1.weight, encoders.camera.backbone.norm1.bias, encoders.camera.backbone.norm2.weight, encoders.camera.backbone.norm2.bias, encoders.camera.backbone.norm3.weight, encoders.camera.backbone.norm3.bias, encoders.camera.neck.lateral_convs.0.conv.weight, encoders.camera.neck.lateral_convs.0.bn.weight, encoders.camera.neck.lateral_convs.0.bn.bias, encoders.camera.neck.lateral_convs.0.bn.running_mean, encoders.camera.neck.lateral_convs.0.bn.running_var, encoders.camera.neck.lateral_convs.1.conv.weight, encoders.camera.neck.lateral_convs.1.bn.weight, encoders.camera.neck.lateral_convs.1.bn.bias, encoders.camera.neck.lateral_convs.1.bn.running_mean, encoders.camera.neck.lateral_convs.1.bn.running_var, encoders.camera.neck.fpn_convs.0.conv.weight, encoders.camera.neck.fpn_convs.0.bn.weight, encoders.camera.neck.fpn_convs.0.bn.bias, encoders.camera.neck.fpn_convs.0.bn.running_mean, encoders.camera.neck.fpn_convs.0.bn.running_var, encoders.camera.neck.fpn_convs.1.conv.weight, encoders.camera.neck.fpn_convs.1.bn.weight, encoders.camera.neck.fpn_convs.1.bn.bias, encoders.camera.neck.fpn_convs.1.bn.running_mean, encoders.camera.neck.fpn_convs.1.bn.running_var, encoders.camera.vtransform.dx, encoders.camera.vtransform.bx, encoders.camera.vtransform.nx, encoders.camera.vtransform.frustum, encoders.camera.vtransform.dtransform.0.weight, encoders.camera.vtransform.dtransform.0.bias, encoders.camera.vtransform.dtransform.1.weight, encoders.camera.vtransform.dtransform.1.bias, encoders.camera.vtransform.dtransform.1.running_mean, encoders.camera.vtransform.dtransform.1.running_var, encoders.camera.vtransform.dtransform.3.weight, encoders.camera.vtransform.dtransform.3.bias, encoders.camera.vtransform.dtransform.4.weight, encoders.camera.vtransform.dtransform.4.bias, encoders.camera.vtransform.dtransform.4.running_mean, encoders.camera.vtransform.dtransform.4.running_var, encoders.camera.vtransform.dtransform.6.weight, encoders.camera.vtransform.dtransform.6.bias, encoders.camera.vtransform.dtransform.7.weight, encoders.camera.vtransform.dtransform.7.bias, encoders.camera.vtransform.dtransform.7.running_mean, encoders.camera.vtransform.dtransform.7.running_var, encoders.camera.vtransform.depthnet.0.weight, encoders.camera.vtransform.depthnet.0.bias, encoders.camera.vtransform.depthnet.1.weight, encoders.camera.vtransform.depthnet.1.bias, encoders.camera.vtransform.depthnet.1.running_mean, encoders.camera.vtransform.depthnet.1.running_var, encoders.camera.vtransform.depthnet.3.weight, encoders.camera.vtransform.depthnet.3.bias, encoders.camera.vtransform.depthnet.4.weight, encoders.camera.vtransform.depthnet.4.bias, encoders.camera.vtransform.depthnet.4.running_mean, encoders.camera.vtransform.depthnet.4.running_var, encoders.camera.vtransform.depthnet.6.weight, encoders.camera.vtransform.depthnet.6.bias, encoders.camera.vtransform.downsample.0.weight, encoders.camera.vtransform.downsample.1.weight, encoders.camera.vtransform.downsample.1.bias, encoders.camera.vtransform.downsample.1.running_mean, encoders.camera.vtransform.downsample.1.running_var, encoders.camera.vtransform.downsample.3.weight, encoders.camera.vtransform.downsample.4.weight, encoders.camera.vtransform.downsample.4.bias, encoders.camera.vtransform.downsample.4.running_mean, encoders.camera.vtransform.downsample.4.running_var, encoders.camera.vtransform.downsample.6.weight, encoders.camera.vtransform.downsample.7.weight, encoders.camera.vtransform.downsample.7.bias, encoders.camera.vtransform.downsample.7.running_mean, encoders.camera.vtransform.downsample.7.running_var, encoders.infra.backbone.patch_embed.projection.weight, encoders.infra.backbone.patch_embed.projection.bias, encoders.infra.backbone.patch_embed.norm.weight, encoders.infra.backbone.patch_embed.norm.bias, encoders.infra.backbone.stages.0.blocks.0.norm1.weight, encoders.infra.backbone.stages.0.blocks.0.norm1.bias, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.0.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.0.blocks.0.norm2.weight, encoders.infra.backbone.stages.0.blocks.0.norm2.bias, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.0.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.0.blocks.1.norm1.weight, encoders.infra.backbone.stages.0.blocks.1.norm1.bias, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.0.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.0.blocks.1.norm2.weight, encoders.infra.backbone.stages.0.blocks.1.norm2.bias, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.0.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.0.downsample.norm.weight, encoders.infra.backbone.stages.0.downsample.norm.bias, encoders.infra.backbone.stages.0.downsample.reduction.weight, encoders.infra.backbone.stages.1.blocks.0.norm1.weight, encoders.infra.backbone.stages.1.blocks.0.norm1.bias, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.1.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.1.blocks.0.norm2.weight, encoders.infra.backbone.stages.1.blocks.0.norm2.bias, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.1.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.1.blocks.1.norm1.weight, encoders.infra.backbone.stages.1.blocks.1.norm1.bias, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.1.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.1.blocks.1.norm2.weight, encoders.infra.backbone.stages.1.blocks.1.norm2.bias, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.1.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.1.downsample.norm.weight, encoders.infra.backbone.stages.1.downsample.norm.bias, encoders.infra.backbone.stages.1.downsample.reduction.weight, encoders.infra.backbone.stages.2.blocks.0.norm1.weight, encoders.infra.backbone.stages.2.blocks.0.norm1.bias, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.0.norm2.weight, encoders.infra.backbone.stages.2.blocks.0.norm2.bias, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.1.norm1.weight, encoders.infra.backbone.stages.2.blocks.1.norm1.bias, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.1.norm2.weight, encoders.infra.backbone.stages.2.blocks.1.norm2.bias, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.2.norm1.weight, encoders.infra.backbone.stages.2.blocks.2.norm1.bias, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.2.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.2.norm2.weight, encoders.infra.backbone.stages.2.blocks.2.norm2.bias, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.2.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.3.norm1.weight, encoders.infra.backbone.stages.2.blocks.3.norm1.bias, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.3.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.3.norm2.weight, encoders.infra.backbone.stages.2.blocks.3.norm2.bias, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.3.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.4.norm1.weight, encoders.infra.backbone.stages.2.blocks.4.norm1.bias, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.4.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.4.norm2.weight, encoders.infra.backbone.stages.2.blocks.4.norm2.bias, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.4.ffn.layers.1.bias, encoders.infra.backbone.stages.2.blocks.5.norm1.weight, encoders.infra.backbone.stages.2.blocks.5.norm1.bias, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.proj.weight, encoders.infra.backbone.stages.2.blocks.5.attn.w_msa.proj.bias, encoders.infra.backbone.stages.2.blocks.5.norm2.weight, encoders.infra.backbone.stages.2.blocks.5.norm2.bias, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.0.0.weight, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.0.0.bias, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.1.weight, encoders.infra.backbone.stages.2.blocks.5.ffn.layers.1.bias, encoders.infra.backbone.stages.2.downsample.norm.weight, encoders.infra.backbone.stages.2.downsample.norm.bias, encoders.infra.backbone.stages.2.downsample.reduction.weight, encoders.infra.backbone.stages.3.blocks.0.norm1.weight, encoders.infra.backbone.stages.3.blocks.0.norm1.bias, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.proj.weight, encoders.infra.backbone.stages.3.blocks.0.attn.w_msa.proj.bias, encoders.infra.backbone.stages.3.blocks.0.norm2.weight, encoders.infra.backbone.stages.3.blocks.0.norm2.bias, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.0.0.weight, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.0.0.bias, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.1.weight, encoders.infra.backbone.stages.3.blocks.0.ffn.layers.1.bias, encoders.infra.backbone.stages.3.blocks.1.norm1.weight, encoders.infra.backbone.stages.3.blocks.1.norm1.bias, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.relative_position_index, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.qkv.weight, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.qkv.bias, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.proj.weight, encoders.infra.backbone.stages.3.blocks.1.attn.w_msa.proj.bias, encoders.infra.backbone.stages.3.blocks.1.norm2.weight, encoders.infra.backbone.stages.3.blocks.1.norm2.bias, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.0.0.weight, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.0.0.bias, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.1.weight, encoders.infra.backbone.stages.3.blocks.1.ffn.layers.1.bias, encoders.infra.backbone.norm1.weight, encoders.infra.backbone.norm1.bias, encoders.infra.backbone.norm2.weight, encoders.infra.backbone.norm2.bias, encoders.infra.backbone.norm3.weight, encoders.infra.backbone.norm3.bias, encoders.infra.neck.lateral_convs.0.conv.weight, encoders.infra.neck.lateral_convs.0.bn.weight, encoders.infra.neck.lateral_convs.0.bn.bias, encoders.infra.neck.lateral_convs.0.bn.running_mean, encoders.infra.neck.lateral_convs.0.bn.running_var, encoders.infra.neck.lateral_convs.1.conv.weight, encoders.infra.neck.lateral_convs.1.bn.weight, encoders.infra.neck.lateral_convs.1.bn.bias, encoders.infra.neck.lateral_convs.1.bn.running_mean, encoders.infra.neck.lateral_convs.1.bn.running_var, encoders.infra.neck.fpn_convs.0.conv.weight, encoders.infra.neck.fpn_convs.0.bn.weight, encoders.infra.neck.fpn_convs.0.bn.bias, encoders.infra.neck.fpn_convs.0.bn.running_mean, encoders.infra.neck.fpn_convs.0.bn.running_var, encoders.infra.neck.fpn_convs.1.conv.weight, encoders.infra.neck.fpn_convs.1.bn.weight, encoders.infra.neck.fpn_convs.1.bn.bias, encoders.infra.neck.fpn_convs.1.bn.running_mean, encoders.infra.neck.fpn_convs.1.bn.running_var, encoders.infra.vtransform.dx, encoders.infra.vtransform.bx, encoders.infra.vtransform.nx, encoders.infra.vtransform.frustum, encoders.infra.vtransform.dtransform.0.weight, encoders.infra.vtransform.dtransform.0.bias, encoders.infra.vtransform.dtransform.1.weight, encoders.infra.vtransform.dtransform.1.bias, encoders.infra.vtransform.dtransform.1.running_mean, encoders.infra.vtransform.dtransform.1.running_var, encoders.infra.vtransform.dtransform.3.weight, encoders.infra.vtransform.dtransform.3.bias, encoders.infra.vtransform.dtransform.4.weight, encoders.infra.vtransform.dtransform.4.bias, encoders.infra.vtransform.dtransform.4.running_mean, encoders.infra.vtransform.dtransform.4.running_var, encoders.infra.vtransform.dtransform.6.weight, encoders.infra.vtransform.dtransform.6.bias, encoders.infra.vtransform.dtransform.7.weight, encoders.infra.vtransform.dtransform.7.bias, encoders.infra.vtransform.dtransform.7.running_mean, encoders.infra.vtransform.dtransform.7.running_var, encoders.infra.vtransform.depthnet.0.weight, encoders.infra.vtransform.depthnet.0.bias, encoders.infra.vtransform.depthnet.1.weight, encoders.infra.vtransform.depthnet.1.bias, encoders.infra.vtransform.depthnet.1.running_mean, encoders.infra.vtransform.depthnet.1.running_var, encoders.infra.vtransform.depthnet.3.weight, encoders.infra.vtransform.depthnet.3.bias, encoders.infra.vtransform.depthnet.4.weight, encoders.infra.vtransform.depthnet.4.bias, encoders.infra.vtransform.depthnet.4.running_mean, encoders.infra.vtransform.depthnet.4.running_var, encoders.infra.vtransform.depthnet.6.weight, encoders.infra.vtransform.depthnet.6.bias, encoders.infra.vtransform.downsample.0.weight, encoders.infra.vtransform.downsample.1.weight, encoders.infra.vtransform.downsample.1.bias, encoders.infra.vtransform.downsample.1.running_mean, encoders.infra.vtransform.downsample.1.running_var, encoders.infra.vtransform.downsample.3.weight, encoders.infra.vtransform.downsample.4.weight, encoders.infra.vtransform.downsample.4.bias, encoders.infra.vtransform.downsample.4.running_mean, encoders.infra.vtransform.downsample.4.running_var, encoders.infra.vtransform.downsample.6.weight, encoders.infra.vtransform.downsample.7.weight, encoders.infra.vtransform.downsample.7.bias, encoders.infra.vtransform.downsample.7.running_mean, encoders.infra.vtransform.downsample.7.running_var, fuser.0.weight, fuser.1.weight, fuser.1.bias, fuser.1.running_mean, fuser.1.running_var

2024-09-04 09:21:04,049 - mmdet3d - INFO - Start running, host: jmeng18@sg048, work_dir: /home/jmeng18/bev_fusion/bevfusion-beliv/train_result_infra_short_full
2024-09-04 09:21:04,049 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2024-09-04 09:21:04,050 - mmdet3d - INFO - workflow: [('train', 1)], max: 10 epochs
2024-09-04 09:21:04,052 - mmdet3d - INFO - Checkpoints will be saved to /home/jmeng18/bev_fusion/bevfusion-beliv/train_result_infra_short_full by HardDiskBackend.
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/models/heads/bbox/transfusion.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  top_proposals_class = top_proposals // heatmap.shape[-1]
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/models/heads/bbox/transfusion.py:535: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  grid_size[:2] // self.train_cfg["out_size_factor"]
2024-09-04 09:22:53,864 - mmdet3d - INFO - Epoch [1][50/8000]	lr: 7.973e-05, eta: 2 days, 0:35:49, time: 2.188, data_time: 0.837, memory: 6907, loss/object/loss_heatmap: 236.8690, loss/object/layer_-1_loss_cls: 1.4132, loss/object/layer_-1_loss_bbox: 11.7739, stats/object/matched_ious: 0.0100, loss: 250.0561, grad_norm: nan
2024-09-04 09:24:09,906 - mmdet3d - INFO - Epoch [1][100/8000]	lr: 9.307e-05, eta: 1 day, 17:09:37, time: 1.521, data_time: 0.454, memory: 6934, loss/object/loss_heatmap: 45.5273, loss/object/layer_-1_loss_cls: 0.7949, loss/object/layer_-1_loss_bbox: 5.5026, stats/object/matched_ious: 0.0276, loss: 51.8248, grad_norm: 491.3445
2024-09-04 09:25:28,779 - mmdet3d - INFO - Epoch [1][150/8000]	lr: 1.064e-04, eta: 1 day, 15:05:09, time: 1.577, data_time: 0.515, memory: 6934, loss/object/loss_heatmap: 6.5189, loss/object/layer_-1_loss_cls: 0.5926, loss/object/layer_-1_loss_bbox: 4.4435, stats/object/matched_ious: 0.0595, loss: 11.5551, grad_norm: 105.1141
2024-09-04 09:26:42,118 - mmdet3d - INFO - Epoch [1][200/8000]	lr: 1.197e-04, eta: 1 day, 13:25:28, time: 1.467, data_time: 0.412, memory: 6948, loss/object/loss_heatmap: 2.4675, loss/object/layer_-1_loss_cls: 0.4052, loss/object/layer_-1_loss_bbox: 2.2306, stats/object/matched_ious: 0.1507, loss: 5.1033, grad_norm: 43.0003
2024-09-04 09:27:53,088 - mmdet3d - INFO - Epoch [1][250/8000]	lr: 1.331e-04, eta: 1 day, 12:12:34, time: 1.419, data_time: 0.353, memory: 6948, loss/object/loss_heatmap: 1.6824, loss/object/layer_-1_loss_cls: 0.2605, loss/object/layer_-1_loss_bbox: 1.4385, stats/object/matched_ious: 0.2260, loss: 3.3814, grad_norm: 23.8163
2024-09-04 09:29:00,416 - mmdet3d - INFO - Epoch [1][300/8000]	lr: 1.464e-04, eta: 1 day, 11:07:27, time: 1.347, data_time: 0.285, memory: 6948, loss/object/loss_heatmap: 1.6264, loss/object/layer_-1_loss_cls: 0.2221, loss/object/layer_-1_loss_bbox: 1.6493, stats/object/matched_ious: 0.2080, loss: 3.4978, grad_norm: 18.2385
2024-09-04 09:30:10,789 - mmdet3d - INFO - Epoch [1][350/8000]	lr: 1.597e-04, eta: 1 day, 10:32:10, time: 1.407, data_time: 0.349, memory: 6948, loss/object/loss_heatmap: 1.3169, loss/object/layer_-1_loss_cls: 0.1795, loss/object/layer_-1_loss_bbox: 1.2695, stats/object/matched_ious: 0.2575, loss: 2.7659, grad_norm: 11.9525
2024-09-04 09:31:21,953 - mmdet3d - INFO - Epoch [1][400/8000]	lr: 1.731e-04, eta: 1 day, 10:08:01, time: 1.423, data_time: 0.342, memory: 6949, loss/object/loss_heatmap: 1.2619, loss/object/layer_-1_loss_cls: 0.1605, loss/object/layer_-1_loss_bbox: 1.3161, stats/object/matched_ious: 0.2646, loss: 2.7385, grad_norm: 12.4424
2024-09-04 09:32:34,578 - mmdet3d - INFO - Epoch [1][450/8000]	lr: 1.864e-04, eta: 1 day, 9:53:18, time: 1.453, data_time: 0.404, memory: 6949, loss/object/loss_heatmap: 1.3022, loss/object/layer_-1_loss_cls: 0.1555, loss/object/layer_-1_loss_bbox: 1.4105, stats/object/matched_ious: 0.2510, loss: 2.8682, grad_norm: 12.6606
2024-09-04 09:33:45,745 - mmdet3d - INFO - Epoch [1][500/8000]	lr: 1.997e-04, eta: 1 day, 9:37:24, time: 1.423, data_time: 0.338, memory: 6949, loss/object/loss_heatmap: 1.0632, loss/object/layer_-1_loss_cls: 0.1216, loss/object/layer_-1_loss_bbox: 1.1850, stats/object/matched_ious: 0.2920, loss: 2.3697, grad_norm: 9.6519
2024-09-04 09:34:53,353 - mmdet3d - INFO - Epoch [1][550/8000]	lr: 2.000e-04, eta: 1 day, 9:15:37, time: 1.352, data_time: 0.274, memory: 6949, loss/object/loss_heatmap: 1.1631, loss/object/layer_-1_loss_cls: 0.1377, loss/object/layer_-1_loss_bbox: 1.3417, stats/object/matched_ious: 0.2903, loss: 2.6425, grad_norm: 10.7350
2024-09-04 09:35:58,815 - mmdet3d - INFO - Epoch [1][600/8000]	lr: 2.000e-04, eta: 1 day, 8:52:33, time: 1.309, data_time: 0.233, memory: 6949, loss/object/loss_heatmap: 1.1043, loss/object/layer_-1_loss_cls: 0.1288, loss/object/layer_-1_loss_bbox: 1.2434, stats/object/matched_ious: 0.3000, loss: 2.4765, grad_norm: 9.5486
2024-09-04 09:37:05,084 - mmdet3d - INFO - Epoch [1][650/8000]	lr: 2.000e-04, eta: 1 day, 8:34:30, time: 1.325, data_time: 0.238, memory: 6949, loss/object/loss_heatmap: 1.0897, loss/object/layer_-1_loss_cls: 0.1169, loss/object/layer_-1_loss_bbox: 1.3180, stats/object/matched_ious: 0.3096, loss: 2.5246, grad_norm: 8.6545
2024-09-04 09:38:09,567 - mmdet3d - INFO - Epoch [1][700/8000]	lr: 2.000e-04, eta: 1 day, 8:15:30, time: 1.290, data_time: 0.225, memory: 6952, loss/object/loss_heatmap: 1.0242, loss/object/layer_-1_loss_cls: 0.1345, loss/object/layer_-1_loss_bbox: 1.0903, stats/object/matched_ious: 0.3327, loss: 2.2489, grad_norm: 9.5453
2024-09-04 09:39:16,983 - mmdet3d - INFO - Epoch [1][750/8000]	lr: 2.000e-04, eta: 1 day, 8:04:03, time: 1.348, data_time: 0.274, memory: 6956, loss/object/loss_heatmap: 1.0460, loss/object/layer_-1_loss_cls: 0.1198, loss/object/layer_-1_loss_bbox: 1.2308, stats/object/matched_ious: 0.3231, loss: 2.3966, grad_norm: 8.3817
2024-09-04 09:40:26,397 - mmdet3d - INFO - Epoch [1][800/8000]	lr: 2.000e-04, eta: 1 day, 7:57:11, time: 1.388, data_time: 0.319, memory: 6956, loss/object/loss_heatmap: 0.9817, loss/object/layer_-1_loss_cls: 0.1163, loss/object/layer_-1_loss_bbox: 1.0695, stats/object/matched_ious: 0.3545, loss: 2.1675, grad_norm: 8.1116
2024-09-04 09:41:38,827 - mmdet3d - INFO - Epoch [1][850/8000]	lr: 2.000e-04, eta: 1 day, 7:55:41, time: 1.449, data_time: 0.384, memory: 6956, loss/object/loss_heatmap: 1.0024, loss/object/layer_-1_loss_cls: 0.1072, loss/object/layer_-1_loss_bbox: 1.2065, stats/object/matched_ious: 0.3607, loss: 2.3161, grad_norm: 8.6197
2024-09-04 09:42:50,076 - mmdet3d - INFO - Epoch [1][900/8000]	lr: 2.000e-04, eta: 1 day, 7:52:29, time: 1.425, data_time: 0.363, memory: 6956, loss/object/loss_heatmap: 0.9803, loss/object/layer_-1_loss_cls: 0.0993, loss/object/layer_-1_loss_bbox: 1.3923, stats/object/matched_ious: 0.3425, loss: 2.4719, grad_norm: 8.7367
2024-09-04 09:43:55,185 - mmdet3d - INFO - Epoch [1][950/8000]	lr: 2.000e-04, eta: 1 day, 7:40:58, time: 1.302, data_time: 0.243, memory: 6970, loss/object/loss_heatmap: 0.9907, loss/object/layer_-1_loss_cls: 0.1238, loss/object/layer_-1_loss_bbox: 1.2279, stats/object/matched_ious: 0.3654, loss: 2.3424, grad_norm: 9.3001
2024-09-04 09:45:04,885 - mmdet3d - INFO - Epoch [1][1000/8000]	lr: 2.000e-04, eta: 1 day, 7:36:33, time: 1.394, data_time: 0.318, memory: 6970, loss/object/loss_heatmap: 0.9434, loss/object/layer_-1_loss_cls: 0.1061, loss/object/layer_-1_loss_bbox: 1.2374, stats/object/matched_ious: 0.3688, loss: 2.2869, grad_norm: 6.8798
2024-09-04 09:46:19,517 - mmdet3d - INFO - Epoch [1][1050/8000]	lr: 2.000e-04, eta: 1 day, 7:38:37, time: 1.493, data_time: 0.424, memory: 6970, loss/object/loss_heatmap: 0.9168, loss/object/layer_-1_loss_cls: 0.0966, loss/object/layer_-1_loss_bbox: 1.2183, stats/object/matched_ious: 0.3768, loss: 2.2318, grad_norm: 6.6315
2024-09-04 09:47:47,852 - mmdet3d - INFO - Epoch [1][1100/8000]	lr: 2.000e-04, eta: 1 day, 7:56:46, time: 1.767, data_time: 0.650, memory: 6970, loss/object/loss_heatmap: 0.9678, loss/object/layer_-1_loss_cls: 0.1271, loss/object/layer_-1_loss_bbox: 1.0942, stats/object/matched_ious: 0.4058, loss: 2.1891, grad_norm: 7.9398
2024-09-04 09:49:06,013 - mmdet3d - INFO - Epoch [1][1150/8000]	lr: 2.000e-04, eta: 1 day, 8:01:35, time: 1.563, data_time: 0.504, memory: 6970, loss/object/loss_heatmap: 0.9421, loss/object/layer_-1_loss_cls: 0.1035, loss/object/layer_-1_loss_bbox: 1.1693, stats/object/matched_ious: 0.3892, loss: 2.2148, grad_norm: 6.3647
2024-09-04 09:50:21,215 - mmdet3d - INFO - Epoch [1][1200/8000]	lr: 2.000e-04, eta: 1 day, 8:02:40, time: 1.504, data_time: 0.442, memory: 6970, loss/object/loss_heatmap: 0.9297, loss/object/layer_-1_loss_cls: 0.0987, loss/object/layer_-1_loss_bbox: 1.2109, stats/object/matched_ious: 0.3912, loss: 2.2393, grad_norm: 7.4095
2024-09-04 09:51:36,526 - mmdet3d - INFO - Epoch [1][1250/8000]	lr: 2.000e-04, eta: 1 day, 8:03:40, time: 1.506, data_time: 0.444, memory: 6970, loss/object/loss_heatmap: 0.8319, loss/object/layer_-1_loss_cls: 0.0910, loss/object/layer_-1_loss_bbox: 1.0459, stats/object/matched_ious: 0.4159, loss: 1.9688, grad_norm: 6.8701
2024-09-04 09:52:52,857 - mmdet3d - INFO - Epoch [1][1300/8000]	lr: 2.000e-04, eta: 1 day, 8:05:31, time: 1.527, data_time: 0.381, memory: 6970, loss/object/loss_heatmap: 0.8234, loss/object/layer_-1_loss_cls: 0.0934, loss/object/layer_-1_loss_bbox: 0.9898, stats/object/matched_ious: 0.4259, loss: 1.9065, grad_norm: 6.2377
2024-09-04 09:54:09,615 - mmdet3d - INFO - Epoch [1][1350/8000]	lr: 2.000e-04, eta: 1 day, 8:07:33, time: 1.535, data_time: 0.491, memory: 6970, loss/object/loss_heatmap: 0.8225, loss/object/layer_-1_loss_cls: 0.0920, loss/object/layer_-1_loss_bbox: 1.0735, stats/object/matched_ious: 0.4374, loss: 1.9880, grad_norm: 6.1827
2024-09-04 09:55:30,222 - mmdet3d - INFO - Epoch [1][1400/8000]	lr: 2.000e-04, eta: 1 day, 8:12:57, time: 1.612, data_time: 0.532, memory: 6970, loss/object/loss_heatmap: 0.8003, loss/object/layer_-1_loss_cls: 0.0869, loss/object/layer_-1_loss_bbox: 1.1263, stats/object/matched_ious: 0.4379, loss: 2.0135, grad_norm: 5.8162
2024-09-04 09:56:50,836 - mmdet3d - INFO - Epoch [1][1450/8000]	lr: 2.000e-04, eta: 1 day, 8:17:54, time: 1.612, data_time: 0.532, memory: 6970, loss/object/loss_heatmap: 0.8083, loss/object/layer_-1_loss_cls: 0.0965, loss/object/layer_-1_loss_bbox: 0.9730, stats/object/matched_ious: 0.4477, loss: 1.8778, grad_norm: 5.7786
2024-09-04 09:58:09,767 - mmdet3d - INFO - Epoch [1][1500/8000]	lr: 2.000e-04, eta: 1 day, 8:20:57, time: 1.579, data_time: 0.469, memory: 6970, loss/object/loss_heatmap: 0.8715, loss/object/layer_-1_loss_cls: 0.1018, loss/object/layer_-1_loss_bbox: 1.0842, stats/object/matched_ious: 0.4285, loss: 2.0575, grad_norm: 5.8132
2024-09-04 09:59:30,412 - mmdet3d - INFO - Epoch [1][1550/8000]	lr: 2.000e-04, eta: 1 day, 8:25:10, time: 1.613, data_time: 0.531, memory: 6970, loss/object/loss_heatmap: 0.8020, loss/object/layer_-1_loss_cls: 0.0930, loss/object/layer_-1_loss_bbox: 0.9870, stats/object/matched_ious: 0.4724, loss: 1.8819, grad_norm: 5.7640
2024-09-04 10:00:49,172 - mmdet3d - INFO - Epoch [1][1600/8000]	lr: 2.000e-04, eta: 1 day, 8:27:30, time: 1.575, data_time: 0.465, memory: 6970, loss/object/loss_heatmap: 0.8004, loss/object/layer_-1_loss_cls: 0.0807, loss/object/layer_-1_loss_bbox: 1.2071, stats/object/matched_ious: 0.4405, loss: 2.0882, grad_norm: 5.0401
2024-09-04 10:02:10,862 - mmdet3d - INFO - Epoch [1][1650/8000]	lr: 2.000e-04, eta: 1 day, 8:31:56, time: 1.634, data_time: 0.528, memory: 6970, loss/object/loss_heatmap: 0.8549, loss/object/layer_-1_loss_cls: 0.0904, loss/object/layer_-1_loss_bbox: 1.0886, stats/object/matched_ious: 0.4534, loss: 2.0339, grad_norm: 5.0636
2024-09-04 10:03:36,129 - mmdet3d - INFO - Epoch [1][1700/8000]	lr: 2.000e-04, eta: 1 day, 8:38:46, time: 1.705, data_time: 0.634, memory: 6970, loss/object/loss_heatmap: 0.8071, loss/object/layer_-1_loss_cls: 0.0891, loss/object/layer_-1_loss_bbox: 1.0452, stats/object/matched_ious: 0.4616, loss: 1.9414, grad_norm: 5.2114
2024-09-04 10:04:55,694 - mmdet3d - INFO - Epoch [1][1750/8000]	lr: 2.000e-04, eta: 1 day, 8:40:53, time: 1.591, data_time: 0.517, memory: 6970, loss/object/loss_heatmap: 0.7731, loss/object/layer_-1_loss_cls: 0.0912, loss/object/layer_-1_loss_bbox: 0.9627, stats/object/matched_ious: 0.4626, loss: 1.8270, grad_norm: 5.0447
2024-09-04 10:06:14,242 - mmdet3d - INFO - Epoch [1][1800/8000]	lr: 2.000e-04, eta: 1 day, 8:42:04, time: 1.571, data_time: 0.493, memory: 6970, loss/object/loss_heatmap: 0.7461, loss/object/layer_-1_loss_cls: 0.0872, loss/object/layer_-1_loss_bbox: 0.8796, stats/object/matched_ious: 0.4863, loss: 1.7129, grad_norm: 4.6815
2024-09-04 10:07:36,062 - mmdet3d - INFO - Epoch [1][1850/8000]	lr: 2.000e-04, eta: 1 day, 8:45:26, time: 1.636, data_time: 0.554, memory: 6970, loss/object/loss_heatmap: 0.7759, loss/object/layer_-1_loss_cls: 0.0830, loss/object/layer_-1_loss_bbox: 1.0561, stats/object/matched_ious: 0.4728, loss: 1.9150, grad_norm: 4.7186
2024-09-04 10:08:53,676 - mmdet3d - INFO - Epoch [1][1900/8000]	lr: 2.000e-04, eta: 1 day, 8:45:39, time: 1.552, data_time: 0.458, memory: 6970, loss/object/loss_heatmap: 0.6976, loss/object/layer_-1_loss_cls: 0.0851, loss/object/layer_-1_loss_bbox: 0.8487, stats/object/matched_ious: 0.5063, loss: 1.6313, grad_norm: 5.0248
2024-09-04 10:10:18,070 - mmdet3d - INFO - Epoch [1][1950/8000]	lr: 2.000e-04, eta: 1 day, 8:50:19, time: 1.688, data_time: 0.601, memory: 6970, loss/object/loss_heatmap: 0.7704, loss/object/layer_-1_loss_cls: 0.0878, loss/object/layer_-1_loss_bbox: 1.0678, stats/object/matched_ious: 0.4636, loss: 1.9259, grad_norm: 5.2056
2024-09-04 10:11:36,423 - mmdet3d - INFO - Epoch [1][2000/8000]	lr: 2.000e-04, eta: 1 day, 8:50:46, time: 1.567, data_time: 0.511, memory: 6970, loss/object/loss_heatmap: 0.8119, loss/object/layer_-1_loss_cls: 0.0976, loss/object/layer_-1_loss_bbox: 1.1101, stats/object/matched_ious: 0.4526, loss: 2.0196, grad_norm: 4.9554
2024-09-04 10:12:54,668 - mmdet3d - INFO - Epoch [1][2050/8000]	lr: 2.000e-04, eta: 1 day, 8:51:03, time: 1.565, data_time: 0.502, memory: 6970, loss/object/loss_heatmap: 0.7517, loss/object/layer_-1_loss_cls: 0.0869, loss/object/layer_-1_loss_bbox: 0.9101, stats/object/matched_ious: 0.4768, loss: 1.7487, grad_norm: 4.8255
2024-09-04 10:14:20,246 - mmdet3d - INFO - Epoch [1][2100/8000]	lr: 2.000e-04, eta: 1 day, 8:55:48, time: 1.712, data_time: 0.587, memory: 6970, loss/object/loss_heatmap: 0.7544, loss/object/layer_-1_loss_cls: 0.0831, loss/object/layer_-1_loss_bbox: 0.9726, stats/object/matched_ious: 0.4836, loss: 1.8101, grad_norm: 4.7489
2024-09-04 10:15:50,039 - mmdet3d - INFO - Epoch [1][2150/8000]	lr: 2.000e-04, eta: 1 day, 9:02:48, time: 1.796, data_time: 0.692, memory: 6970, loss/object/loss_heatmap: 0.7164, loss/object/layer_-1_loss_cls: 0.0816, loss/object/layer_-1_loss_bbox: 0.9535, stats/object/matched_ious: 0.4737, loss: 1.7515, grad_norm: 5.0815
^C]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.camera.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-det.pth --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ ^C
]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.camera.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-det.pth --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ ^C
]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.camera.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-det.pth --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ torchpack dist-run -np 1 python tools/train.py connfigs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --model.encoders.cameraa.backbone.init_cfg.checkpoint pretrained/swint-nuimages-pretrained.pth --load_from pretrained/lidar-only-deet.pth --run-dir train_result_infra_short_full[1P[1P[1P[1P[1P[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C -[C[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --r[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --ru[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-d[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-di[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir[1P train_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir [1Ptrain_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir t[1Prain_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir tr[1Pain_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir tra[1Pin_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir trai[1Pn_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train[1P_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_[1Presult_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_r[1Pesult_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_re[1Psult_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_res[1Pult_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_resu[1Plt_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_resul[1Pt_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result[1P_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_[1Pinfra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C--run-dir train_result_i[1Pnfra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_in[1Pfra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_inf[1Pra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infr[1Pa_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra[1P_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_[1Pshort_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_s[1Phort_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_sh[1Port_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_sho[1Prt_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_shor[1Pt_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_short[1P_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_short_[1Pfull[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C--run-dir train_result_infra_short_f[1Pull[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_short_fu[1Pll[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_short_ful[C[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_short_full[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result_infra_short_full [K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C -[C[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --r[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --ru[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-d[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-di[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir[1P train_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir [1Ptrain_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir t[1Prain_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir tr[1Pain_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir tra[1Pin_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir trai[1Pn_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train[1P_result_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_[1Presult_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_r[1Pesult_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_re[1Psult_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_res[1Pult_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_resu[1Plt_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_resul[1Pt_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --run-dir train_result[1P_infra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C--run-dir train_result_[1Pinfra_short_full[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C

/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/core/bbox/box_np_ops.py:781: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.
  def points_in_convex_polygon_jit(points, polygon, clockwise=True):
2024-09-04 10:17:23,213 - mmdet3d - INFO - Config:
seed = 0
deterministic = False
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
load_from = None
resume_from = None
cudnn_benchmark = False
fp16 = dict(loss_scale=dict(growth_interval=2000))
max_epochs = 10
runner = dict(type='CustomEpochBasedRunner', max_epochs=10)
dataset_type = 'NuScenesDataset'
dataset_root = '/scratch/jmeng18/V2X-SIM/'
gt_paste_stop_epoch = -1
reduce_beams = 32
load_dim = 5
use_dim = 5
load_augmented = None
point_cloud_range = [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
voxel_size = [0.075, 0.075, 0.2]
image_size = [256, 704]
augment2d = dict(
    resize=[[0.38, 0.55], [0.48, 0.48]],
    rotate=[-5.4, 5.4],
    gridmask=dict(prob=0.0, fixed_prob=True))
augment3d = dict(
    scale=[0.9, 1.1], rotate=[-0.78539816, 0.78539816], translate=0.5)
object_classes = ['car']
map_classes = [
    'drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area'
]
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=0,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ObjectPaste',
        stop_epoch=-1,
        db_sampler=dict(
            dataset_root='/scratch/jmeng18/V2X-SIM/',
            info_path='/scratch/jmeng18/V2X-SIM/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1], filter_by_min_points=dict(car=5)),
            classes=['car'],
            sample_groups=dict(car=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32))),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.38, 0.55],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[-5.4, 5.4],
        rand_flip=True,
        is_train=True),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[0.9, 1.1],
        rot_lim=[-0.78539816, 0.78539816],
        trans_lim=0.5,
        is_train=True),
    dict(type='RandomFlip3D'),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(type='ObjectNameFilter', classes=['car']),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='GridMask',
        use_h=True,
        use_w=True,
        max_epoch=10,
        rotate=1,
        offset=False,
        ratio=0.5,
        mode=1,
        prob=0.0,
        fixed_prob=True),
    dict(type='PointShuffle'),
    dict(type='DefaultFormatBundle3D', classes=['car']),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.48, 0.48],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[0.0, 0.0],
        rand_flip=False,
        is_train=False),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[1.0, 1.0],
        rot_lim=[0.0, 0.0],
        trans_lim=0.0,
        is_train=False),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(type='DefaultFormatBundle3D', classes=['car']),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'lidar2image', 'camera2lidar', 'img_aug_matrix', 'lidar_aug_matrix'
        ]),
    dict(type='GTDepth', keyframe_only=True)
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='CBGSDataset',
        dataset=dict(
            type='NuScenesDataset',
            dataset_root='/scratch/jmeng18/V2X-SIM/',
            ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_train.pkl',
            pipeline=[
                dict(type='LoadMultiViewImageFromFiles', to_float32=True),
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    load_augmented=None),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=0,
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    load_augmented=None),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True,
                    with_attr_label=False),
                dict(
                    type='ObjectPaste',
                    stop_epoch=-1,
                    db_sampler=dict(
                        dataset_root='/scratch/jmeng18/V2X-SIM/',
                        info_path=
                        '/scratch/jmeng18/V2X-SIM/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(car=5)),
                        classes=['car'],
                        sample_groups=dict(car=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=5,
                            reduce_beams=32))),
                dict(
                    type='ImageAug3D',
                    final_dim=[256, 704],
                    resize_lim=[0.38, 0.55],
                    bot_pct_lim=[0.0, 0.0],
                    rot_lim=[-5.4, 5.4],
                    rand_flip=True,
                    is_train=True),
                dict(
                    type='GlobalRotScaleTrans',
                    resize_lim=[0.9, 1.1],
                    rot_lim=[-0.78539816, 0.78539816],
                    trans_lim=0.5,
                    is_train=True),
                dict(type='RandomFlip3D'),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
                dict(type='ObjectNameFilter', classes=['car']),
                dict(
                    type='ImageNormalize',
                    mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225]),
                dict(
                    type='GridMask',
                    use_h=True,
                    use_w=True,
                    max_epoch=10,
                    rotate=1,
                    offset=False,
                    ratio=0.5,
                    mode=1,
                    prob=0.0,
                    fixed_prob=True),
                dict(type='PointShuffle'),
                dict(type='DefaultFormatBundle3D', classes=['car']),
                dict(
                    type='Collect3D',
                    keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                    meta_keys=[
                        'camera_intrinsics', 'camera2ego', 'lidar2ego',
                        'lidar2camera', 'lidar2image', 'camera2lidar',
                        'img_aug_matrix', 'lidar_aug_matrix'
                    ]),
                dict(type='GTDepth', keyframe_only=True)
            ],
            object_classes=['car'],
            map_classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area'
            ],
            modality=dict(
                use_lidar=True,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False),
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        dataset_root='/scratch/jmeng18/V2X-SIM/',
        ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='DefaultFormatBundle3D', classes=['car']),
            dict(
                type='Collect3D',
                keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=['car'],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        dataset_root='/scratch/jmeng18/V2X-SIM/',
        ann_file='/scratch/jmeng18/V2X-SIM/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='DefaultFormatBundle3D', classes=['car']),
            dict(
                type='Collect3D',
                keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'lidar2image', 'camera2lidar',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ]),
            dict(type='GTDepth', keyframe_only=True)
        ],
        object_classes=['car'],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            load_augmented=None),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            pad_empty_sweeps=True,
            remove_close=True,
            load_augmented=None),
        dict(
            type='LoadAnnotations3D',
            with_bbox_3d=True,
            with_label_3d=True,
            with_attr_label=False),
        dict(
            type='ImageAug3D',
            final_dim=[256, 704],
            resize_lim=[0.48, 0.48],
            bot_pct_lim=[0.0, 0.0],
            rot_lim=[0.0, 0.0],
            rand_flip=False,
            is_train=False),
        dict(
            type='GlobalRotScaleTrans',
            resize_lim=[1.0, 1.0],
            rot_lim=[0.0, 0.0],
            trans_lim=0.0,
            is_train=False),
        dict(
            type='PointsRangeFilter',
            point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]),
        dict(
            type='ImageNormalize',
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]),
        dict(type='DefaultFormatBundle3D', classes=['car']),
        dict(
            type='Collect3D',
            keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d'],
            meta_keys=[
                'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
                'lidar2image', 'camera2lidar', 'img_aug_matrix',
                'lidar_aug_matrix'
            ]),
        dict(type='GTDepth', keyframe_only=True)
    ])
radar_sweeps = 6
radar_max_points = 2500
radar_use_dims = [
    0, 1, 2, 5, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 55, 56
]
radar_compensate_velocity = True
radar_filtering = 'none'
radar_voxel_size = [0.8, 0.8, 8]
radar_jitter = 0
radar_normalize = False
model = dict(
    type='BEVFusion',
    encoders=dict(
        camera=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='SwinTransformer',
                embed_dims=96,
                depths=[2, 2, 6, 2],
                num_heads=[3, 6, 12, 24],
                window_size=7,
                mlp_ratio=4,
                qkv_bias=True,
                qk_scale=None,
                drop_rate=0.0,
                attn_drop_rate=0.0,
                drop_path_rate=0.2,
                patch_norm=True,
                out_indices=[1, 2, 3],
                with_cp=False,
                convert_weights=True,
                init_cfg=dict(
                    type='Pretrained',
                    checkpoint=
                    'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'
                ))),
        lidar=dict(
            voxelize=dict(
                max_num_points=10,
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                voxel_size=[0.075, 0.075, 0.2],
                max_voxels=[120000, 160000]),
            backbone=dict(
                type='SparseEncoder',
                in_channels=5,
                sparse_shape=[1440, 1440, 41],
                output_channels=128,
                order=['conv', 'norm', 'act'],
                encoder_channels=[[16, 16, 32], [32, 32, 64], [64, 64, 128],
                                  [128, 128]],
                encoder_paddings=[[0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]],
                                  [0, 0]],
                block_type='basicblock')),
        infra=dict(
            neck=dict(
                type='GeneralizedLSSFPN',
                in_channels=[192, 384, 768],
                out_channels=256,
                start_level=0,
                num_outs=3,
                norm_cfg=dict(type='BN2d', requires_grad=True),
                act_cfg=dict(type='ReLU', inplace=True),
                upsample_cfg=dict(mode='bilinear', align_corners=False)),
            vtransform=dict(
                type='DepthLSSTransform',
                in_channels=256,
                out_channels=80,
                image_size=[256, 704],
                feature_size=[32, 88],
                xbound=[-54.0, 54.0, 0.3],
                ybound=[-54.0, 54.0, 0.3],
                zbound=[-10.0, 10.0, 20.0],
                dbound=[1.0, 60.0, 0.5],
                downsample=2),
            backbone=dict(
                type='SwinTransformer',
                embed_dims=96,
                depths=[2, 2, 6, 2],
                num_heads=[3, 6, 12, 24],
                window_size=7,
                mlp_ratio=4,
                qkv_bias=True,
                qk_scale=None,
                drop_rate=0.0,
                attn_drop_rate=0.0,
                drop_path_rate=0.2,
                patch_norm=True,
                out_indices=[1, 2, 3],
                with_cp=False,
                convert_weights=True,
                init_cfg=dict(
                    type='Pretrained',
                    checkpoint=
                    'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'
                )))),
    fuser=dict(type='ConvFuser', in_channels=[80, 256, 80], out_channels=256),
    heads=dict(
        map=None,
        object=dict(
            type='TransFusionHead',
            num_proposals=200,
            auxiliary=True,
            in_channels=512,
            hidden_channel=128,
            num_classes=1,
            num_decoder_layers=1,
            num_heads=8,
            nms_kernel_size=3,
            ffn_channel=256,
            dropout=0.1,
            bn_momentum=0.1,
            activation='relu',
            train_cfg=dict(
                dataset='nuScenes',
                point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
                grid_size=[1440, 1440, 41],
                voxel_size=[0.075, 0.075, 0.2],
                out_size_factor=8,
                gaussian_overlap=0.1,
                min_radius=2,
                pos_weight=-1,
                code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                assigner=dict(
                    type='HungarianAssigner3D',
                    iou_calculator=dict(
                        type='BboxOverlaps3D', coordinate='lidar'),
                    cls_cost=dict(
                        type='FocalLossCost',
                        gamma=2.0,
                        alpha=0.25,
                        weight=0.15),
                    reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                    iou_cost=dict(type='IoU3DCost', weight=0.25))),
            test_cfg=dict(
                dataset='nuScenes',
                grid_size=[1440, 1440, 41],
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                pc_range=[-54.0, -54.0],
                nms_type=None),
            common_heads=dict(
                center=[2, 2],
                height=[1, 2],
                dim=[3, 2],
                rot=[2, 2],
                vel=[2, 2]),
            bbox_coder=dict(
                type='TransFusionBBoxCoder',
                pc_range=[-54.0, -54.0],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                score_threshold=0.0,
                out_size_factor=8,
                voxel_size=[0.075, 0.075]),
            loss_cls=dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                reduction='mean',
                loss_weight=1.0),
            loss_heatmap=dict(
                type='GaussianFocalLoss', reduction='mean', loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', reduction='mean',
                           loss_weight=0.25))),
    decoder=dict(
        backbone=dict(
            type='SECOND',
            in_channels=256,
            out_channels=[128, 256],
            layer_nums=[5, 5],
            layer_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            conv_cfg=dict(type='Conv2d', bias=False)),
        neck=dict(
            type='SECONDFPN',
            in_channels=[128, 256],
            out_channels=[256, 256],
            upsample_strides=[1, 2],
            norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
            upsample_cfg=dict(type='deconv', bias=False),
            use_conv_for_no_stride=True)))
optimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.33333333,
    min_lr_ratio=1e-07)
momentum_config = dict(policy='cyclic')
run_dir = 'train_result_infra_short_full'

2024-09-04 10:17:23,214 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2024-09-04 10:17:30,671 - mmdet3d - INFO - load 349483 car database infos
2024-09-04 10:17:30,671 - mmdet3d - INFO - load 157002 bicycle database infos
2024-09-04 10:17:30,671 - mmdet3d - INFO - load 40210 motorcycle database infos
2024-09-04 10:17:30,671 - mmdet3d - INFO - load 16943 vehicle.emergency.police database infos
2024-09-04 10:17:31,487 - mmdet3d - INFO - After filter database:
2024-09-04 10:17:31,500 - mmdet3d - INFO - load 170227 car database infos
2024-09-04 10:17:31,500 - mmdet3d - INFO - load 157002 bicycle database infos
2024-09-04 10:17:31,501 - mmdet3d - INFO - load 40210 motorcycle database infos
2024-09-04 10:17:31,502 - mmdet3d - INFO - load 16943 vehicle.emergency.police database infos
/home/jmeng18/.conda/envs/bevfusion/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1639180588308/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
2024-09-04 10:17:32,127 - mmdet - INFO - load checkpoint from http path: https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth
2024-09-04 10:17:32,907 - mmdet - INFO - load checkpoint from http path: https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth
2024-09-04 10:17:32,997 - mmdet3d - INFO - Model:
BEVFusion(
  (encoders): ModuleDict(
    (camera): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
    (lidar): ModuleDict(
      (voxelize): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
      (backbone): SparseEncoder(
        (conv_input): SparseSequential(
          (0): SubMConv3d()
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (encoder_layers): SparseSequential(
          (encoder_layer1): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer2): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer3): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer4): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
        (conv_out): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    (infra): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
  )
  (fuser): ConvFuser(
    (0): Conv2d(416, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (decoder): ModuleDict(
    (backbone): SECOND(
      (blocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    (neck): SECONDFPN(
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  )
  (heads): ModuleDict(
    (object): TransFusionHead(
      (loss_cls): FocalLoss()
      (loss_bbox): L1Loss()
      (loss_iou): VarifocalLoss()
      (loss_heatmap): GaussianFocalLoss()
      (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (heatmap_head): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (class_encoding): Conv1d(1, 128, kernel_size=(1,), stride=(1,))
      (decoder): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (linear1): Linear(in_features=128, out_features=256, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=256, out_features=128, bias=True)
          (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
          (self_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
          (cross_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (prediction_heads): ModuleList(
        (0): FFN(
          (center): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
        )
      )
    )
  )
)
2024-09-04 10:17:36,250 - mmdet3d - INFO - Start running, host: jmeng18@sg048, work_dir: /home/jmeng18/bev_fusion/bevfusion-beliv/train_result_infra_short_full
2024-09-04 10:17:36,250 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2024-09-04 10:17:36,250 - mmdet3d - INFO - workflow: [('train', 1)], max: 10 epochs
2024-09-04 10:17:36,253 - mmdet3d - INFO - Checkpoints will be saved to /home/jmeng18/bev_fusion/bevfusion-beliv/train_result_infra_short_full by HardDiskBackend.
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/models/heads/bbox/transfusion.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  top_proposals_class = top_proposals // heatmap.shape[-1]
/home/jmeng18/bev_fusion/bevfusion-beliv/mmdet3d/models/heads/bbox/transfusion.py:535: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  grid_size[:2] // self.train_cfg["out_size_factor"]
2024-09-04 10:19:04,197 - mmdet3d - INFO - Epoch [1][50/8000]	lr: 7.973e-05, eta: 1 day, 15:01:17, time: 1.757, data_time: 0.683, memory: 6955, loss/object/loss_heatmap: 136.6491, loss/object/layer_-1_loss_cls: 1.1462, loss/object/layer_-1_loss_bbox: 8.7454, stats/object/matched_ious: 0.0145, loss: 146.5407, grad_norm: nan
2024-09-04 10:20:28,513 - mmdet3d - INFO - Epoch [1][100/8000]	lr: 9.307e-05, eta: 1 day, 14:12:43, time: 1.686, data_time: 0.564, memory: 6955, loss/object/loss_heatmap: 2.8703, loss/object/layer_-1_loss_cls: 0.6378, loss/object/layer_-1_loss_bbox: 5.6545, stats/object/matched_ious: 0.0479, loss: 9.1626, grad_norm: 35.6667
2024-09-04 10:21:52,203 - mmdet3d - INFO - Epoch [1][150/8000]	lr: 1.064e-04, eta: 1 day, 13:50:02, time: 1.674, data_time: 0.592, memory: 6955, loss/object/loss_heatmap: 2.2506, loss/object/layer_-1_loss_cls: 0.5328, loss/object/layer_-1_loss_bbox: 2.6924, stats/object/matched_ious: 0.1089, loss: 5.4759, grad_norm: 21.0457
2024-09-04 10:23:22,647 - mmdet3d - INFO - Epoch [1][200/8000]	lr: 1.197e-04, eta: 1 day, 14:22:54, time: 1.809, data_time: 0.742, memory: 6955, loss/object/loss_heatmap: 2.1339, loss/object/layer_-1_loss_cls: 0.4331, loss/object/layer_-1_loss_bbox: 2.1280, stats/object/matched_ious: 0.1469, loss: 4.6950, grad_norm: 17.9971
^C]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ ^C
]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --run-dir train_result_infra_short_full]0;jmeng18@sg048:~/bev_fusion/bevfusion-beliv]7;file://sg048/home/jmeng18/bev_fusion/bevfusion-beliv(bevfusion) [jmeng18@sg048:[1;32m~/bev_fusion/bevfusion-beliv[0m]$ ^C
]777;notify;Command completed;torchpack dist-run -np 1 python tools/train.py configs/nuscenes/det/transfusion/secfpn/camera+lidar+infra/swint_v0p075/convfuser.yaml --run-dir train_result_infra_short_f